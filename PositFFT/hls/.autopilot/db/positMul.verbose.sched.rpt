

================================================================
== Vitis HLS Report for 'positMul'
================================================================
* Date:           Tue Apr  8 14:32:53 2025

* Version:        2024.2 (Build 5238294 on Nov  8 2024)
* Project:        PositFFT
* Solution:       hls (Vivado IP Flow Target)
* Product family: azynquplus
* Target device:  xazu7ev-fbvb900-1-i


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  5.528 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        0|        0|      0 ns|      0 ns|    1|    1|      yes|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 1


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 1
  Pipeline-0 : II = 1, D = 1, States = { 1 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.52>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "%y_mantissa3_read = read i30 @_ssdm_op_Read.ap_auto.i30, i30 %y_mantissa3" [posit_lib.cpp:731]   --->   Operation 2 'read' 'y_mantissa3_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "%y_exponent2_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %y_exponent2" [posit_lib.cpp:731]   --->   Operation 3 'read' 'y_exponent2_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%y_regime1_read = read i6 @_ssdm_op_Read.ap_auto.i6, i6 %y_regime1" [posit_lib.cpp:731]   --->   Operation 4 'read' 'y_regime1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%y_isZero_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %y_isZero" [posit_lib.cpp:731]   --->   Operation 5 'read' 'y_isZero_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%y_sign_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %y_sign" [posit_lib.cpp:731]   --->   Operation 6 'read' 'y_sign_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%x_mantissa_read = read i30 @_ssdm_op_Read.ap_auto.i30, i30 %x_mantissa" [posit_lib.cpp:731]   --->   Operation 7 'read' 'x_mantissa_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%x_exponent2_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_exponent2" [posit_lib.cpp:731]   --->   Operation 8 'read' 'x_exponent2_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%x_regime1_read = read i6 @_ssdm_op_Read.ap_auto.i6, i6 %x_regime1" [posit_lib.cpp:731]   --->   Operation 9 'read' 'x_regime1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%x_isZero_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_isZero" [posit_lib.cpp:731]   --->   Operation 10 'read' 'x_isZero_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%x_sign_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_sign" [posit_lib.cpp:731]   --->   Operation 11 'read' 'x_sign_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%zext_ln748 = zext i30 %x_mantissa_read" [posit_lib.cpp:748]   --->   Operation 12 'zext' 'zext_ln748' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%zext_ln748_1 = zext i30 %y_mantissa3_read" [posit_lib.cpp:748]   --->   Operation 13 'zext' 'zext_ln748_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns) (grouped into LUT with out node sign_2)   --->   "%sign = xor i1 %x_sign_read, i1 %y_sign_read" [posit_lib.cpp:751]   --->   Operation 14 'xor' 'sign' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 15 [1/1] (0.33ns)   --->   "%isZero = or i1 %x_isZero_read, i1 %y_isZero_read" [posit_lib.cpp:753]   --->   Operation 15 'or' 'isZero' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%sext_ln755 = sext i6 %x_regime1_read" [posit_lib.cpp:755]   --->   Operation 16 'sext' 'sext_ln755' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%zext_ln756 = zext i1 %x_exponent2_read" [posit_lib.cpp:756]   --->   Operation 17 'zext' 'zext_ln756' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%sext_ln756 = sext i6 %y_regime1_read" [posit_lib.cpp:756]   --->   Operation 18 'sext' 'sext_ln756' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%zext_ln757 = zext i1 %y_exponent2_read" [posit_lib.cpp:757]   --->   Operation 19 'zext' 'zext_ln757' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln757 = add i7 %sext_ln755, i7 %sext_ln756" [posit_lib.cpp:757]   --->   Operation 20 'add' 'add_ln757' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.52> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_1 : Operation 21 [1/1] (0.62ns)   --->   "%add_ln757_1 = add i2 %zext_ln756, i2 %zext_ln757" [posit_lib.cpp:757]   --->   Operation 21 'add' 'add_ln757_1' <Predicate = true> <Delay = 0.62> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%zext_ln757_1 = zext i2 %add_ln757_1" [posit_lib.cpp:757]   --->   Operation 22 'zext' 'zext_ln757_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (1.05ns) (root node of TernaryAdder)   --->   "%sf_r = add i7 %zext_ln757_1, i7 %add_ln757" [posit_lib.cpp:757]   --->   Operation 23 'add' 'sf_r' <Predicate = true> <Delay = 1.05> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.52> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%trunc_ln734 = trunc i7 %sf_r" [posit_lib.cpp:734]   --->   Operation 24 'trunc' 'trunc_ln734' <Predicate = (!icmp_ln771)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%tmp = partselect i2 @_ssdm_op_PartSelect.i2.i7.i32, i7 %sf_r, i32 5" [posit_lib.cpp:771]   --->   Operation 25 'partselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.62ns)   --->   "%icmp_ln771 = icmp_eq  i2 %tmp, i2 2" [posit_lib.cpp:771]   --->   Operation 26 'icmp' 'icmp_ln771' <Predicate = true> <Delay = 0.62> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 27 [1/1] (3.76ns)   --->   "%mant = mul i60 %zext_ln748_1, i60 %zext_ln748" [posit_lib.cpp:778]   --->   Operation 27 'mul' 'mant' <Predicate = true> <Delay = 3.76> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.76> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%ovf = bitselect i1 @_ssdm_op_BitSelect.i1.i60.i32, i60 %mant, i32 59" [posit_lib.cpp:779]   --->   Operation 28 'bitselect' 'ovf' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.88ns)   --->   "%sf_r_1 = add i6 %trunc_ln734, i6 1" [posit_lib.cpp:781]   --->   Operation 29 'add' 'sf_r_1' <Predicate = (ovf & !icmp_ln771)> <Delay = 0.88> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.00ns) (grouped into LUT with out node mantissa_4)   --->   "%mantissa = partselect i30 @_ssdm_op_PartSelect.i30.i60.i32, i60 %mant, i32 30" [posit_lib.cpp:782]   --->   Operation 30 'partselect' 'mantissa' <Predicate = (ovf & !or_ln820_1)> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns) (grouped into LUT with out node mantissa_4)   --->   "%mantissa_1 = partselect i30 @_ssdm_op_PartSelect.i30.i60.i32, i60 %mant, i32 29" [posit_lib.cpp:785]   --->   Operation 31 'partselect' 'mantissa_1' <Predicate = (!ovf & !or_ln820_1)> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns) (grouped into LUT with out node regime_1)   --->   "%sf_r_3 = select i1 %ovf, i6 %sf_r_1, i6 %trunc_ln734" [posit_lib.cpp:800]   --->   Operation 32 'select' 'sf_r_3' <Predicate = (!icmp_ln771)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.00ns) (grouped into LUT with out node mantissa_4)   --->   "%mantissa_2 = select i1 %ovf, i30 %mantissa, i30 %mantissa_1" [posit_lib.cpp:779]   --->   Operation 33 'select' 'mantissa_2' <Predicate = (!or_ln820_1)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.46> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.44ns) (out node of the LUT)   --->   "%regime_1 = select i1 %icmp_ln771, i6 34, i6 %sf_r_3" [posit_lib.cpp:771]   --->   Operation 34 'select' 'regime_1' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.88ns)   --->   "%icmp_ln803 = icmp_sgt  i6 %regime_1, i6 29" [posit_lib.cpp:803]   --->   Operation 35 'icmp' 'icmp_ln803' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.88ns)   --->   "%icmp_ln804 = icmp_sgt  i6 %regime_1, i6 34" [posit_lib.cpp:804]   --->   Operation 36 'icmp' 'icmp_ln804' <Predicate = (!or_ln820)> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (0.00ns) (grouped into LUT with out node regime)   --->   "%select_ln804 = select i1 %icmp_ln804, i6 %regime_1, i6 34" [posit_lib.cpp:804]   --->   Operation 37 'select' 'select_ln804' <Predicate = (!or_ln820)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.00ns) (grouped into LUT with out node regime)   --->   "%select_ln820 = select i1 %isZero, i6 0, i6 30" [posit_lib.cpp:820]   --->   Operation 38 'select' 'select_ln820' <Predicate = (or_ln820)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 39 [1/1] (0.00ns) (grouped into LUT with out node regime)   --->   "%or_ln820 = or i1 %isZero, i1 %icmp_ln803" [posit_lib.cpp:820]   --->   Operation 39 'or' 'or_ln820' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 40 [1/1] (0.44ns) (out node of the LUT)   --->   "%regime = select i1 %or_ln820, i6 %select_ln820, i6 %select_ln804" [posit_lib.cpp:820]   --->   Operation 40 'select' 'regime' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 41 [1/1] (0.00ns) (grouped into LUT with out node mantissa_4)   --->   "%select_ln820_2 = select i1 %isZero, i30 0, i30 536870912" [posit_lib.cpp:820]   --->   Operation 41 'select' 'select_ln820_2' <Predicate = (or_ln820_1)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.46> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.00ns) (grouped into LUT with out node mantissa_4)   --->   "%or_ln820_1 = or i1 %isZero, i1 %icmp_ln771" [posit_lib.cpp:820]   --->   Operation 42 'or' 'or_ln820_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 43 [1/1] (0.46ns) (out node of the LUT)   --->   "%mantissa_4 = select i1 %or_ln820_1, i30 %select_ln820_2, i30 %mantissa_2" [posit_lib.cpp:820]   --->   Operation 43 'select' 'mantissa_4' <Predicate = true> <Delay = 0.46> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.46> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 44 [1/1] (0.00ns) (grouped into LUT with out node sign_2)   --->   "%xor_ln820 = xor i1 %isZero, i1 1" [posit_lib.cpp:820]   --->   Operation 44 'xor' 'xor_ln820' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (0.33ns) (out node of the LUT)   --->   "%sign_2 = and i1 %sign, i1 %xor_ln820" [posit_lib.cpp:820]   --->   Operation 45 'and' 'sign_2' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%newret1 = insertvalue i38 <undef>, i1 %sign_2" [posit_lib.cpp:820]   --->   Operation 46 'insertvalue' 'newret1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%newret3 = insertvalue i38 %newret1, i1 %isZero" [posit_lib.cpp:820]   --->   Operation 47 'insertvalue' 'newret3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%newret5 = insertvalue i38 %newret3, i6 %regime" [posit_lib.cpp:820]   --->   Operation 48 'insertvalue' 'newret5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%newret7 = insertvalue i38 %newret5, i30 %mantissa_4" [posit_lib.cpp:820]   --->   Operation 49 'insertvalue' 'newret7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%ret_ln820 = ret i38 %newret7" [posit_lib.cpp:820]   --->   Operation 50 'ret' 'ret_ln820' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 5.528ns
The critical path consists of the following:
	wire read operation ('y_mantissa3_read', posit_lib.cpp:731) on port 'y_mantissa3' (posit_lib.cpp:731) [11]  (0.000 ns)
	'mul' operation 60 bit ('mant', posit_lib.cpp:778) [36]  (3.760 ns)
	'select' operation 6 bit ('sf_r', posit_lib.cpp:800) [41]  (0.000 ns)
	'select' operation 6 bit ('regime', posit_lib.cpp:771) [43]  (0.440 ns)
	'icmp' operation 1 bit ('icmp_ln804', posit_lib.cpp:804) [45]  (0.887 ns)
	'select' operation 6 bit ('select_ln804', posit_lib.cpp:804) [46]  (0.000 ns)
	'select' operation 6 bit ('regime', posit_lib.cpp:820) [49]  (0.440 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
