

================================================================
== Vitis HLS Report for 'pNAngle'
================================================================
* Date:           Tue Apr  8 14:32:52 2025

* Version:        2024.2 (Build 5238294 on Nov  8 2024)
* Project:        PositFFT
* Solution:       hls (Vivado IP Flow Target)
* Product family: azynquplus
* Target device:  xazu7ev-fbvb900-1-i


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.285 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       25|       25|  0.250 us|  0.250 us|    1|    1|      yes|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 26


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 26
* Pipeline : 1
  Pipeline-0 : II = 1, D = 26, States = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 18 
18 --> 19 
19 --> 20 
20 --> 21 
21 --> 22 
22 --> 23 
23 --> 24 
24 --> 25 
25 --> 26 
26 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.04>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%x_mantissa_read = read i30 @_ssdm_op_Read.ap_auto.i30, i30 %x_mantissa" [posit_lib.cpp:1192->posit_lib.cpp:1235]   --->   Operation 27 'read' 'x_mantissa_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%x_exponent_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_exponent" [posit_lib.cpp:1192->posit_lib.cpp:1235]   --->   Operation 28 'read' 'x_exponent_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%x_regime_read = read i6 @_ssdm_op_Read.ap_auto.i6, i6 %x_regime" [posit_lib.cpp:1192->posit_lib.cpp:1235]   --->   Operation 29 'read' 'x_regime_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%x_isZero_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_isZero" [posit_lib.cpp:1192->posit_lib.cpp:1235]   --->   Operation 30 'read' 'x_isZero_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%x_sign_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_sign" [posit_lib.cpp:1192->posit_lib.cpp:1235]   --->   Operation 31 'read' 'x_sign_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%tmp = partselect i5 @_ssdm_op_PartSelect.i5.i6.i32.i32, i6 %x_regime_read, i32 1, i32 5" [posit_lib.cpp:23->posit_lib.cpp:41->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 32 'partselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.87ns)   --->   "%icmp_ln23 = icmp_slt  i5 %tmp, i5 1" [posit_lib.cpp:23->posit_lib.cpp:41->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 33 'icmp' 'icmp_ln23' <Predicate = true> <Delay = 0.87> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%br_ln23 = br i1 %icmp_ln23, void %lor.lhs.false.i.i, void %if.then.i40" [posit_lib.cpp:23->posit_lib.cpp:41->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 34 'br' 'br_ln23' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.88ns)   --->   "%icmp_ln24 = icmp_eq  i6 %x_regime_read, i6 2" [posit_lib.cpp:24->posit_lib.cpp:41->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 35 'icmp' 'icmp_ln24' <Predicate = (!icmp_ln23)> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual_9)   --->   "%xor_ln25 = xor i1 %x_exponent_read, i1 1" [posit_lib.cpp:25->posit_lib.cpp:41->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 36 'xor' 'xor_ln25' <Predicate = (!icmp_ln23)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (1.17ns)   --->   "%icmp_ln25 = icmp_ult  i30 %x_mantissa_read, i30 842887333" [posit_lib.cpp:25->posit_lib.cpp:41->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 37 'icmp' 'icmp_ln25' <Predicate = (!icmp_ln23)> <Delay = 1.17> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual_9)   --->   "%and_ln25 = and i1 %icmp_ln25, i1 %xor_ln25" [posit_lib.cpp:25->posit_lib.cpp:41->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 38 'and' 'and_ln25' <Predicate = (!icmp_ln23)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 39 [1/1] (0.33ns) (out node of the LUT)   --->   "%absXGreaterEqual_9 = and i1 %and_ln25, i1 %icmp_ln24" [posit_lib.cpp:25->posit_lib.cpp:41->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 39 'and' 'absXGreaterEqual_9' <Predicate = (!icmp_ln23)> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%br_ln42 = br i1 %absXGreaterEqual_9, void %if.else.i41, void %if.then.i40" [posit_lib.cpp:42->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 40 'br' 'br_ln42' <Predicate = (!icmp_ln23)> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%shl_ln = bitconcatenate i59 @_ssdm_op_BitConcatenate.i59.i30.i29, i30 %x_mantissa_read, i29 0" [posit_lib.cpp:675->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 41 'bitconcatenate' 'shl_ln' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%zext_ln675_2 = zext i59 %shl_ln" [posit_lib.cpp:675->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 42 'zext' 'zext_ln675_2' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (5.04ns)   --->   "%mul_ln675 = mul i119 %zext_ln675_2, i119 734344906382274626" [posit_lib.cpp:675->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 43 'mul' 'mul_ln675' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 5.04> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 5.04> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%zext_ln680 = zext i119 %mul_ln675" [posit_lib.cpp:680->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 44 'zext' 'zext_ln680' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%tmp_50 = bitselect i1 @_ssdm_op_BitSelect.i1.i149.i32, i149 %zext_ln680, i32 118" [posit_lib.cpp:680->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 45 'bitselect' 'tmp_50' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 4.26>
ST_2 : Operation 46 [1/1] (0.00ns)   --->   "%zext_ln675 = zext i1 %x_exponent_read" [posit_lib.cpp:675->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 46 'zext' 'zext_ln675' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_2 : Operation 47 [1/1] (0.27ns)   --->   "%select_ln680 = select i1 %tmp_50, i6 62, i6 61" [posit_lib.cpp:680->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 47 'select' 'select_ln680' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.27> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 48 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln680 = add i6 %zext_ln675, i6 %x_regime_read" [posit_lib.cpp:680->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 48 'add' 'add_ln680' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.44> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 49 [1/1] (0.88ns) (root node of TernaryAdder)   --->   "%sf_r = add i6 %add_ln680, i6 %select_ln680" [posit_lib.cpp:697->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 49 'add' 'sf_r' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.88> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.44> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 50 [1/1] (0.88ns)   --->   "%icmp_ln703 = icmp_sgt  i6 %sf_r, i6 29" [posit_lib.cpp:703->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 50 'icmp' 'icmp_ln703' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 51 [1/1] (0.44ns)   --->   "%select_ln720 = select i1 %x_isZero_read, i6 0, i6 30" [posit_lib.cpp:720->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 51 'select' 'select_ln720' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 52 [1/1] (0.00ns) (grouped into LUT with out node regime_17)   --->   "%or_ln720 = or i1 %icmp_ln703, i1 %x_isZero_read" [posit_lib.cpp:720->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 52 'or' 'or_ln720' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 53 [1/1] (0.00ns) (grouped into LUT with out node regime_17)   --->   "%regime = select i1 %or_ln720, i6 %select_ln720, i6 %sf_r" [posit_lib.cpp:720->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 53 'select' 'regime' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 54 [1/1] (0.88ns) (out node of the LUT)   --->   "%regime_17 = add i6 %regime, i6 2" [posit_lib.cpp:800->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 54 'add' 'regime_17' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.88> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 55 [1/1] (0.88ns)   --->   "%icmp_ln803 = icmp_sgt  i6 %regime_17, i6 29" [posit_lib.cpp:803->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 55 'icmp' 'icmp_ln803' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 56 [1/1] (0.88ns)   --->   "%icmp_ln804 = icmp_sgt  i6 %regime_17, i6 34" [posit_lib.cpp:804->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 56 'icmp' 'icmp_ln804' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (0.00ns) (grouped into LUT with out node regime_19)   --->   "%select_ln804 = select i1 %icmp_ln804, i6 %regime_17, i6 34" [posit_lib.cpp:804->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 57 'select' 'select_ln804' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 58 [1/1] (0.00ns) (grouped into LUT with out node regime_19)   --->   "%or_ln820 = or i1 %icmp_ln803, i1 %x_isZero_read" [posit_lib.cpp:820->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 58 'or' 'or_ln820' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (0.44ns) (out node of the LUT)   --->   "%regime_19 = select i1 %or_ln820, i6 %select_ln720, i6 %select_ln804" [posit_lib.cpp:820->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 59 'select' 'regime_19' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 3 <SV = 2> <Delay = 7.28>
ST_3 : Operation 60 [1/1] (0.43ns)   --->   "%select_ln739 = select i1 %x_isZero_read, i30 0, i30 842887333" [posit_lib.cpp:739->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 60 'select' 'select_ln739' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.43> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.43> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 61 [8/8] (6.84ns)   --->   "%call_ret_i = call i39 @positAdd, i1 0, i1 %x_isZero_read, i6 %x_regime_read, i1 %x_exponent_read, i30 %x_mantissa_read, i1 1, i1 %x_isZero_read, i6 %regime_19, i1 0, i30 %select_ln739" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 61 'call' 'call_ret_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 6.84> <CoreType = "Generic">   --->   Generic Core

State 4 <SV = 3> <Delay = 7.14>
ST_4 : Operation 62 [7/8] (7.14ns)   --->   "%call_ret_i = call i39 @positAdd, i1 0, i1 %x_isZero_read, i6 %x_regime_read, i1 %x_exponent_read, i30 %x_mantissa_read, i1 1, i1 %x_isZero_read, i6 %regime_19, i1 0, i30 %select_ln739" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 62 'call' 'call_ret_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 5 <SV = 4> <Delay = 7.14>
ST_5 : Operation 63 [6/8] (7.14ns)   --->   "%call_ret_i = call i39 @positAdd, i1 0, i1 %x_isZero_read, i6 %x_regime_read, i1 %x_exponent_read, i30 %x_mantissa_read, i1 1, i1 %x_isZero_read, i6 %regime_19, i1 0, i30 %select_ln739" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 63 'call' 'call_ret_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 6 <SV = 5> <Delay = 7.14>
ST_6 : Operation 64 [5/8] (7.14ns)   --->   "%call_ret_i = call i39 @positAdd, i1 0, i1 %x_isZero_read, i6 %x_regime_read, i1 %x_exponent_read, i30 %x_mantissa_read, i1 1, i1 %x_isZero_read, i6 %regime_19, i1 0, i30 %select_ln739" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 64 'call' 'call_ret_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 7 <SV = 6> <Delay = 7.14>
ST_7 : Operation 65 [4/8] (7.14ns)   --->   "%call_ret_i = call i39 @positAdd, i1 0, i1 %x_isZero_read, i6 %x_regime_read, i1 %x_exponent_read, i30 %x_mantissa_read, i1 1, i1 %x_isZero_read, i6 %regime_19, i1 0, i30 %select_ln739" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 65 'call' 'call_ret_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 8 <SV = 7> <Delay = 7.14>
ST_8 : Operation 66 [3/8] (7.14ns)   --->   "%call_ret_i = call i39 @positAdd, i1 0, i1 %x_isZero_read, i6 %x_regime_read, i1 %x_exponent_read, i30 %x_mantissa_read, i1 1, i1 %x_isZero_read, i6 %regime_19, i1 0, i30 %select_ln739" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 66 'call' 'call_ret_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 9 <SV = 8> <Delay = 7.14>
ST_9 : Operation 67 [2/8] (7.14ns)   --->   "%call_ret_i = call i39 @positAdd, i1 0, i1 %x_isZero_read, i6 %x_regime_read, i1 %x_exponent_read, i30 %x_mantissa_read, i1 1, i1 %x_isZero_read, i6 %regime_19, i1 0, i30 %select_ln739" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 67 'call' 'call_ret_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_9 : Operation 68 [1/1] (0.00ns)   --->   "%tmp_i = bitconcatenate i94 @_ssdm_op_BitConcatenate.i94.i30.i31.i1.i2.i6.i15.i1.i7.i1, i30 %x_mantissa_read, i31 0, i1 %x_exponent_read, i2 0, i6 %x_regime_read, i15 0, i1 %x_isZero_read, i7 0, i1 %x_sign_read" [posit_lib.cpp:1192->posit_lib.cpp:1235]   --->   Operation 68 'bitconcatenate' 'tmp_i' <Predicate = (absXGreaterEqual_9) | (icmp_ln23)> <Delay = 0.00>
ST_9 : Operation 69 [1/1] (0.48ns)   --->   "%br_ln42 = br void %positMod.exit" [posit_lib.cpp:42->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 69 'br' 'br_ln42' <Predicate = (absXGreaterEqual_9) | (icmp_ln23)> <Delay = 0.48>

State 10 <SV = 9> <Delay = 3.42>
ST_10 : Operation 70 [1/8] (0.54ns)   --->   "%call_ret_i = call i39 @positAdd, i1 0, i1 %x_isZero_read, i6 %x_regime_read, i1 %x_exponent_read, i30 %x_mantissa_read, i1 1, i1 %x_isZero_read, i6 %regime_19, i1 0, i30 %select_ln739" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 70 'call' 'call_ret_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.54> <CoreType = "Generic">   --->   Generic Core
ST_10 : Operation 71 [1/1] (0.00ns)   --->   "%result_isZero = extractvalue i39 %call_ret_i" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 71 'extractvalue' 'result_isZero' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_10 : Operation 72 [1/1] (0.00ns)   --->   "%result_regime = extractvalue i39 %call_ret_i" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 72 'extractvalue' 'result_regime' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_10 : Operation 73 [1/1] (0.00ns)   --->   "%result_exponent = extractvalue i39 %call_ret_i" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 73 'extractvalue' 'result_exponent' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_10 : Operation 74 [1/1] (0.00ns)   --->   "%result_mantissa = extractvalue i39 %call_ret_i" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 74 'extractvalue' 'result_mantissa' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_10 : Operation 75 [1/1] (0.00ns)   --->   "%tmp_18_i = bitconcatenate i94 @_ssdm_op_BitConcatenate.i94.i30.i31.i1.i2.i6.i15.i1.i7.i1, i30 %result_mantissa, i31 0, i1 %result_exponent, i2 0, i6 %result_regime, i15 0, i1 %result_isZero, i7 0, i1 %x_sign_read" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 75 'bitconcatenate' 'tmp_18_i' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.00>
ST_10 : Operation 76 [1/1] (0.48ns)   --->   "%br_ln50 = br void %positMod.exit" [posit_lib.cpp:50->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 76 'br' 'br_ln50' <Predicate = (!icmp_ln23 & !absXGreaterEqual_9)> <Delay = 0.48>
ST_10 : Operation 77 [1/1] (0.00ns)   --->   "%storemerge_in_i = phi i94 %tmp_18_i, void %if.else.i41, i94 %tmp_i, void %if.then.i40" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 77 'phi' 'storemerge_in_i' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 78 [1/1] (0.00ns)   --->   "%m_angle_sign_8 = trunc i94 %storemerge_in_i" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 78 'trunc' 'm_angle_sign_8' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 79 [1/1] (0.00ns)   --->   "%m_angle_isZero = bitselect i1 @_ssdm_op_BitSelect.i1.i94.i32, i94 %storemerge_in_i, i32 8" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 79 'bitselect' 'm_angle_isZero' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 80 [1/1] (0.00ns)   --->   "%m_angle_regime_9 = partselect i6 @_ssdm_op_PartSelect.i6.i94.i32.i32, i94 %storemerge_in_i, i32 24, i32 29" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 80 'partselect' 'm_angle_regime_9' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 81 [1/1] (0.00ns)   --->   "%m_angle_exponent_9 = bitselect i1 @_ssdm_op_BitSelect.i1.i94.i32, i94 %storemerge_in_i, i32 32" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 81 'bitselect' 'm_angle_exponent_9' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 82 [1/1] (0.00ns)   --->   "%m_angle_mantissa = partselect i30 @_ssdm_op_PartSelect.i30.i94.i32.i32, i94 %storemerge_in_i, i32 64, i32 93" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 82 'partselect' 'm_angle_mantissa' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 83 [1/1] (0.00ns)   --->   "%tmp_53 = partselect i5 @_ssdm_op_PartSelect.i5.i94.i32.i32, i94 %storemerge_in_i, i32 25, i32 29" [posit_lib.cpp:23->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 83 'partselect' 'tmp_53' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 84 [1/1] (0.87ns)   --->   "%icmp_ln23_4 = icmp_sgt  i5 %tmp_53, i5 0" [posit_lib.cpp:23->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 84 'icmp' 'icmp_ln23_4' <Predicate = true> <Delay = 0.87> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 85 [1/1] (0.88ns)   --->   "%icmp_ln24_3 = icmp_eq  i6 %m_angle_regime_9, i6 1" [posit_lib.cpp:24->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 85 'icmp' 'icmp_ln24_3' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 86 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual)   --->   "%and_ln24 = and i1 %icmp_ln24_3, i1 %m_angle_exponent_9" [posit_lib.cpp:24->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 86 'and' 'and_ln24' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 87 [1/1] (0.33ns)   --->   "%xor_ln25_3 = xor i1 %m_angle_exponent_9, i1 1" [posit_lib.cpp:25->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 87 'xor' 'xor_ln25_3' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 88 [1/1] (1.17ns)   --->   "%icmp_ln25_5 = icmp_ugt  i30 %m_angle_mantissa, i30 842887333" [posit_lib.cpp:25->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 88 'icmp' 'icmp_ln25_5' <Predicate = true> <Delay = 1.17> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 89 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual)   --->   "%and_ln25_11 = and i1 %icmp_ln25_5, i1 %xor_ln25_3" [posit_lib.cpp:25->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 89 'and' 'and_ln25_11' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 90 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual)   --->   "%and_ln25_12 = and i1 %and_ln25_11, i1 %icmp_ln24_3" [posit_lib.cpp:25->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 90 'and' 'and_ln25_12' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 91 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual)   --->   "%or_ln24 = or i1 %icmp_ln23_4, i1 %and_ln24" [posit_lib.cpp:24->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 91 'or' 'or_ln24' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 92 [1/1] (0.33ns) (out node of the LUT)   --->   "%absXGreaterEqual = or i1 %or_ln24, i1 %and_ln25_12" [posit_lib.cpp:24->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 92 'or' 'absXGreaterEqual' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 93 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i)   --->   "%xor_ln27 = xor i1 %absXGreaterEqual, i1 %m_angle_sign_8" [posit_lib.cpp:27->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 93 'xor' 'xor_ln27' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 94 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i)   --->   "%not_m_angle_sign = xor i1 %m_angle_sign_8, i1 1" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 94 'xor' 'not_m_angle_sign' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 95 [1/1] (0.33ns) (out node of the LUT)   --->   "%retval_1_i = and i1 %xor_ln27, i1 %not_m_angle_sign" [posit_lib.cpp:27->posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 95 'and' 'retval_1_i' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 96 [1/1] (0.00ns)   --->   "%br_ln1196 = br i1 %retval_1_i, void %if.else.i, void %if.then.i" [posit_lib.cpp:1196->posit_lib.cpp:1235]   --->   Operation 96 'br' 'br_ln1196' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 97 [1/1] (0.88ns)   --->   "%icmp_ln23_5 = icmp_slt  i6 %m_angle_regime_9, i6 1" [posit_lib.cpp:23->posit_lib.cpp:1198->posit_lib.cpp:1235]   --->   Operation 97 'icmp' 'icmp_ln23_5' <Predicate = (!retval_1_i)> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 98 [1/1] (1.17ns)   --->   "%icmp_ln25_6 = icmp_ult  i30 %m_angle_mantissa, i30 842887333" [posit_lib.cpp:25->posit_lib.cpp:1198->posit_lib.cpp:1235]   --->   Operation 98 'icmp' 'icmp_ln25_6' <Predicate = (!retval_1_i)> <Delay = 1.17> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 99 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i9)   --->   "%and_ln25_13 = and i1 %icmp_ln25_6, i1 %xor_ln25_3" [posit_lib.cpp:25->posit_lib.cpp:1198->posit_lib.cpp:1235]   --->   Operation 99 'and' 'and_ln25_13' <Predicate = (!retval_1_i)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 100 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i9)   --->   "%and_ln25_14 = and i1 %and_ln25_13, i1 %icmp_ln24_3" [posit_lib.cpp:25->posit_lib.cpp:1198->posit_lib.cpp:1235]   --->   Operation 100 'and' 'and_ln25_14' <Predicate = (!retval_1_i)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 101 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i9)   --->   "%absXGreaterEqual_5 = or i1 %icmp_ln23_5, i1 %and_ln25_14" [posit_lib.cpp:23->posit_lib.cpp:1198->posit_lib.cpp:1235]   --->   Operation 101 'or' 'absXGreaterEqual_5' <Predicate = (!retval_1_i)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 102 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i9)   --->   "%xor_ln27_4 = xor i1 %absXGreaterEqual_5, i1 1" [posit_lib.cpp:27->posit_lib.cpp:1198->posit_lib.cpp:1235]   --->   Operation 102 'xor' 'xor_ln27_4' <Predicate = (!retval_1_i)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 103 [1/1] (0.33ns) (out node of the LUT)   --->   "%retval_1_i9 = and i1 %m_angle_sign_8, i1 %xor_ln27_4" [posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235]   --->   Operation 103 'and' 'retval_1_i9' <Predicate = (!retval_1_i)> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 104 [1/1] (0.54ns)   --->   "%br_ln1198 = br i1 %retval_1_i9, void %if.end14.i, void %if.then10.i" [posit_lib.cpp:1198->posit_lib.cpp:1235]   --->   Operation 104 'br' 'br_ln1198' <Predicate = (!retval_1_i)> <Delay = 0.54>

State 11 <SV = 10> <Delay = 6.84>
ST_11 : Operation 105 [8/8] (6.84ns)   --->   "%call_ret8 = call i39 @positAdd, i1 1, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 0, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 105 'call' 'call_ret8' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 6.84> <CoreType = "Generic">   --->   Generic Core
ST_11 : Operation 106 [8/8] (6.84ns)   --->   "%call_ret = call i39 @positAdd, i1 %m_angle_sign_8, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 1, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 106 'call' 'call_ret' <Predicate = (retval_1_i)> <Delay = 6.84> <CoreType = "Generic">   --->   Generic Core

State 12 <SV = 11> <Delay = 7.14>
ST_12 : Operation 107 [7/8] (7.14ns)   --->   "%call_ret8 = call i39 @positAdd, i1 1, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 0, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 107 'call' 'call_ret8' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_12 : Operation 108 [7/8] (7.14ns)   --->   "%call_ret = call i39 @positAdd, i1 %m_angle_sign_8, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 1, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 108 'call' 'call_ret' <Predicate = (retval_1_i)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 13 <SV = 12> <Delay = 7.14>
ST_13 : Operation 109 [6/8] (7.14ns)   --->   "%call_ret8 = call i39 @positAdd, i1 1, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 0, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 109 'call' 'call_ret8' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_13 : Operation 110 [6/8] (7.14ns)   --->   "%call_ret = call i39 @positAdd, i1 %m_angle_sign_8, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 1, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 110 'call' 'call_ret' <Predicate = (retval_1_i)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 14 <SV = 13> <Delay = 7.14>
ST_14 : Operation 111 [5/8] (7.14ns)   --->   "%call_ret8 = call i39 @positAdd, i1 1, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 0, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 111 'call' 'call_ret8' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_14 : Operation 112 [5/8] (7.14ns)   --->   "%call_ret = call i39 @positAdd, i1 %m_angle_sign_8, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 1, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 112 'call' 'call_ret' <Predicate = (retval_1_i)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 15 <SV = 14> <Delay = 7.14>
ST_15 : Operation 113 [4/8] (7.14ns)   --->   "%call_ret8 = call i39 @positAdd, i1 1, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 0, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 113 'call' 'call_ret8' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_15 : Operation 114 [4/8] (7.14ns)   --->   "%call_ret = call i39 @positAdd, i1 %m_angle_sign_8, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 1, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 114 'call' 'call_ret' <Predicate = (retval_1_i)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 16 <SV = 15> <Delay = 7.14>
ST_16 : Operation 115 [3/8] (7.14ns)   --->   "%call_ret8 = call i39 @positAdd, i1 1, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 0, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 115 'call' 'call_ret8' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_16 : Operation 116 [3/8] (7.14ns)   --->   "%call_ret = call i39 @positAdd, i1 %m_angle_sign_8, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 1, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 116 'call' 'call_ret' <Predicate = (retval_1_i)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 17 <SV = 16> <Delay = 7.14>
ST_17 : Operation 117 [2/8] (7.14ns)   --->   "%call_ret8 = call i39 @positAdd, i1 1, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 0, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 117 'call' 'call_ret8' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_17 : Operation 118 [2/8] (7.14ns)   --->   "%call_ret = call i39 @positAdd, i1 %m_angle_sign_8, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 1, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 118 'call' 'call_ret' <Predicate = (retval_1_i)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 18 <SV = 17> <Delay = 2.93>
ST_18 : Operation 119 [1/8] (0.54ns)   --->   "%call_ret8 = call i39 @positAdd, i1 1, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 0, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 119 'call' 'call_ret8' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 0.54> <CoreType = "Generic">   --->   Generic Core
ST_18 : Operation 120 [1/1] (0.00ns)   --->   "%m_angle_sign_5 = extractvalue i39 %call_ret8" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 120 'extractvalue' 'm_angle_sign_5' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 0.00>
ST_18 : Operation 121 [1/1] (0.00ns)   --->   "%m_angle_isZero_6 = extractvalue i39 %call_ret8" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 121 'extractvalue' 'm_angle_isZero_6' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 0.00>
ST_18 : Operation 122 [1/1] (0.00ns)   --->   "%m_angle_regime_5 = extractvalue i39 %call_ret8" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 122 'extractvalue' 'm_angle_regime_5' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 0.00>
ST_18 : Operation 123 [1/1] (0.00ns)   --->   "%m_angle_exponent_5 = extractvalue i39 %call_ret8" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 123 'extractvalue' 'm_angle_exponent_5' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 0.00>
ST_18 : Operation 124 [1/1] (0.00ns)   --->   "%m_angle_mantissa_6 = extractvalue i39 %call_ret8" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 124 'extractvalue' 'm_angle_mantissa_6' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 0.00>
ST_18 : Operation 125 [1/1] (0.54ns)   --->   "%br_ln1199 = br void %if.end14.i" [posit_lib.cpp:1199->posit_lib.cpp:1235]   --->   Operation 125 'br' 'br_ln1199' <Predicate = (!retval_1_i & retval_1_i9)> <Delay = 0.54>
ST_18 : Operation 126 [1/8] (0.54ns)   --->   "%call_ret = call i39 @positAdd, i1 %m_angle_sign_8, i1 %m_angle_isZero, i6 %m_angle_regime_9, i1 %m_angle_exponent_9, i30 %m_angle_mantissa, i1 1, i1 0, i6 2, i1 0, i30 842887333" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 126 'call' 'call_ret' <Predicate = (retval_1_i)> <Delay = 0.54> <CoreType = "Generic">   --->   Generic Core
ST_18 : Operation 127 [1/1] (0.00ns)   --->   "%m_angle_sign = extractvalue i39 %call_ret" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 127 'extractvalue' 'm_angle_sign' <Predicate = (retval_1_i)> <Delay = 0.00>
ST_18 : Operation 128 [1/1] (0.00ns)   --->   "%m_angle_isZero_5 = extractvalue i39 %call_ret" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 128 'extractvalue' 'm_angle_isZero_5' <Predicate = (retval_1_i)> <Delay = 0.00>
ST_18 : Operation 129 [1/1] (0.00ns)   --->   "%m_angle_regime = extractvalue i39 %call_ret" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 129 'extractvalue' 'm_angle_regime' <Predicate = (retval_1_i)> <Delay = 0.00>
ST_18 : Operation 130 [1/1] (0.00ns)   --->   "%m_angle_exponent = extractvalue i39 %call_ret" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 130 'extractvalue' 'm_angle_exponent' <Predicate = (retval_1_i)> <Delay = 0.00>
ST_18 : Operation 131 [1/1] (0.00ns)   --->   "%m_angle_mantissa_5 = extractvalue i39 %call_ret" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 131 'extractvalue' 'm_angle_mantissa_5' <Predicate = (retval_1_i)> <Delay = 0.00>
ST_18 : Operation 132 [1/1] (0.54ns)   --->   "%br_ln1197 = br void %if.end14.i" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 132 'br' 'br_ln1197' <Predicate = (retval_1_i)> <Delay = 0.54>
ST_18 : Operation 133 [1/1] (0.00ns)   --->   "%x_sign_6 = phi i1 %m_angle_sign, void %if.then.i, i1 %m_angle_sign_5, void %if.then10.i, i1 %m_angle_sign_8, void %if.else.i"   --->   Operation 133 'phi' 'x_sign_6' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 134 [1/1] (0.00ns)   --->   "%x_regime_10 = phi i6 %m_angle_regime, void %if.then.i, i6 %m_angle_regime_5, void %if.then10.i, i6 %m_angle_regime_9, void %if.else.i"   --->   Operation 134 'phi' 'x_regime_10' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 135 [1/1] (0.00ns)   --->   "%x_exponent_7 = phi i1 %m_angle_exponent, void %if.then.i, i1 %m_angle_exponent_5, void %if.then10.i, i1 %m_angle_exponent_9, void %if.else.i"   --->   Operation 135 'phi' 'x_exponent_7' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 136 [1/1] (0.00ns)   --->   "%y_mantissa = phi i30 %m_angle_mantissa_5, void %if.then.i, i30 %m_angle_mantissa_6, void %if.then10.i, i30 %m_angle_mantissa, void %if.else.i"   --->   Operation 136 'phi' 'y_mantissa' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 137 [1/1] (0.88ns)   --->   "%icmp_ln23_6 = icmp_sgt  i6 %x_regime_10, i6 0" [posit_lib.cpp:23->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 137 'icmp' 'icmp_ln23_6' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 138 [1/1] (0.88ns)   --->   "%icmp_ln24_4 = icmp_eq  i6 %x_regime_10, i6 0" [posit_lib.cpp:24->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 138 'icmp' 'icmp_ln24_4' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 139 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual_6)   --->   "%and_ln24_2 = and i1 %icmp_ln24_4, i1 %x_exponent_7" [posit_lib.cpp:24->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 139 'and' 'and_ln24_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 140 [1/1] (0.33ns)   --->   "%xor_ln25_4 = xor i1 %x_exponent_7, i1 1" [posit_lib.cpp:25->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 140 'xor' 'xor_ln25_4' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 141 [1/1] (1.17ns)   --->   "%icmp_ln25_7 = icmp_ugt  i30 %y_mantissa, i30 842887333" [posit_lib.cpp:25->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 141 'icmp' 'icmp_ln25_7' <Predicate = true> <Delay = 1.17> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 142 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual_6)   --->   "%and_ln25_15 = and i1 %icmp_ln25_7, i1 %xor_ln25_4" [posit_lib.cpp:25->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 142 'and' 'and_ln25_15' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 143 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual_6)   --->   "%and_ln25_16 = and i1 %and_ln25_15, i1 %icmp_ln24_4" [posit_lib.cpp:25->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 143 'and' 'and_ln25_16' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 144 [1/1] (0.00ns) (grouped into LUT with out node absXGreaterEqual_6)   --->   "%or_ln24_2 = or i1 %icmp_ln23_6, i1 %and_ln24_2" [posit_lib.cpp:24->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 144 'or' 'or_ln24_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 145 [1/1] (0.33ns) (out node of the LUT)   --->   "%absXGreaterEqual_6 = or i1 %or_ln24_2, i1 %and_ln25_16" [posit_lib.cpp:24->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 145 'or' 'absXGreaterEqual_6' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 146 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i20)   --->   "%xor_ln27_5 = xor i1 %absXGreaterEqual_6, i1 %x_sign_6" [posit_lib.cpp:27->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 146 'xor' 'xor_ln27_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 147 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i20)   --->   "%not_y_sign = xor i1 %x_sign_6, i1 1" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 147 'xor' 'not_y_sign' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 148 [1/1] (0.33ns) (out node of the LUT)   --->   "%retval_1_i20 = and i1 %xor_ln27_5, i1 %not_y_sign" [posit_lib.cpp:27->posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 148 'and' 'retval_1_i20' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 149 [1/1] (0.00ns)   --->   "%br_ln1200 = br i1 %retval_1_i20, void %if.else22.i, void %if.then18.i" [posit_lib.cpp:1200->posit_lib.cpp:1235]   --->   Operation 149 'br' 'br_ln1200' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 150 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i31)   --->   "%tmp_54 = bitselect i1 @_ssdm_op_BitSelect.i1.i6.i32, i6 %x_regime_10, i32 5" [posit_lib.cpp:23->posit_lib.cpp:1202->posit_lib.cpp:1235]   --->   Operation 150 'bitselect' 'tmp_54' <Predicate = (!retval_1_i20)> <Delay = 0.00>
ST_18 : Operation 151 [1/1] (1.17ns)   --->   "%icmp_ln25_8 = icmp_ult  i30 %y_mantissa, i30 842887333" [posit_lib.cpp:25->posit_lib.cpp:1202->posit_lib.cpp:1235]   --->   Operation 151 'icmp' 'icmp_ln25_8' <Predicate = (!retval_1_i20)> <Delay = 1.17> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 152 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i31)   --->   "%and_ln25_17 = and i1 %icmp_ln25_8, i1 %xor_ln25_4" [posit_lib.cpp:25->posit_lib.cpp:1202->posit_lib.cpp:1235]   --->   Operation 152 'and' 'and_ln25_17' <Predicate = (!retval_1_i20)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 153 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i31)   --->   "%and_ln25_18 = and i1 %and_ln25_17, i1 %icmp_ln24_4" [posit_lib.cpp:25->posit_lib.cpp:1202->posit_lib.cpp:1235]   --->   Operation 153 'and' 'and_ln25_18' <Predicate = (!retval_1_i20)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 154 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i31)   --->   "%absXGreaterEqual_7 = or i1 %tmp_54, i1 %and_ln25_18" [posit_lib.cpp:23->posit_lib.cpp:1202->posit_lib.cpp:1235]   --->   Operation 154 'or' 'absXGreaterEqual_7' <Predicate = (!retval_1_i20)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 155 [1/1] (0.00ns) (grouped into LUT with out node retval_1_i31)   --->   "%xor_ln27_6 = xor i1 %absXGreaterEqual_7, i1 1" [posit_lib.cpp:27->posit_lib.cpp:1202->posit_lib.cpp:1235]   --->   Operation 155 'xor' 'xor_ln27_6' <Predicate = (!retval_1_i20)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 156 [1/1] (0.33ns) (out node of the LUT)   --->   "%retval_1_i31 = and i1 %x_sign_6, i1 %xor_ln27_6" [posit_lib.cpp:1197->posit_lib.cpp:1235]   --->   Operation 156 'and' 'retval_1_i31' <Predicate = (!retval_1_i20)> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

State 19 <SV = 18> <Delay = 6.84>
ST_19 : Operation 157 [1/1] (0.00ns)   --->   "%y_isZero = phi i1 %m_angle_isZero_5, void %if.then.i, i1 %m_angle_isZero_6, void %if.then10.i, i1 %m_angle_isZero, void %if.else.i"   --->   Operation 157 'phi' 'y_isZero' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 158 [1/1] (0.54ns)   --->   "%br_ln1202 = br i1 %retval_1_i31, void %_Z7pNAngle5POSIT.1259.exit, void %if.then26.i" [posit_lib.cpp:1202->posit_lib.cpp:1235]   --->   Operation 158 'br' 'br_ln1202' <Predicate = (!retval_1_i20)> <Delay = 0.54>
ST_19 : Operation 159 [8/8] (6.84ns)   --->   "%call_ret1 = call i39 @positAdd, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa, i1 0, i1 0, i6 1, i1 0, i30 842887333" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 159 'call' 'call_ret1' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 6.84> <CoreType = "Generic">   --->   Generic Core
ST_19 : Operation 160 [8/8] (6.84ns)   --->   "%call_ret9 = call i39 @positAdd, i1 0, i1 0, i6 1, i1 0, i30 842887333, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 160 'call' 'call_ret9' <Predicate = (retval_1_i20)> <Delay = 6.84> <CoreType = "Generic">   --->   Generic Core

State 20 <SV = 19> <Delay = 7.14>
ST_20 : Operation 161 [7/8] (7.14ns)   --->   "%call_ret1 = call i39 @positAdd, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa, i1 0, i1 0, i6 1, i1 0, i30 842887333" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 161 'call' 'call_ret1' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_20 : Operation 162 [7/8] (7.14ns)   --->   "%call_ret9 = call i39 @positAdd, i1 0, i1 0, i6 1, i1 0, i30 842887333, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 162 'call' 'call_ret9' <Predicate = (retval_1_i20)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 21 <SV = 20> <Delay = 7.14>
ST_21 : Operation 163 [6/8] (7.14ns)   --->   "%call_ret1 = call i39 @positAdd, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa, i1 0, i1 0, i6 1, i1 0, i30 842887333" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 163 'call' 'call_ret1' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_21 : Operation 164 [6/8] (7.14ns)   --->   "%call_ret9 = call i39 @positAdd, i1 0, i1 0, i6 1, i1 0, i30 842887333, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 164 'call' 'call_ret9' <Predicate = (retval_1_i20)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 22 <SV = 21> <Delay = 7.14>
ST_22 : Operation 165 [5/8] (7.14ns)   --->   "%call_ret1 = call i39 @positAdd, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa, i1 0, i1 0, i6 1, i1 0, i30 842887333" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 165 'call' 'call_ret1' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_22 : Operation 166 [5/8] (7.14ns)   --->   "%call_ret9 = call i39 @positAdd, i1 0, i1 0, i6 1, i1 0, i30 842887333, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 166 'call' 'call_ret9' <Predicate = (retval_1_i20)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 23 <SV = 22> <Delay = 7.14>
ST_23 : Operation 167 [4/8] (7.14ns)   --->   "%call_ret1 = call i39 @positAdd, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa, i1 0, i1 0, i6 1, i1 0, i30 842887333" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 167 'call' 'call_ret1' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_23 : Operation 168 [4/8] (7.14ns)   --->   "%call_ret9 = call i39 @positAdd, i1 0, i1 0, i6 1, i1 0, i30 842887333, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 168 'call' 'call_ret9' <Predicate = (retval_1_i20)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 24 <SV = 23> <Delay = 7.14>
ST_24 : Operation 169 [3/8] (7.14ns)   --->   "%call_ret1 = call i39 @positAdd, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa, i1 0, i1 0, i6 1, i1 0, i30 842887333" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 169 'call' 'call_ret1' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_24 : Operation 170 [3/8] (7.14ns)   --->   "%call_ret9 = call i39 @positAdd, i1 0, i1 0, i6 1, i1 0, i30 842887333, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 170 'call' 'call_ret9' <Predicate = (retval_1_i20)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 25 <SV = 24> <Delay = 7.14>
ST_25 : Operation 171 [2/8] (7.14ns)   --->   "%call_ret1 = call i39 @positAdd, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa, i1 0, i1 0, i6 1, i1 0, i30 842887333" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 171 'call' 'call_ret1' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core
ST_25 : Operation 172 [2/8] (7.14ns)   --->   "%call_ret9 = call i39 @positAdd, i1 0, i1 0, i6 1, i1 0, i30 842887333, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 172 'call' 'call_ret9' <Predicate = (retval_1_i20)> <Delay = 7.14> <CoreType = "Generic">   --->   Generic Core

State 26 <SV = 25> <Delay = 1.42>
ST_26 : Operation 173 [1/8] (0.54ns)   --->   "%call_ret1 = call i39 @positAdd, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa, i1 0, i1 0, i6 1, i1 0, i30 842887333" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 173 'call' 'call_ret1' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 0.54> <CoreType = "Generic">   --->   Generic Core
ST_26 : Operation 174 [1/1] (0.00ns) (grouped into LUT with out node m_angle_sign_7)   --->   "%newret = extractvalue i39 %call_ret1" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 174 'extractvalue' 'newret' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 0.00>
ST_26 : Operation 175 [1/1] (0.00ns)   --->   "%m_angle_isZero_8 = extractvalue i39 %call_ret1" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 175 'extractvalue' 'm_angle_isZero_8' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 0.00>
ST_26 : Operation 176 [1/1] (0.00ns)   --->   "%m_angle_regime_7 = extractvalue i39 %call_ret1" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 176 'extractvalue' 'm_angle_regime_7' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 0.00>
ST_26 : Operation 177 [1/1] (0.00ns)   --->   "%m_angle_exponent_7 = extractvalue i39 %call_ret1" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 177 'extractvalue' 'm_angle_exponent_7' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 0.00>
ST_26 : Operation 178 [1/1] (0.00ns)   --->   "%m_angle_mantissa_8 = extractvalue i39 %call_ret1" [posit_lib.cpp:1203->posit_lib.cpp:1235]   --->   Operation 178 'extractvalue' 'm_angle_mantissa_8' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 0.00>
ST_26 : Operation 179 [1/1] (0.33ns) (out node of the LUT)   --->   "%m_angle_sign_7 = xor i1 %newret, i1 1" [posit_lib.cpp:1204->posit_lib.cpp:1235]   --->   Operation 179 'xor' 'm_angle_sign_7' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_26 : Operation 180 [1/1] (0.54ns)   --->   "%br_ln1205 = br void %_Z7pNAngle5POSIT.1259.exit" [posit_lib.cpp:1205->posit_lib.cpp:1235]   --->   Operation 180 'br' 'br_ln1205' <Predicate = (!retval_1_i20 & retval_1_i31)> <Delay = 0.54>
ST_26 : Operation 181 [1/8] (0.54ns)   --->   "%call_ret9 = call i39 @positAdd, i1 0, i1 0, i6 1, i1 0, i30 842887333, i1 1, i1 %y_isZero, i6 %x_regime_10, i1 %x_exponent_7, i30 %y_mantissa" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 181 'call' 'call_ret9' <Predicate = (retval_1_i20)> <Delay = 0.54> <CoreType = "Generic">   --->   Generic Core
ST_26 : Operation 182 [1/1] (0.00ns)   --->   "%result_sign = extractvalue i39 %call_ret9" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 182 'extractvalue' 'result_sign' <Predicate = (retval_1_i20)> <Delay = 0.00>
ST_26 : Operation 183 [1/1] (0.00ns)   --->   "%result_isZero_6 = extractvalue i39 %call_ret9" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 183 'extractvalue' 'result_isZero_6' <Predicate = (retval_1_i20)> <Delay = 0.00>
ST_26 : Operation 184 [1/1] (0.00ns)   --->   "%result_regime_17 = extractvalue i39 %call_ret9" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 184 'extractvalue' 'result_regime_17' <Predicate = (retval_1_i20)> <Delay = 0.00>
ST_26 : Operation 185 [1/1] (0.00ns)   --->   "%result_exponent_2 = extractvalue i39 %call_ret9" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 185 'extractvalue' 'result_exponent_2' <Predicate = (retval_1_i20)> <Delay = 0.00>
ST_26 : Operation 186 [1/1] (0.00ns)   --->   "%result_mantissa_8 = extractvalue i39 %call_ret9" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 186 'extractvalue' 'result_mantissa_8' <Predicate = (retval_1_i20)> <Delay = 0.00>
ST_26 : Operation 187 [1/1] (0.54ns)   --->   "%br_ln1201 = br void %_Z7pNAngle5POSIT.1259.exit" [posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 187 'br' 'br_ln1201' <Predicate = (retval_1_i20)> <Delay = 0.54>
ST_26 : Operation 188 [1/1] (0.00ns)   --->   "%ref_tmp_0292_2 = phi i1 %result_sign, void %if.then18.i, i1 %m_angle_sign_7, void %if.then26.i, i1 %x_sign_6, void %if.else22.i"   --->   Operation 188 'phi' 'ref_tmp_0292_2' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 189 [1/1] (0.00ns)   --->   "%ref_tmp_1293_2 = phi i1 %result_isZero_6, void %if.then18.i, i1 %m_angle_isZero_8, void %if.then26.i, i1 %y_isZero, void %if.else22.i"   --->   Operation 189 'phi' 'ref_tmp_1293_2' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 190 [1/1] (0.00ns)   --->   "%ref_tmp_3_2 = phi i6 %result_regime_17, void %if.then18.i, i6 %m_angle_regime_7, void %if.then26.i, i6 %x_regime_10, void %if.else22.i"   --->   Operation 190 'phi' 'ref_tmp_3_2' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 191 [1/1] (0.00ns)   --->   "%ref_tmp_4_2 = phi i1 %result_exponent_2, void %if.then18.i, i1 %m_angle_exponent_7, void %if.then26.i, i1 %x_exponent_7, void %if.else22.i"   --->   Operation 191 'phi' 'ref_tmp_4_2' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 192 [1/1] (0.00ns)   --->   "%ref_tmp_5_2 = phi i30 %result_mantissa_8, void %if.then18.i, i30 %m_angle_mantissa_8, void %if.then26.i, i30 %y_mantissa, void %if.else22.i"   --->   Operation 192 'phi' 'ref_tmp_5_2' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 193 [1/1] (0.00ns)   --->   "%mrv = insertvalue i39 <undef>, i1 %ref_tmp_0292_2" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 193 'insertvalue' 'mrv' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 194 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue i39 %mrv, i1 %ref_tmp_1293_2" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 194 'insertvalue' 'mrv_1' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 195 [1/1] (0.00ns)   --->   "%mrv_2 = insertvalue i39 %mrv_1, i6 %ref_tmp_3_2" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 195 'insertvalue' 'mrv_2' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 196 [1/1] (0.00ns)   --->   "%mrv_3 = insertvalue i39 %mrv_2, i1 %ref_tmp_4_2" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 196 'insertvalue' 'mrv_3' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 197 [1/1] (0.00ns)   --->   "%mrv_4 = insertvalue i39 %mrv_3, i30 %ref_tmp_5_2" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 197 'insertvalue' 'mrv_4' <Predicate = true> <Delay = 0.00>
ST_26 : Operation 198 [1/1] (0.00ns)   --->   "%ret_ln852 = ret i39 %mrv_4" [posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235]   --->   Operation 198 'ret' 'ret_ln852' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 5.040ns
The critical path consists of the following:
	wire read operation ('x_mantissa_read', posit_lib.cpp:1192->posit_lib.cpp:1235) on port 'x_mantissa' (posit_lib.cpp:1192->posit_lib.cpp:1235) [6]  (0.000 ns)
	'mul' operation 119 bit ('mul_ln675', posit_lib.cpp:675->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235) [25]  (5.040 ns)

 <State 2>: 4.262ns
The critical path consists of the following:
	'select' operation 6 bit ('select_ln680', posit_lib.cpp:680->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235) [28]  (0.275 ns)
	'add' operation 6 bit ('sf_r', posit_lib.cpp:697->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235) [30]  (0.885 ns)
	'icmp' operation 1 bit ('icmp_ln703', posit_lib.cpp:703->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235) [31]  (0.887 ns)
	'or' operation 1 bit ('or_ln720', posit_lib.cpp:720->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235) [33]  (0.000 ns)
	'select' operation 6 bit ('regime', posit_lib.cpp:720->posit_lib.cpp:44->posit_lib.cpp:1194->posit_lib.cpp:1235) [34]  (0.000 ns)
	'add' operation 6 bit ('regime', posit_lib.cpp:800->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235) [35]  (0.887 ns)
	'icmp' operation 1 bit ('icmp_ln804', posit_lib.cpp:804->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235) [37]  (0.887 ns)
	'select' operation 6 bit ('select_ln804', posit_lib.cpp:804->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235) [38]  (0.000 ns)
	'select' operation 6 bit ('regime', posit_lib.cpp:820->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235) [40]  (0.440 ns)

 <State 3>: 7.285ns
The critical path consists of the following:
	'select' operation 30 bit ('select_ln739', posit_lib.cpp:739->posit_lib.cpp:47->posit_lib.cpp:1194->posit_lib.cpp:1235) [41]  (0.435 ns)
	'call' operation 39 bit ('call_ret_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) to 'positAdd' [42]  (6.850 ns)

 <State 4>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) to 'positAdd' [42]  (7.140 ns)

 <State 5>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) to 'positAdd' [42]  (7.140 ns)

 <State 6>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) to 'positAdd' [42]  (7.140 ns)

 <State 7>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) to 'positAdd' [42]  (7.140 ns)

 <State 8>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) to 'positAdd' [42]  (7.140 ns)

 <State 9>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) to 'positAdd' [42]  (7.140 ns)

 <State 10>: 3.425ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) to 'positAdd' [42]  (0.547 ns)
	multiplexor before 'phi' operation 94 bit ('storemerge_in_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) with incoming values : ('tmp_18_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) ('tmp_i', posit_lib.cpp:1192->posit_lib.cpp:1235) [53]  (0.489 ns)
	'phi' operation 94 bit ('storemerge_in_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) with incoming values : ('tmp_18_i', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) ('tmp_i', posit_lib.cpp:1192->posit_lib.cpp:1235) [53]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln25_5', posit_lib.cpp:25->posit_lib.cpp:1196->posit_lib.cpp:1235) [64]  (1.180 ns)
	'and' operation 1 bit ('and_ln25_11', posit_lib.cpp:25->posit_lib.cpp:1196->posit_lib.cpp:1235) [65]  (0.000 ns)
	'and' operation 1 bit ('and_ln25_12', posit_lib.cpp:25->posit_lib.cpp:1196->posit_lib.cpp:1235) [66]  (0.000 ns)
	'or' operation 1 bit ('absXGreaterEqual', posit_lib.cpp:24->posit_lib.cpp:1196->posit_lib.cpp:1235) [68]  (0.331 ns)
	'xor' operation 1 bit ('xor_ln27', posit_lib.cpp:27->posit_lib.cpp:1196->posit_lib.cpp:1235) [69]  (0.000 ns)
	'and' operation 1 bit ('retval_1_i', posit_lib.cpp:27->posit_lib.cpp:1196->posit_lib.cpp:1235) [71]  (0.331 ns)
	multiplexor before 'phi' operation 1 bit ('y_sign') with incoming values : ('m_angle.sign', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) ('m_angle.sign', posit_lib.cpp:1199->posit_lib.cpp:1235) ('m_angle.sign', posit_lib.cpp:1197->posit_lib.cpp:1235) [99]  (0.547 ns)

 <State 11>: 6.850ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret', posit_lib.cpp:1197->posit_lib.cpp:1235) to 'positAdd' [91]  (6.850 ns)

 <State 12>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret8', posit_lib.cpp:1199->posit_lib.cpp:1235) to 'positAdd' [83]  (7.140 ns)

 <State 13>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret8', posit_lib.cpp:1199->posit_lib.cpp:1235) to 'positAdd' [83]  (7.140 ns)

 <State 14>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret8', posit_lib.cpp:1199->posit_lib.cpp:1235) to 'positAdd' [83]  (7.140 ns)

 <State 15>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret8', posit_lib.cpp:1199->posit_lib.cpp:1235) to 'positAdd' [83]  (7.140 ns)

 <State 16>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret8', posit_lib.cpp:1199->posit_lib.cpp:1235) to 'positAdd' [83]  (7.140 ns)

 <State 17>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret8', posit_lib.cpp:1199->posit_lib.cpp:1235) to 'positAdd' [83]  (7.140 ns)

 <State 18>: 2.936ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret8', posit_lib.cpp:1199->posit_lib.cpp:1235) to 'positAdd' [83]  (0.547 ns)
	multiplexor before 'phi' operation 30 bit ('m_angle.mantissa') with incoming values : ('m_angle.mantissa', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) ('m_angle.mantissa', posit_lib.cpp:1199->posit_lib.cpp:1235) ('m_angle.mantissa', posit_lib.cpp:1197->posit_lib.cpp:1235) [103]  (0.547 ns)
	'phi' operation 30 bit ('m_angle.mantissa') with incoming values : ('m_angle.mantissa', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) ('m_angle.mantissa', posit_lib.cpp:1199->posit_lib.cpp:1235) ('m_angle.mantissa', posit_lib.cpp:1197->posit_lib.cpp:1235) [103]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln25_7', posit_lib.cpp:25->posit_lib.cpp:1200->posit_lib.cpp:1235) [108]  (1.180 ns)
	'and' operation 1 bit ('and_ln25_15', posit_lib.cpp:25->posit_lib.cpp:1200->posit_lib.cpp:1235) [109]  (0.000 ns)
	'and' operation 1 bit ('and_ln25_16', posit_lib.cpp:25->posit_lib.cpp:1200->posit_lib.cpp:1235) [110]  (0.000 ns)
	'or' operation 1 bit ('absXGreaterEqual', posit_lib.cpp:24->posit_lib.cpp:1200->posit_lib.cpp:1235) [112]  (0.331 ns)
	'xor' operation 1 bit ('xor_ln27_5', posit_lib.cpp:27->posit_lib.cpp:1200->posit_lib.cpp:1235) [113]  (0.000 ns)
	'and' operation 1 bit ('retval_1_i20', posit_lib.cpp:27->posit_lib.cpp:1200->posit_lib.cpp:1235) [115]  (0.331 ns)

 <State 19>: 6.850ns
The critical path consists of the following:
	'phi' operation 1 bit ('m_angle.isZero') with incoming values : ('m_angle.isZero', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) ('m_angle.isZero', posit_lib.cpp:1199->posit_lib.cpp:1235) ('m_angle.isZero', posit_lib.cpp:1197->posit_lib.cpp:1235) [100]  (0.000 ns)
	'call' operation 39 bit ('call_ret9', posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235) to 'positAdd' [136]  (6.850 ns)

 <State 20>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret1', posit_lib.cpp:1203->posit_lib.cpp:1235) to 'positAdd' [127]  (7.140 ns)

 <State 21>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret9', posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235) to 'positAdd' [136]  (7.140 ns)

 <State 22>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret1', posit_lib.cpp:1203->posit_lib.cpp:1235) to 'positAdd' [127]  (7.140 ns)

 <State 23>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret9', posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235) to 'positAdd' [136]  (7.140 ns)

 <State 24>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret9', posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235) to 'positAdd' [136]  (7.140 ns)

 <State 25>: 7.140ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret9', posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235) to 'positAdd' [136]  (7.140 ns)

 <State 26>: 1.425ns
The critical path consists of the following:
	'call' operation 39 bit ('call_ret1', posit_lib.cpp:1203->posit_lib.cpp:1235) to 'positAdd' [127]  (0.547 ns)
	'xor' operation 1 bit ('m_angle.sign', posit_lib.cpp:1204->posit_lib.cpp:1235) [133]  (0.331 ns)
	multiplexor before 'phi' operation 1 bit ('y_sign') with incoming values : ('m_angle.sign', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) ('m_angle.sign', posit_lib.cpp:1199->posit_lib.cpp:1235) ('m_angle.sign', posit_lib.cpp:1197->posit_lib.cpp:1235) ('m_angle.sign', posit_lib.cpp:1204->posit_lib.cpp:1235) ('result.sign', posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235) [144]  (0.547 ns)
	'phi' operation 1 bit ('y_sign') with incoming values : ('m_angle.sign', posit_lib.cpp:852->posit_lib.cpp:48->posit_lib.cpp:1194->posit_lib.cpp:1235) ('m_angle.sign', posit_lib.cpp:1199->posit_lib.cpp:1235) ('m_angle.sign', posit_lib.cpp:1197->posit_lib.cpp:1235) ('m_angle.sign', posit_lib.cpp:1204->posit_lib.cpp:1235) ('result.sign', posit_lib.cpp:852->posit_lib.cpp:1201->posit_lib.cpp:1235) [144]  (0.000 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
