

================================================================
== Vitis HLS Report for 'positAdd'
================================================================
* Date:           Tue Apr  8 14:32:50 2025

* Version:        2024.2 (Build 5238294 on Nov  8 2024)
* Project:        PositFFT
* Solution:       hls (Vivado IP Flow Target)
* Product family: azynquplus
* Target device:  xazu7ev-fbvb900-1-i


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.140 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        7|        7|  70.000 ns|  70.000 ns|    1|    1|      yes|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 8


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 8
* Pipeline : 1
  Pipeline-0 : II = 1, D = 8, States = { 1 2 3 4 5 6 7 8 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 6.84>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%y_mantissa3_val_read = read i30 @_ssdm_op_Read.ap_auto.i30, i30 %y_mantissa3_val" [posit_lib.cpp:523]   --->   Operation 9 'read' 'y_mantissa3_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%y_exponent2_val_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %y_exponent2_val" [posit_lib.cpp:523]   --->   Operation 10 'read' 'y_exponent2_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%y_regime1_val_read = read i6 @_ssdm_op_Read.ap_auto.i6, i6 %y_regime1_val" [posit_lib.cpp:523]   --->   Operation 11 'read' 'y_regime1_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%y_isZero_val_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %y_isZero_val" [posit_lib.cpp:523]   --->   Operation 12 'read' 'y_isZero_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%y_sign_val_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %y_sign_val" [posit_lib.cpp:523]   --->   Operation 13 'read' 'y_sign_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%x_mantissa3_read = read i30 @_ssdm_op_Read.ap_auto.i30, i30 %x_mantissa3" [posit_lib.cpp:523]   --->   Operation 14 'read' 'x_mantissa3_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%x_exponent2_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_exponent2" [posit_lib.cpp:523]   --->   Operation 15 'read' 'x_exponent2_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%x_regime1_read = read i6 @_ssdm_op_Read.ap_auto.i6, i6 %x_regime1" [posit_lib.cpp:523]   --->   Operation 16 'read' 'x_regime1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%x_isZero_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_isZero" [posit_lib.cpp:523]   --->   Operation 17 'read' 'x_isZero_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%x_sign_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %x_sign" [posit_lib.cpp:523]   --->   Operation 18 'read' 'x_sign_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.88ns)   --->   "%icmp_ln541 = icmp_sgt  i6 %x_regime1_read, i6 %y_regime1_val_read" [posit_lib.cpp:541]   --->   Operation 19 'icmp' 'icmp_ln541' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%sext_ln546 = sext i6 %x_regime1_read" [posit_lib.cpp:546]   --->   Operation 20 'sext' 'sext_ln546' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%zext_ln546 = zext i1 %x_exponent2_read" [posit_lib.cpp:546]   --->   Operation 21 'zext' 'zext_ln546' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.88ns)   --->   "%sf_x = add i7 %sext_ln546, i7 %zext_ln546" [posit_lib.cpp:546]   --->   Operation 22 'add' 'sf_x' <Predicate = true> <Delay = 0.88> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%sext_ln547 = sext i6 %y_regime1_val_read" [posit_lib.cpp:547]   --->   Operation 23 'sext' 'sext_ln547' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%zext_ln547 = zext i1 %y_exponent2_val_read" [posit_lib.cpp:547]   --->   Operation 24 'zext' 'zext_ln547' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.88ns)   --->   "%sf_y = add i7 %sext_ln547, i7 %zext_ln547" [posit_lib.cpp:547]   --->   Operation 25 'add' 'sf_y' <Predicate = true> <Delay = 0.88> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (0.88ns)   --->   "%icmp_ln541_1 = icmp_eq  i6 %x_regime1_read, i6 %y_regime1_val_read" [posit_lib.cpp:541]   --->   Operation 26 'icmp' 'icmp_ln541_1' <Predicate = true> <Delay = 0.88> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 27 [1/1] (0.00ns) (grouped into LUT with out node or_ln542_1)   --->   "%xor_ln541 = xor i1 %y_exponent2_val_read, i1 1" [posit_lib.cpp:541]   --->   Operation 27 'xor' 'xor_ln541' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 28 [1/1] (0.00ns) (grouped into LUT with out node or_ln542_1)   --->   "%and_ln541 = and i1 %icmp_ln541_1, i1 %x_exponent2_read" [posit_lib.cpp:541]   --->   Operation 28 'and' 'and_ln541' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (0.00ns) (grouped into LUT with out node or_ln542_1)   --->   "%and_ln541_1 = and i1 %and_ln541, i1 %xor_ln541" [posit_lib.cpp:541]   --->   Operation 29 'and' 'and_ln541_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.00ns) (grouped into LUT with out node and_ln542)   --->   "%xor_ln542 = xor i1 %x_exponent2_read, i1 %y_exponent2_val_read" [posit_lib.cpp:542]   --->   Operation 30 'xor' 'xor_ln542' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (0.00ns) (grouped into LUT with out node and_ln542)   --->   "%xor_ln542_1 = xor i1 %xor_ln542, i1 1" [posit_lib.cpp:542]   --->   Operation 31 'xor' 'xor_ln542_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (0.33ns) (out node of the LUT)   --->   "%and_ln542 = and i1 %icmp_ln541_1, i1 %xor_ln542_1" [posit_lib.cpp:542]   --->   Operation 32 'and' 'and_ln542' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (1.17ns)   --->   "%icmp_ln542 = icmp_ult  i30 %x_mantissa3_read, i30 %y_mantissa3_val_read" [posit_lib.cpp:542]   --->   Operation 33 'icmp' 'icmp_ln542' <Predicate = true> <Delay = 1.17> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.00ns) (grouped into LUT with out node or_ln542_1)   --->   "%xor_ln542_2 = xor i1 %icmp_ln542, i1 1" [posit_lib.cpp:542]   --->   Operation 34 'xor' 'xor_ln542_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.00ns) (grouped into LUT with out node or_ln542_1)   --->   "%and_ln542_1 = and i1 %and_ln542, i1 %xor_ln542_2" [posit_lib.cpp:542]   --->   Operation 35 'and' 'and_ln542_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns) (grouped into LUT with out node or_ln542_1)   --->   "%or_ln542 = or i1 %and_ln541_1, i1 %and_ln542_1" [posit_lib.cpp:542]   --->   Operation 36 'or' 'or_ln542' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (0.33ns) (out node of the LUT)   --->   "%or_ln542_1 = or i1 %or_ln542, i1 %icmp_ln541" [posit_lib.cpp:542]   --->   Operation 37 'or' 'or_ln542_1' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.46ns)   --->   "%empty = select i1 %or_ln542_1, i30 %x_mantissa3_read, i30 %y_mantissa3_val_read" [posit_lib.cpp:542]   --->   Operation 38 'select' 'empty' <Predicate = true> <Delay = 0.46> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.46> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%p_cast = zext i30 %empty" [posit_lib.cpp:542]   --->   Operation 39 'zext' 'p_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.42ns)   --->   "%empty_74 = select i1 %or_ln542_1, i7 %sf_x, i7 %sf_y" [posit_lib.cpp:542]   --->   Operation 40 'select' 'empty_74' <Predicate = true> <Delay = 0.42> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 41 [1/1] (0.26ns)   --->   "%empty_75 = select i1 %or_ln542_1, i1 %x_sign_read, i1 %y_sign_val_read" [posit_lib.cpp:542]   --->   Operation 41 'select' 'empty_75' <Predicate = true> <Delay = 0.26> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.26> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.00ns) (grouped into LUT with out node diff)   --->   "%empty_76 = select i1 %or_ln542_1, i7 %sf_y, i7 %sf_x" [posit_lib.cpp:542]   --->   Operation 42 'select' 'empty_76' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 43 [1/1] (0.46ns)   --->   "%mS = select i1 %or_ln542_1, i30 %y_mantissa3_val_read, i30 %x_mantissa3_read" [posit_lib.cpp:542]   --->   Operation 43 'select' 'mS' <Predicate = true> <Delay = 0.46> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.46> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 44 [1/1] (0.89ns) (out node of the LUT)   --->   "%diff = sub i7 %empty_74, i7 %empty_76" [posit_lib.cpp:557]   --->   Operation 44 'sub' 'diff' <Predicate = true> <Delay = 0.89> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.89> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i7.i32, i7 %diff, i32 6" [posit_lib.cpp:558]   --->   Operation 45 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%zext_ln558 = zext i30 %mS" [posit_lib.cpp:558]   --->   Operation 46 'zext' 'zext_ln558' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.89ns)   --->   "%sub_ln558 = sub i7 0, i7 %diff" [posit_lib.cpp:558]   --->   Operation 47 'sub' 'sub_ln558' <Predicate = true> <Delay = 0.89> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.89> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%zext_ln558_1 = zext i7 %sub_ln558" [posit_lib.cpp:558]   --->   Operation 48 'zext' 'zext_ln558_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (1.39ns)   --->   "%shl_ln558 = shl i32 %zext_ln558, i32 %zext_ln558_1" [posit_lib.cpp:558]   --->   Operation 49 'shl' 'shl_ln558' <Predicate = true> <Delay = 1.39> <CoreInst = "Shifter">   --->   Core 75 'Shifter' <Latency = 0> <II = 1> <Delay = 1.39> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%zext_ln558_2 = zext i7 %diff" [posit_lib.cpp:558]   --->   Operation 50 'zext' 'zext_ln558_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (1.39ns)   --->   "%lshr_ln558 = lshr i32 %zext_ln558, i32 %zext_ln558_2" [posit_lib.cpp:558]   --->   Operation 51 'lshr' 'lshr_ln558' <Predicate = true> <Delay = 1.39> <CoreInst = "Shifter">   --->   Core 75 'Shifter' <Latency = 0> <II = 1> <Delay = 1.39> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%trunc_ln558 = trunc i32 %shl_ln558" [posit_lib.cpp:558]   --->   Operation 52 'trunc' 'trunc_ln558' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%trunc_ln558_1 = trunc i32 %lshr_ln558" [posit_lib.cpp:558]   --->   Operation 53 'trunc' 'trunc_ln558_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.49ns)   --->   "%mS_1 = select i1 %tmp, i31 %trunc_ln558, i31 %trunc_ln558_1" [posit_lib.cpp:558]   --->   Operation 54 'select' 'mS_1' <Predicate = true> <Delay = 0.49> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.49> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 55 [1/1] (0.33ns)   --->   "%xor_ln559 = xor i1 %x_sign_read, i1 %y_sign_val_read" [posit_lib.cpp:559]   --->   Operation 55 'xor' 'xor_ln559' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 56 [1/1] (1.19ns)   --->   "%mantissa = sub i31 %p_cast, i31 %mS_1" [posit_lib.cpp:560]   --->   Operation 56 'sub' 'mantissa' <Predicate = true> <Delay = 1.19> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.19> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 57 [1/1] (1.19ns)   --->   "%mantissa_19 = add i31 %mS_1, i31 %p_cast" [posit_lib.cpp:563]   --->   Operation 57 'add' 'mantissa_19' <Predicate = true> <Delay = 1.19> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.19> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%trunc_ln568 = trunc i7 %empty_74" [posit_lib.cpp:568]   --->   Operation 58 'trunc' 'trunc_ln568' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (1.17ns)   --->   "%icmp_ln601 = icmp_eq  i30 %x_mantissa3_read, i30 %y_mantissa3_val_read" [posit_lib.cpp:601]   --->   Operation 59 'icmp' 'icmp_ln601' <Predicate = true> <Delay = 1.17> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 60 [1/1] (0.00ns) (grouped into LUT with out node and_ln601_1)   --->   "%and_ln601 = and i1 %icmp_ln601, i1 %xor_ln559" [posit_lib.cpp:601]   --->   Operation 60 'and' 'and_ln601' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 61 [1/1] (0.33ns) (out node of the LUT)   --->   "%and_ln601_1 = and i1 %and_ln601, i1 %and_ln542" [posit_lib.cpp:601]   --->   Operation 61 'and' 'and_ln601_1' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 62 [1/1] (0.00ns) (grouped into LUT with out node exponent)   --->   "%and_ln611 = and i1 %y_isZero_val_read, i1 %x_exponent2_read" [posit_lib.cpp:611]   --->   Operation 62 'and' 'and_ln611' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 63 [1/1] (0.26ns)   --->   "%select_ln611_2 = select i1 %y_isZero_val_read, i1 %x_sign_read, i1 %empty_75" [posit_lib.cpp:611]   --->   Operation 63 'select' 'select_ln611_2' <Predicate = true> <Delay = 0.26> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.26> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 64 [1/1] (0.00ns) (grouped into LUT with out node isZero)   --->   "%and_ln601_2 = and i1 %y_isZero_val_read, i1 %x_isZero_read" [posit_lib.cpp:601]   --->   Operation 64 'and' 'and_ln601_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 65 [1/1] (0.33ns) (out node of the LUT)   --->   "%isZero = or i1 %and_ln601_2, i1 %and_ln601_1" [posit_lib.cpp:601]   --->   Operation 65 'or' 'isZero' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 66 [1/1] (0.00ns) (grouped into LUT with out node and_ln605)   --->   "%or_ln605 = or i1 %and_ln601_1, i1 %y_isZero_val_read" [posit_lib.cpp:605]   --->   Operation 66 'or' 'or_ln605' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 67 [1/1] (0.00ns) (grouped into LUT with out node and_ln605)   --->   "%xor_ln605 = xor i1 %or_ln605, i1 1" [posit_lib.cpp:605]   --->   Operation 67 'xor' 'xor_ln605' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 68 [1/1] (0.33ns) (out node of the LUT)   --->   "%and_ln605 = and i1 %x_isZero_read, i1 %xor_ln605" [posit_lib.cpp:605]   --->   Operation 68 'and' 'and_ln605' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 69 [1/1] (0.00ns)   --->   "%sel_tmp1 = bitconcatenate i2 @_ssdm_op_BitConcatenate.i2.i1.i1, i1 %isZero, i1 %and_ln605" [posit_lib.cpp:601]   --->   Operation 69 'bitconcatenate' 'sel_tmp1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 70 [1/1] (0.48ns) (out node of the LUT)   --->   "%exponent = sparsemux i1 @_ssdm_op_SparseMux.ap_auto.3i1.i1.i2, i2 2, i1 0, i2 1, i1 %y_exponent2_val_read, i2 0, i1 %and_ln611, i1 0, i2 %sel_tmp1" [posit_lib.cpp:523]   --->   Operation 70 'sparsemux' 'exponent' <Predicate = true> <Delay = 0.48> <CoreInst = "OneHotSparseMux_HasDef">   --->   Core 152 'OneHotSparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 71 [1/1] (0.48ns)   --->   "%sign = sparsemux i1 @_ssdm_op_SparseMux.ap_auto.3i1.i1.i2, i2 2, i1 %empty_75, i2 1, i1 %y_sign_val_read, i2 0, i1 %select_ln611_2, i1 0, i2 %sel_tmp1" [posit_lib.cpp:542]   --->   Operation 71 'sparsemux' 'sign' <Predicate = true> <Delay = 0.48> <CoreInst = "OneHotSparseMux_HasDef">   --->   Core 152 'OneHotSparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>

State 2 <SV = 1> <Delay = 7.14>
ST_2 : Operation 72 [1/1] (0.49ns)   --->   "%mantissa_23 = select i1 %xor_ln559, i31 %mantissa, i31 %mantissa_19" [posit_lib.cpp:559]   --->   Operation 72 'select' 'mantissa_23' <Predicate = true> <Delay = 0.49> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.49> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%flag = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 30" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 73 'bitselect' 'flag' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.33ns)   --->   "%count = xor i1 %flag, i1 1" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 74 'xor' 'count' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%zext_ln97 = zext i1 %count" [posit_lib.cpp:97->posit_lib.cpp:566]   --->   Operation 75 'zext' 'zext_ln97' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%tmp_16 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 29" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 76 'bitselect' 'tmp_16' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.00ns) (grouped into LUT with out node count_2)   --->   "%count_1 = select i1 %flag, i2 %zext_ln97, i2 2" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 77 'select' 'count_1' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.26> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 78 [1/1] (0.26ns) (out node of the LUT)   --->   "%count_2 = select i1 %tmp_16, i2 %zext_ln97, i2 %count_1" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 78 'select' 'count_2' <Predicate = true> <Delay = 0.26> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.26> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 79 [1/1] (0.33ns)   --->   "%flag_1 = or i1 %flag, i1 %tmp_16" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 79 'or' 'flag_1' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 80 [1/1] (0.00ns)   --->   "%tmp_17 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 28" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 80 'bitselect' 'tmp_17' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 81 [1/1] (0.62ns)   --->   "%add_ln101 = add i2 %count_2, i2 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 81 'add' 'add_ln101' <Predicate = true> <Delay = 0.62> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 82 [1/1] (0.00ns) (grouped into LUT with out node count_4)   --->   "%count_3 = select i1 %flag_1, i2 %count_2, i2 %add_ln101" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 82 'select' 'count_3' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.26> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 83 [1/1] (0.26ns) (out node of the LUT)   --->   "%count_4 = select i1 %tmp_17, i2 %count_2, i2 %count_3" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 83 'select' 'count_4' <Predicate = true> <Delay = 0.26> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.26> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 84 [1/1] (0.00ns)   --->   "%zext_ln98 = zext i2 %count_4" [posit_lib.cpp:98->posit_lib.cpp:566]   --->   Operation 84 'zext' 'zext_ln98' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 85 [1/1] (0.33ns)   --->   "%flag_2 = or i1 %tmp_17, i1 %flag_1" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 85 'or' 'flag_2' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 86 [1/1] (0.00ns)   --->   "%tmp_18 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 27" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 86 'bitselect' 'tmp_18' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 87 [1/1] (0.62ns)   --->   "%add_ln101_1 = add i3 %zext_ln98, i3 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 87 'add' 'add_ln101_1' <Predicate = true> <Delay = 0.62> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node count_6)   --->   "%count_5 = select i1 %flag_2, i3 %zext_ln98, i3 %add_ln101_1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 88 'select' 'count_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 89 [1/1] (0.27ns) (out node of the LUT)   --->   "%count_6 = select i1 %tmp_18, i3 %zext_ln98, i3 %count_5" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 89 'select' 'count_6' <Predicate = true> <Delay = 0.27> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 90 [1/1] (0.33ns)   --->   "%flag_3 = or i1 %tmp_18, i1 %flag_2" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 90 'or' 'flag_3' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 91 [1/1] (0.00ns)   --->   "%tmp_19 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 26" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 91 'bitselect' 'tmp_19' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 92 [1/1] (0.74ns)   --->   "%add_ln101_2 = add i3 %count_6, i3 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 92 'add' 'add_ln101_2' <Predicate = true> <Delay = 0.74> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.74> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 93 [1/1] (0.00ns) (grouped into LUT with out node count_8)   --->   "%count_7 = select i1 %flag_3, i3 %count_6, i3 %add_ln101_2" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 93 'select' 'count_7' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 94 [1/1] (0.27ns) (out node of the LUT)   --->   "%count_8 = select i1 %tmp_19, i3 %count_6, i3 %count_7" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 94 'select' 'count_8' <Predicate = true> <Delay = 0.27> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 95 [1/1] (0.33ns)   --->   "%flag_4 = or i1 %tmp_19, i1 %flag_3" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 95 'or' 'flag_4' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 96 [1/1] (0.00ns)   --->   "%tmp_20 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 25" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 96 'bitselect' 'tmp_20' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 97 [1/1] (0.74ns)   --->   "%add_ln101_3 = add i3 %count_8, i3 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 97 'add' 'add_ln101_3' <Predicate = true> <Delay = 0.74> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.74> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 98 [1/1] (0.00ns) (grouped into LUT with out node count_10)   --->   "%count_9 = select i1 %flag_4, i3 %count_8, i3 %add_ln101_3" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 98 'select' 'count_9' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 99 [1/1] (0.27ns) (out node of the LUT)   --->   "%count_10 = select i1 %tmp_20, i3 %count_8, i3 %count_9" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 99 'select' 'count_10' <Predicate = true> <Delay = 0.27> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 100 [1/1] (0.33ns)   --->   "%flag_5 = or i1 %tmp_20, i1 %flag_4" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 100 'or' 'flag_5' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 101 [1/1] (0.00ns)   --->   "%tmp_21 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 24" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 101 'bitselect' 'tmp_21' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 102 [1/1] (0.74ns)   --->   "%add_ln101_4 = add i3 %count_10, i3 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 102 'add' 'add_ln101_4' <Predicate = true> <Delay = 0.74> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.74> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 103 [1/1] (0.00ns) (grouped into LUT with out node count_12)   --->   "%count_11 = select i1 %flag_5, i3 %count_10, i3 %add_ln101_4" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 103 'select' 'count_11' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 104 [1/1] (0.27ns) (out node of the LUT)   --->   "%count_12 = select i1 %tmp_21, i3 %count_10, i3 %count_11" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 104 'select' 'count_12' <Predicate = true> <Delay = 0.27> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 105 [1/1] (0.00ns)   --->   "%zext_ln98_1 = zext i3 %count_12" [posit_lib.cpp:98->posit_lib.cpp:566]   --->   Operation 105 'zext' 'zext_ln98_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 106 [1/1] (0.33ns)   --->   "%flag_6 = or i1 %tmp_21, i1 %flag_5" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 106 'or' 'flag_6' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 107 [1/1] (0.00ns)   --->   "%tmp_22 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 23" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 107 'bitselect' 'tmp_22' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 108 [1/1] (0.74ns)   --->   "%add_ln101_5 = add i4 %zext_ln98_1, i4 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 108 'add' 'add_ln101_5' <Predicate = true> <Delay = 0.74> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.74> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node count_14)   --->   "%count_13 = select i1 %flag_6, i4 %zext_ln98_1, i4 %add_ln101_5" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 109 'select' 'count_13' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 110 [1/1] (0.45ns) (out node of the LUT)   --->   "%count_14 = select i1 %tmp_22, i4 %zext_ln98_1, i4 %count_13" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 110 'select' 'count_14' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 111 [1/1] (0.33ns)   --->   "%flag_7 = or i1 %tmp_22, i1 %flag_6" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 111 'or' 'flag_7' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 112 [1/1] (0.00ns)   --->   "%tmp_23 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 22" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 112 'bitselect' 'tmp_23' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 113 [1/1] (0.00ns)   --->   "%tmp_24 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 21" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 113 'bitselect' 'tmp_24' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 114 [1/1] (0.00ns)   --->   "%tmp_25 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 20" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 114 'bitselect' 'tmp_25' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 115 [1/1] (0.00ns)   --->   "%tmp_26 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 19" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 115 'bitselect' 'tmp_26' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 116 [1/1] (0.00ns)   --->   "%tmp_27 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 18" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 116 'bitselect' 'tmp_27' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 117 [1/1] (0.00ns)   --->   "%tmp_28 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 17" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 117 'bitselect' 'tmp_28' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 118 [1/1] (0.00ns)   --->   "%tmp_29 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 16" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 118 'bitselect' 'tmp_29' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 119 [1/1] (0.00ns)   --->   "%tmp_30 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 15" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 119 'bitselect' 'tmp_30' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 120 [1/1] (0.00ns)   --->   "%tmp_31 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 14" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 120 'bitselect' 'tmp_31' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 121 [1/1] (0.00ns)   --->   "%tmp_32 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 13" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 121 'bitselect' 'tmp_32' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 122 [1/1] (0.00ns)   --->   "%tmp_33 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 12" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 122 'bitselect' 'tmp_33' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 123 [1/1] (0.00ns)   --->   "%tmp_34 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 11" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 123 'bitselect' 'tmp_34' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 124 [1/1] (0.00ns)   --->   "%tmp_35 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 10" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 124 'bitselect' 'tmp_35' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 125 [1/1] (0.00ns)   --->   "%tmp_36 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 9" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 125 'bitselect' 'tmp_36' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 126 [1/1] (0.00ns)   --->   "%tmp_37 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 8" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 126 'bitselect' 'tmp_37' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 127 [1/1] (0.00ns)   --->   "%tmp_38 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 7" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 127 'bitselect' 'tmp_38' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 128 [1/1] (0.00ns)   --->   "%tmp_39 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 6" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 128 'bitselect' 'tmp_39' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 129 [1/1] (0.00ns)   --->   "%tmp_40 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 5" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 129 'bitselect' 'tmp_40' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 130 [1/1] (0.00ns)   --->   "%tmp_41 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 4" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 130 'bitselect' 'tmp_41' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 131 [1/1] (0.00ns)   --->   "%tmp_42 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 3" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 131 'bitselect' 'tmp_42' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 132 [1/1] (0.00ns)   --->   "%tmp_43 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 2" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 132 'bitselect' 'tmp_43' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 133 [1/1] (0.00ns)   --->   "%tmp_44 = bitselect i1 @_ssdm_op_BitSelect.i1.i31.i32, i31 %mantissa_23, i32 1" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 133 'bitselect' 'tmp_44' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 6.59>
ST_3 : Operation 134 [1/1] (0.86ns)   --->   "%add_ln101_6 = add i4 %count_14, i4 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 134 'add' 'add_ln101_6' <Predicate = (!flag_7 & !tmp_23)> <Delay = 0.86> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 135 [1/1] (0.00ns) (grouped into LUT with out node count_16)   --->   "%count_15 = select i1 %flag_7, i4 %count_14, i4 %add_ln101_6" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 135 'select' 'count_15' <Predicate = (!tmp_23)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 136 [1/1] (0.45ns) (out node of the LUT)   --->   "%count_16 = select i1 %tmp_23, i4 %count_14, i4 %count_15" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 136 'select' 'count_16' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 137 [1/1] (0.33ns)   --->   "%flag_8 = or i1 %tmp_23, i1 %flag_7" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 137 'or' 'flag_8' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 138 [1/1] (0.86ns)   --->   "%add_ln101_7 = add i4 %count_16, i4 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 138 'add' 'add_ln101_7' <Predicate = (!tmp_24)> <Delay = 0.86> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 139 [1/1] (0.00ns) (grouped into LUT with out node count_18)   --->   "%count_17 = select i1 %flag_8, i4 %count_16, i4 %add_ln101_7" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 139 'select' 'count_17' <Predicate = (!tmp_24)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 140 [1/1] (0.45ns) (out node of the LUT)   --->   "%count_18 = select i1 %tmp_24, i4 %count_16, i4 %count_17" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 140 'select' 'count_18' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 141 [1/1] (0.33ns)   --->   "%flag_9 = or i1 %tmp_24, i1 %flag_8" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 141 'or' 'flag_9' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 142 [1/1] (0.86ns)   --->   "%add_ln101_8 = add i4 %count_18, i4 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 142 'add' 'add_ln101_8' <Predicate = (!tmp_25)> <Delay = 0.86> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 143 [1/1] (0.00ns) (grouped into LUT with out node count_20)   --->   "%count_19 = select i1 %flag_9, i4 %count_18, i4 %add_ln101_8" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 143 'select' 'count_19' <Predicate = (!tmp_25)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 144 [1/1] (0.45ns) (out node of the LUT)   --->   "%count_20 = select i1 %tmp_25, i4 %count_18, i4 %count_19" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 144 'select' 'count_20' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 145 [1/1] (0.33ns)   --->   "%flag_10 = or i1 %tmp_25, i1 %flag_9" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 145 'or' 'flag_10' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 146 [1/1] (0.86ns)   --->   "%add_ln101_9 = add i4 %count_20, i4 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 146 'add' 'add_ln101_9' <Predicate = (!tmp_26)> <Delay = 0.86> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 147 [1/1] (0.00ns) (grouped into LUT with out node count_22)   --->   "%count_21 = select i1 %flag_10, i4 %count_20, i4 %add_ln101_9" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 147 'select' 'count_21' <Predicate = (!tmp_26)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 148 [1/1] (0.45ns) (out node of the LUT)   --->   "%count_22 = select i1 %tmp_26, i4 %count_20, i4 %count_21" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 148 'select' 'count_22' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 149 [1/1] (0.33ns)   --->   "%flag_11 = or i1 %tmp_26, i1 %flag_10" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 149 'or' 'flag_11' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 150 [1/1] (0.86ns)   --->   "%add_ln101_10 = add i4 %count_22, i4 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 150 'add' 'add_ln101_10' <Predicate = (!tmp_27)> <Delay = 0.86> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 151 [1/1] (0.00ns) (grouped into LUT with out node count_24)   --->   "%count_23 = select i1 %flag_11, i4 %count_22, i4 %add_ln101_10" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 151 'select' 'count_23' <Predicate = (!tmp_27)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 152 [1/1] (0.45ns) (out node of the LUT)   --->   "%count_24 = select i1 %tmp_27, i4 %count_22, i4 %count_23" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 152 'select' 'count_24' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 153 [1/1] (0.33ns)   --->   "%flag_12 = or i1 %tmp_27, i1 %flag_11" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 153 'or' 'flag_12' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 3> <Delay = 6.69>
ST_4 : Operation 154 [1/1] (0.86ns)   --->   "%add_ln101_11 = add i4 %count_24, i4 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 154 'add' 'add_ln101_11' <Predicate = (!flag_12 & !tmp_28)> <Delay = 0.86> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 155 [1/1] (0.00ns) (grouped into LUT with out node count_26)   --->   "%count_25 = select i1 %flag_12, i4 %count_24, i4 %add_ln101_11" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 155 'select' 'count_25' <Predicate = (!tmp_28)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 156 [1/1] (0.45ns) (out node of the LUT)   --->   "%count_26 = select i1 %tmp_28, i4 %count_24, i4 %count_25" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 156 'select' 'count_26' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 157 [1/1] (0.33ns)   --->   "%flag_13 = or i1 %tmp_28, i1 %flag_12" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 157 'or' 'flag_13' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 158 [1/1] (0.86ns)   --->   "%add_ln101_12 = add i4 %count_26, i4 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 158 'add' 'add_ln101_12' <Predicate = (!tmp_29)> <Delay = 0.86> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 159 [1/1] (0.00ns) (grouped into LUT with out node count_28)   --->   "%count_27 = select i1 %flag_13, i4 %count_26, i4 %add_ln101_12" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 159 'select' 'count_27' <Predicate = (!tmp_29)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 160 [1/1] (0.45ns) (out node of the LUT)   --->   "%count_28 = select i1 %tmp_29, i4 %count_26, i4 %count_27" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 160 'select' 'count_28' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 161 [1/1] (0.00ns)   --->   "%zext_ln98_2 = zext i4 %count_28" [posit_lib.cpp:98->posit_lib.cpp:566]   --->   Operation 161 'zext' 'zext_ln98_2' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 162 [1/1] (0.33ns)   --->   "%flag_14 = or i1 %tmp_29, i1 %flag_13" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 162 'or' 'flag_14' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 163 [1/1] (0.86ns)   --->   "%add_ln101_13 = add i5 %zext_ln98_2, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 163 'add' 'add_ln101_13' <Predicate = (!tmp_30)> <Delay = 0.86> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 164 [1/1] (0.00ns) (grouped into LUT with out node count_30)   --->   "%count_29 = select i1 %flag_14, i5 %zext_ln98_2, i5 %add_ln101_13" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 164 'select' 'count_29' <Predicate = (!tmp_30)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 165 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_30 = select i1 %tmp_30, i5 %zext_ln98_2, i5 %count_29" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 165 'select' 'count_30' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 166 [1/1] (0.33ns)   --->   "%flag_15 = or i1 %tmp_30, i1 %flag_14" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 166 'or' 'flag_15' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 167 [1/1] (0.87ns)   --->   "%add_ln101_14 = add i5 %count_30, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 167 'add' 'add_ln101_14' <Predicate = (!tmp_31)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 168 [1/1] (0.00ns) (grouped into LUT with out node count_32)   --->   "%count_31 = select i1 %flag_15, i5 %count_30, i5 %add_ln101_14" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 168 'select' 'count_31' <Predicate = (!tmp_31)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 169 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_32 = select i1 %tmp_31, i5 %count_30, i5 %count_31" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 169 'select' 'count_32' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 170 [1/1] (0.33ns)   --->   "%flag_16 = or i1 %tmp_31, i1 %flag_15" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 170 'or' 'flag_16' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 171 [1/1] (0.87ns)   --->   "%add_ln101_15 = add i5 %count_32, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 171 'add' 'add_ln101_15' <Predicate = (!tmp_32)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 172 [1/1] (0.00ns) (grouped into LUT with out node count_34)   --->   "%count_33 = select i1 %flag_16, i5 %count_32, i5 %add_ln101_15" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 172 'select' 'count_33' <Predicate = (!tmp_32)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 173 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_34 = select i1 %tmp_32, i5 %count_32, i5 %count_33" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 173 'select' 'count_34' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 174 [1/1] (0.33ns)   --->   "%flag_17 = or i1 %tmp_32, i1 %flag_16" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 174 'or' 'flag_17' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 6.78>
ST_5 : Operation 175 [1/1] (0.87ns)   --->   "%add_ln101_16 = add i5 %count_34, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 175 'add' 'add_ln101_16' <Predicate = (!flag_17 & !tmp_33)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 176 [1/1] (0.00ns) (grouped into LUT with out node count_36)   --->   "%count_35 = select i1 %flag_17, i5 %count_34, i5 %add_ln101_16" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 176 'select' 'count_35' <Predicate = (!tmp_33)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 177 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_36 = select i1 %tmp_33, i5 %count_34, i5 %count_35" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 177 'select' 'count_36' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 178 [1/1] (0.33ns)   --->   "%flag_18 = or i1 %tmp_33, i1 %flag_17" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 178 'or' 'flag_18' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 179 [1/1] (0.87ns)   --->   "%add_ln101_17 = add i5 %count_36, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 179 'add' 'add_ln101_17' <Predicate = (!tmp_34)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 180 [1/1] (0.00ns) (grouped into LUT with out node count_38)   --->   "%count_37 = select i1 %flag_18, i5 %count_36, i5 %add_ln101_17" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 180 'select' 'count_37' <Predicate = (!tmp_34)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 181 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_38 = select i1 %tmp_34, i5 %count_36, i5 %count_37" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 181 'select' 'count_38' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 182 [1/1] (0.33ns)   --->   "%flag_19 = or i1 %tmp_34, i1 %flag_18" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 182 'or' 'flag_19' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 183 [1/1] (0.87ns)   --->   "%add_ln101_18 = add i5 %count_38, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 183 'add' 'add_ln101_18' <Predicate = (!tmp_35)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 184 [1/1] (0.00ns) (grouped into LUT with out node count_40)   --->   "%count_39 = select i1 %flag_19, i5 %count_38, i5 %add_ln101_18" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 184 'select' 'count_39' <Predicate = (!tmp_35)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 185 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_40 = select i1 %tmp_35, i5 %count_38, i5 %count_39" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 185 'select' 'count_40' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 186 [1/1] (0.33ns)   --->   "%flag_20 = or i1 %tmp_35, i1 %flag_19" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 186 'or' 'flag_20' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 187 [1/1] (0.87ns)   --->   "%add_ln101_19 = add i5 %count_40, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 187 'add' 'add_ln101_19' <Predicate = (!tmp_36)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 188 [1/1] (0.00ns) (grouped into LUT with out node count_42)   --->   "%count_41 = select i1 %flag_20, i5 %count_40, i5 %add_ln101_19" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 188 'select' 'count_41' <Predicate = (!tmp_36)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 189 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_42 = select i1 %tmp_36, i5 %count_40, i5 %count_41" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 189 'select' 'count_42' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 190 [1/1] (0.33ns)   --->   "%flag_21 = or i1 %tmp_36, i1 %flag_20" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 190 'or' 'flag_21' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 191 [1/1] (0.87ns)   --->   "%add_ln101_20 = add i5 %count_42, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 191 'add' 'add_ln101_20' <Predicate = (!tmp_37)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 192 [1/1] (0.00ns) (grouped into LUT with out node count_44)   --->   "%count_43 = select i1 %flag_21, i5 %count_42, i5 %add_ln101_20" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 192 'select' 'count_43' <Predicate = (!tmp_37)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 193 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_44 = select i1 %tmp_37, i5 %count_42, i5 %count_43" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 193 'select' 'count_44' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 194 [1/1] (0.33ns)   --->   "%flag_22 = or i1 %tmp_37, i1 %flag_21" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 194 'or' 'flag_22' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 5> <Delay = 6.78>
ST_6 : Operation 195 [1/1] (0.87ns)   --->   "%add_ln101_21 = add i5 %count_44, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 195 'add' 'add_ln101_21' <Predicate = (!flag_22 & !tmp_38)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 196 [1/1] (0.00ns) (grouped into LUT with out node count_46)   --->   "%count_45 = select i1 %flag_22, i5 %count_44, i5 %add_ln101_21" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 196 'select' 'count_45' <Predicate = (!tmp_38)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 197 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_46 = select i1 %tmp_38, i5 %count_44, i5 %count_45" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 197 'select' 'count_46' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 198 [1/1] (0.33ns)   --->   "%flag_23 = or i1 %tmp_38, i1 %flag_22" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 198 'or' 'flag_23' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 199 [1/1] (0.87ns)   --->   "%add_ln101_22 = add i5 %count_46, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 199 'add' 'add_ln101_22' <Predicate = (!tmp_39)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 200 [1/1] (0.00ns) (grouped into LUT with out node count_48)   --->   "%count_47 = select i1 %flag_23, i5 %count_46, i5 %add_ln101_22" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 200 'select' 'count_47' <Predicate = (!tmp_39)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 201 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_48 = select i1 %tmp_39, i5 %count_46, i5 %count_47" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 201 'select' 'count_48' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 202 [1/1] (0.33ns)   --->   "%flag_24 = or i1 %tmp_39, i1 %flag_23" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 202 'or' 'flag_24' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 203 [1/1] (0.87ns)   --->   "%add_ln101_23 = add i5 %count_48, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 203 'add' 'add_ln101_23' <Predicate = (!tmp_40)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 204 [1/1] (0.00ns) (grouped into LUT with out node count_50)   --->   "%count_49 = select i1 %flag_24, i5 %count_48, i5 %add_ln101_23" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 204 'select' 'count_49' <Predicate = (!tmp_40)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 205 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_50 = select i1 %tmp_40, i5 %count_48, i5 %count_49" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 205 'select' 'count_50' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 206 [1/1] (0.33ns)   --->   "%flag_25 = or i1 %tmp_40, i1 %flag_24" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 206 'or' 'flag_25' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 207 [1/1] (0.87ns)   --->   "%add_ln101_24 = add i5 %count_50, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 207 'add' 'add_ln101_24' <Predicate = (!tmp_41)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 208 [1/1] (0.00ns) (grouped into LUT with out node count_52)   --->   "%count_51 = select i1 %flag_25, i5 %count_50, i5 %add_ln101_24" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 208 'select' 'count_51' <Predicate = (!tmp_41)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 209 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_52 = select i1 %tmp_41, i5 %count_50, i5 %count_51" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 209 'select' 'count_52' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 210 [1/1] (0.33ns)   --->   "%flag_26 = or i1 %tmp_41, i1 %flag_25" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 210 'or' 'flag_26' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 211 [1/1] (0.87ns)   --->   "%add_ln101_25 = add i5 %count_52, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 211 'add' 'add_ln101_25' <Predicate = (!tmp_42)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 212 [1/1] (0.00ns) (grouped into LUT with out node count_54)   --->   "%count_53 = select i1 %flag_26, i5 %count_52, i5 %add_ln101_25" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 212 'select' 'count_53' <Predicate = (!tmp_42)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 213 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_54 = select i1 %tmp_42, i5 %count_52, i5 %count_53" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 213 'select' 'count_54' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 214 [1/1] (0.33ns)   --->   "%flag_27 = or i1 %tmp_42, i1 %flag_26" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 214 'or' 'flag_27' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 6> <Delay = 6.84>
ST_7 : Operation 215 [1/1] (0.87ns)   --->   "%add_ln101_26 = add i5 %count_54, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 215 'add' 'add_ln101_26' <Predicate = (!flag_27 & !tmp_43)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 216 [1/1] (0.00ns) (grouped into LUT with out node count_56)   --->   "%count_55 = select i1 %flag_27, i5 %count_54, i5 %add_ln101_26" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 216 'select' 'count_55' <Predicate = (!tmp_43)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 217 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_56 = select i1 %tmp_43, i5 %count_54, i5 %count_55" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 217 'select' 'count_56' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 218 [1/1] (0.33ns)   --->   "%flag_28 = or i1 %tmp_43, i1 %flag_27" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 218 'or' 'flag_28' <Predicate = true> <Delay = 0.33> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 219 [1/1] (0.87ns)   --->   "%add_ln101_27 = add i5 %count_56, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 219 'add' 'add_ln101_27' <Predicate = (!tmp_44)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 220 [1/1] (0.00ns) (grouped into LUT with out node count_58)   --->   "%count_57 = select i1 %flag_28, i5 %count_56, i5 %add_ln101_27" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 220 'select' 'count_57' <Predicate = (!tmp_44)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 221 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_58 = select i1 %tmp_44, i5 %count_56, i5 %count_57" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 221 'select' 'count_58' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 222 [1/1] (0.00ns) (grouped into LUT with out node count_60)   --->   "%flag_29 = or i1 %tmp_44, i1 %flag_28" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 222 'or' 'flag_29' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.33> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 223 [1/1] (0.00ns) (grouped into LUT with out node count_60)   --->   "%trunc_ln100 = trunc i31 %mantissa_23" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 223 'trunc' 'trunc_ln100' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 224 [1/1] (0.87ns)   --->   "%add_ln101_28 = add i5 %count_58, i5 1" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 224 'add' 'add_ln101_28' <Predicate = true> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 225 [1/1] (0.00ns) (grouped into LUT with out node count_60)   --->   "%count_59 = select i1 %flag_29, i5 %count_58, i5 %add_ln101_28" [posit_lib.cpp:101->posit_lib.cpp:566]   --->   Operation 225 'select' 'count_59' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 226 [1/1] (0.48ns) (out node of the LUT)   --->   "%count_60 = select i1 %trunc_ln100, i5 %count_58, i5 %count_59" [posit_lib.cpp:100->posit_lib.cpp:566]   --->   Operation 226 'select' 'count_60' <Predicate = true> <Delay = 0.48> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 227 [1/1] (0.00ns)   --->   "%zext_ln98_3 = zext i5 %count_60" [posit_lib.cpp:98->posit_lib.cpp:566]   --->   Operation 227 'zext' 'zext_ln98_3' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 228 [1/1] (0.87ns)   --->   "%SA = add i6 %zext_ln98_3, i6 63" [posit_lib.cpp:568]   --->   Operation 228 'add' 'SA' <Predicate = true> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 229 [1/1] (0.00ns)   --->   "%sext_ln529 = sext i6 %SA" [posit_lib.cpp:529]   --->   Operation 229 'sext' 'sext_ln529' <Predicate = (!y_isZero_val_read)> <Delay = 0.00>
ST_7 : Operation 230 [1/1] (0.87ns)   --->   "%icmp_ln567 = icmp_ne  i5 %count_60, i5 0" [posit_lib.cpp:567]   --->   Operation 230 'icmp' 'icmp_ln567' <Predicate = (!y_isZero_val_read)> <Delay = 0.87> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 231 [1/1] (0.00ns)   --->   "%zext_ln567 = zext i31 %mantissa_23" [posit_lib.cpp:567]   --->   Operation 231 'zext' 'zext_ln567' <Predicate = (!y_isZero_val_read)> <Delay = 0.00>
ST_7 : Operation 232 [1/1] (1.42ns)   --->   "%shl_ln567 = shl i32 %zext_ln567, i32 %sext_ln529" [posit_lib.cpp:567]   --->   Operation 232 'shl' 'shl_ln567' <Predicate = (!y_isZero_val_read)> <Delay = 1.42> <CoreInst = "Shifter">   --->   Core 75 'Shifter' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 233 [1/1] (0.87ns)   --->   "%sub_ln567 = sub i6 1, i6 %zext_ln98_3" [posit_lib.cpp:567]   --->   Operation 233 'sub' 'sub_ln567' <Predicate = (!y_isZero_val_read)> <Delay = 0.87> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.87> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 234 [1/1] (0.00ns)   --->   "%sext_ln567 = sext i6 %sub_ln567" [posit_lib.cpp:567]   --->   Operation 234 'sext' 'sext_ln567' <Predicate = (!y_isZero_val_read)> <Delay = 0.00>
ST_7 : Operation 235 [1/1] (1.42ns)   --->   "%lshr_ln567 = lshr i32 %zext_ln567, i32 %sext_ln567" [posit_lib.cpp:567]   --->   Operation 235 'lshr' 'lshr_ln567' <Predicate = (!y_isZero_val_read)> <Delay = 1.42> <CoreInst = "Shifter">   --->   Core 75 'Shifter' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 236 [1/1] (0.00ns) (grouped into LUT with out node select_ln611)   --->   "%trunc_ln594 = trunc i32 %shl_ln567" [posit_lib.cpp:594]   --->   Operation 236 'trunc' 'trunc_ln594' <Predicate = (!y_isZero_val_read)> <Delay = 0.00>
ST_7 : Operation 237 [1/1] (0.00ns) (grouped into LUT with out node select_ln611)   --->   "%trunc_ln594_1 = trunc i32 %lshr_ln567" [posit_lib.cpp:594]   --->   Operation 237 'trunc' 'trunc_ln594_1' <Predicate = (!y_isZero_val_read)> <Delay = 0.00>
ST_7 : Operation 238 [1/1] (0.00ns) (grouped into LUT with out node select_ln611)   --->   "%mantissa_21 = select i1 %icmp_ln567, i30 %trunc_ln594, i30 %trunc_ln594_1" [posit_lib.cpp:594]   --->   Operation 238 'select' 'mantissa_21' <Predicate = (!y_isZero_val_read)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.46> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 239 [1/1] (0.88ns)   --->   "%regime = sub i6 %trunc_ln568, i6 %SA" [posit_lib.cpp:586]   --->   Operation 239 'sub' 'regime' <Predicate = (!y_isZero_val_read)> <Delay = 0.88> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.88> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 240 [1/1] (0.46ns) (out node of the LUT)   --->   "%select_ln611 = select i1 %y_isZero_val_read, i30 %x_mantissa3_read, i30 %mantissa_21" [posit_lib.cpp:611]   --->   Operation 240 'select' 'select_ln611' <Predicate = true> <Delay = 0.46> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.46> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 241 [1/1] (0.00ns) (grouped into LUT with out node regime_13)   --->   "%select_ln611_1 = select i1 %y_isZero_val_read, i6 %x_regime1_read, i6 %regime" [posit_lib.cpp:611]   --->   Operation 241 'select' 'select_ln611_1' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 242 [1/1] (0.00ns)   --->   "%sel_tmp = bitconcatenate i3 @_ssdm_op_BitConcatenate.i3.i1.i1.i1, i1 %isZero, i1 %and_ln605, i1 0" [posit_lib.cpp:601]   --->   Operation 242 'bitconcatenate' 'sel_tmp' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 243 [1/1] (0.54ns) (out node of the LUT)   --->   "%regime_13 = sparsemux i6 @_ssdm_op_SparseMux.ap_auto.3i6.i6.i3, i3 4, i6 0, i3 2, i6 %y_regime1_val_read, i3 0, i6 %select_ln611_1, i6 0, i3 %sel_tmp" [posit_lib.cpp:523]   --->   Operation 243 'sparsemux' 'regime_13' <Predicate = true> <Delay = 0.54> <CoreInst = "BinarySparseMux_DontCare">   --->   Core 149 'BinarySparseMux_DontCare' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>

State 8 <SV = 7> <Delay = 0.54>
ST_8 : Operation 244 [1/1] (0.54ns) (out node of the LUT)   --->   "%mantissa_24 = sparsemux i30 @_ssdm_op_SparseMux.ap_auto.3i30.i30.i3, i3 4, i30 0, i3 2, i30 %y_mantissa3_val_read, i3 0, i30 %select_ln611, i30 0, i3 %sel_tmp" [posit_lib.cpp:619]   --->   Operation 244 'sparsemux' 'mantissa_24' <Predicate = true> <Delay = 0.54> <CoreInst = "BinarySparseMux_DontCare">   --->   Core 149 'BinarySparseMux_DontCare' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 245 [1/1] (0.00ns)   --->   "%newret = insertvalue i39 <undef>, i1 %sign" [posit_lib.cpp:542]   --->   Operation 245 'insertvalue' 'newret' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 246 [1/1] (0.00ns)   --->   "%newret2 = insertvalue i39 %newret, i1 %isZero" [posit_lib.cpp:542]   --->   Operation 246 'insertvalue' 'newret2' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 247 [1/1] (0.00ns)   --->   "%newret4 = insertvalue i39 %newret2, i6 %regime_13" [posit_lib.cpp:542]   --->   Operation 247 'insertvalue' 'newret4' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 248 [1/1] (0.00ns)   --->   "%newret6 = insertvalue i39 %newret4, i1 %exponent" [posit_lib.cpp:542]   --->   Operation 248 'insertvalue' 'newret6' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 249 [1/1] (0.00ns)   --->   "%newret8 = insertvalue i39 %newret6, i30 %mantissa_24" [posit_lib.cpp:542]   --->   Operation 249 'insertvalue' 'newret8' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 250 [1/1] (0.00ns)   --->   "%ret_ln542 = ret i39 %newret8" [posit_lib.cpp:542]   --->   Operation 250 'ret' 'ret_ln542' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 6.850ns
The critical path consists of the following:
	wire read operation ('y_regime1_val_read', posit_lib.cpp:523) on port 'y_regime1_val' (posit_lib.cpp:523) [13]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln541_1', posit_lib.cpp:541) [28]  (0.887 ns)
	'and' operation 1 bit ('and_ln542', posit_lib.cpp:542) [34]  (0.331 ns)
	'and' operation 1 bit ('and_ln542_1', posit_lib.cpp:542) [37]  (0.000 ns)
	'or' operation 1 bit ('or_ln542', posit_lib.cpp:542) [38]  (0.000 ns)
	'or' operation 1 bit ('or_ln542_1', posit_lib.cpp:542) [39]  (0.331 ns)
	'select' operation 7 bit ('empty_74', posit_lib.cpp:542) [42]  (0.420 ns)
	'sub' operation 7 bit ('diff', posit_lib.cpp:557) [46]  (0.897 ns)
	'sub' operation 7 bit ('sub_ln558', posit_lib.cpp:558) [49]  (0.897 ns)
	'shl' operation 32 bit ('shl_ln558', posit_lib.cpp:558) [51]  (1.400 ns)
	'select' operation 31 bit ('mS', posit_lib.cpp:558) [56]  (0.495 ns)
	'sub' operation 31 bit ('mantissa', posit_lib.cpp:560) [58]  (1.191 ns)

 <State 2>: 7.140ns
The critical path consists of the following:
	'select' operation 31 bit ('mantissa', posit_lib.cpp:559) [60]  (0.495 ns)
	'xor' operation 1 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [62]  (0.331 ns)
	'select' operation 2 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [66]  (0.264 ns)
	'add' operation 2 bit ('add_ln101', posit_lib.cpp:101->posit_lib.cpp:566) [69]  (0.625 ns)
	'select' operation 2 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [70]  (0.000 ns)
	'select' operation 2 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [71]  (0.264 ns)
	'add' operation 3 bit ('add_ln101_1', posit_lib.cpp:101->posit_lib.cpp:566) [75]  (0.625 ns)
	'select' operation 3 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [76]  (0.000 ns)
	'select' operation 3 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [77]  (0.275 ns)
	'add' operation 3 bit ('add_ln101_2', posit_lib.cpp:101->posit_lib.cpp:566) [80]  (0.746 ns)
	'select' operation 3 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [81]  (0.000 ns)
	'select' operation 3 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [82]  (0.275 ns)
	'add' operation 3 bit ('add_ln101_3', posit_lib.cpp:101->posit_lib.cpp:566) [85]  (0.746 ns)
	'select' operation 3 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [86]  (0.000 ns)
	'select' operation 3 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [87]  (0.275 ns)
	'add' operation 3 bit ('add_ln101_4', posit_lib.cpp:101->posit_lib.cpp:566) [90]  (0.746 ns)
	'select' operation 3 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [91]  (0.000 ns)
	'select' operation 3 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [92]  (0.275 ns)
	'add' operation 4 bit ('add_ln101_5', posit_lib.cpp:101->posit_lib.cpp:566) [96]  (0.746 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [97]  (0.000 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [98]  (0.450 ns)

 <State 3>: 6.590ns
The critical path consists of the following:
	'add' operation 4 bit ('add_ln101_6', posit_lib.cpp:101->posit_lib.cpp:566) [101]  (0.868 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [102]  (0.000 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [103]  (0.450 ns)
	'add' operation 4 bit ('add_ln101_7', posit_lib.cpp:101->posit_lib.cpp:566) [106]  (0.868 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [107]  (0.000 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [108]  (0.450 ns)
	'add' operation 4 bit ('add_ln101_8', posit_lib.cpp:101->posit_lib.cpp:566) [111]  (0.868 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [112]  (0.000 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [113]  (0.450 ns)
	'add' operation 4 bit ('add_ln101_9', posit_lib.cpp:101->posit_lib.cpp:566) [116]  (0.868 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [117]  (0.000 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [118]  (0.450 ns)
	'add' operation 4 bit ('add_ln101_10', posit_lib.cpp:101->posit_lib.cpp:566) [121]  (0.868 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [122]  (0.000 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [123]  (0.450 ns)

 <State 4>: 6.699ns
The critical path consists of the following:
	'add' operation 4 bit ('add_ln101_11', posit_lib.cpp:101->posit_lib.cpp:566) [126]  (0.868 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [127]  (0.000 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [128]  (0.450 ns)
	'add' operation 4 bit ('add_ln101_12', posit_lib.cpp:101->posit_lib.cpp:566) [131]  (0.868 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [132]  (0.000 ns)
	'select' operation 4 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [133]  (0.450 ns)
	'add' operation 5 bit ('add_ln101_13', posit_lib.cpp:101->posit_lib.cpp:566) [137]  (0.868 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [138]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [139]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_14', posit_lib.cpp:101->posit_lib.cpp:566) [142]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [143]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [144]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_15', posit_lib.cpp:101->posit_lib.cpp:566) [147]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [148]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [149]  (0.480 ns)

 <State 5>: 6.789ns
The critical path consists of the following:
	'add' operation 5 bit ('add_ln101_16', posit_lib.cpp:101->posit_lib.cpp:566) [152]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [153]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [154]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_17', posit_lib.cpp:101->posit_lib.cpp:566) [157]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [158]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [159]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_18', posit_lib.cpp:101->posit_lib.cpp:566) [162]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [163]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [164]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_19', posit_lib.cpp:101->posit_lib.cpp:566) [167]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [168]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [169]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_20', posit_lib.cpp:101->posit_lib.cpp:566) [172]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [173]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [174]  (0.480 ns)

 <State 6>: 6.789ns
The critical path consists of the following:
	'add' operation 5 bit ('add_ln101_21', posit_lib.cpp:101->posit_lib.cpp:566) [177]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [178]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [179]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_22', posit_lib.cpp:101->posit_lib.cpp:566) [182]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [183]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [184]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_23', posit_lib.cpp:101->posit_lib.cpp:566) [187]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [188]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [189]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_24', posit_lib.cpp:101->posit_lib.cpp:566) [192]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [193]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [194]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_25', posit_lib.cpp:101->posit_lib.cpp:566) [197]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [198]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [199]  (0.480 ns)

 <State 7>: 6.843ns
The critical path consists of the following:
	'add' operation 5 bit ('add_ln101_26', posit_lib.cpp:101->posit_lib.cpp:566) [202]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [203]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [204]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_27', posit_lib.cpp:101->posit_lib.cpp:566) [207]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [208]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [209]  (0.480 ns)
	'add' operation 5 bit ('add_ln101_28', posit_lib.cpp:101->posit_lib.cpp:566) [212]  (0.878 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:101->posit_lib.cpp:566) [213]  (0.000 ns)
	'select' operation 5 bit ('count', posit_lib.cpp:100->posit_lib.cpp:566) [214]  (0.480 ns)
	'sub' operation 6 bit ('sub_ln567', posit_lib.cpp:567) [221]  (0.878 ns)
	'lshr' operation 32 bit ('lshr_ln567', posit_lib.cpp:567) [223]  (1.427 ns)
	'select' operation 30 bit ('mantissa', posit_lib.cpp:594) [226]  (0.000 ns)
	'select' operation 30 bit ('select_ln611', posit_lib.cpp:611) [232]  (0.465 ns)

 <State 8>: 0.547ns
The critical path consists of the following:
	'sparsemux' operation 30 bit ('mantissa', posit_lib.cpp:619) [242]  (0.547 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
