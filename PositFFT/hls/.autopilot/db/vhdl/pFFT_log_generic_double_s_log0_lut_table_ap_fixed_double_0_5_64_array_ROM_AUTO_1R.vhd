-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pFFT_log_generic_double_s_log0_lut_table_ap_fixed_double_0_5_64_array_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 90; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pFFT_log_generic_double_s_log0_lut_table_ap_fixed_double_0_5_64_array_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "111111110111110000011110111111010001100100101110111000110100111111001110111010100101000110", 1 => "111111110111110000011110111111010001100100101110111000110100111111001110111010100101000110", 2 => "111111110111110000011110111111010001100100101110111000110100111111001110111010100101000110", 3 => "000001111001110011001101110000100000110011010001000001011000011111011010100010001000110010", 
    4 => "000001111001110011001101110000100000110011010001000001011000011111011010100010001000110010", 5 => "000100000000000110110111101100101011011101101000111010011101100001110010111001111110110110", 6 => "000100000000000110110111101100101011011101101000111010011101100001110010111001111110110110", 7 => "000110001010111101111101010110100111001001111000011010111111110111101100010010001111010110", 
    8 => "000110001010111101111101010110100111001001111000011010111111110111101100010010001111010110", 9 => "000110001010111101111101010110100111001001111000011010111111110111101100010010001111010110", 10 => "001000011010101100111100000000010110100011110111110110110000110000110110000000001101010110", 11 => "001000011010101100111100000000010110100011110111110110110000110000110110000000001101010110", 
    12 => "001010101111101010011111110100111100000110101010010001110100011011010100000100000010101110", 13 => "001010101111101010011111110100111100000110101010010001110100011011010100000100000010101110", 14 => "001010101111101010011111110100111100000110101010010001110100011011010100000100000010101110", 15 => "001101001010001111111001011101100010111011100010101010100010111000100110101111110100000011", 
    16 => "001101001010001111111001011101100010111011100010101010100010111000100110101111110100000011", 17 => "001101001010001111111001011101100010111011100010101010100010111000100110101111110100000011", 18 => "001111101010111001010111110101101000000010010101110101100100101100000001011011011000100101", 19 => "001111101010111001010111110101101000000010010101110101100100101100000001011011011000100101", 
    20 => "001111101010111001010111110101101000000010010101110101100100101100000001011011011000100101", 21 => "001111101010111001010111110101101000000010010101110101100100101100000001011011011000100101", 22 => "010010010010000110100111010000011110110010011101001011010011000010111110100110000010101101", 23 => "010010010010000110100111010000011110110010011101001011010011000010111110100110000010101101", 
    24 => "010010010010000110100111010000011110110010011101001011010011000010111110100110000010101101", 25 => "010010010010000110100111010000011110110010011101001011010011000010111110100110000010101101", 26 => "010101000000011011010111000110011111101110111110010000101000100000001111100111001011010101", 27 => "010101000000011011010111000110011111101110111110010000101000100000001111100111001011010101", 
    28 => "010101000000011011010111000110011111101110111110010000101000100000001111100111001011010101", 29 => "010101000000011011010111000110011111101110111110010000101000100000001111100111001011010101", 30 => "010111110110100000000111111011000111100110000011010100110000011101101010111000010010011001", 31 => "010111110110100000000111111011000111100110000011010100110000011101101010111000010010011001", 
    32 => "101100111101100010010100000100011001010010111010001000001101111100011011110001011110011110", 33 => "101100111101100010010100000100011001010010111010001000001101111100011011110001011110011110", 34 => "101110011101111010101100010011100110101010010110101010110100000101011011110010101111101111", 35 => "101110011101111010101100010011100110101010010110101010110100000101011011110010101111101111", 
    36 => "110000000000100111101110001000100101110010110010100011100011010100100100010111010111100100", 37 => "110000000000100111101110001000100101110010110010100011100011010100100100010111010111100100", 38 => "110000000000100111101110001000100101110010110010100011100011010100100100010111010111100100", 39 => "110001100101110000101111011011011110001111111010100111111111011110000011001110100001001110", 
    40 => "110001100101110000101111011011011110001111111010100111111111011110000011001110100001001110", 41 => "110001100101110000101111011011011110001111111010100111111111011110000011001110100001001110", 42 => "110011001101011101101001110000110011000010000001011110100110001101001100100010010110011100", 43 => "110011001101011101101001110000110011000010000001011110100110001101001100100010010110011100", 
    44 => "110100110111110110111110000110111100101000000111001110111011111011100111001001100011110110", 45 => "110100110111110110111110000110111100101000000111001110111011111011100111001001100011110110", 46 => "110100110111110110111110000110111100101000000111001110111011111011100111001001100011110110", 47 => "110110100101000101111001000011001101100101000100100111001011011111000011001100010110111110", 
    48 => "110110100101000101111001000011001101100101000100100111001011011111000011001100010110111110", 49 => "110110100101000101111001000011001101100101000100100111001011011111000011001100010110111110", 50 => "111000010101010100010111100011101110111000111011111111010110010111100100011000100101000110", 51 => "111000010101010100010111100011101110111000111011111111010110010111100100011000100101000110", 
    52 => "111000010101010100010111100011101110111000111011111111010110010111100100011000100101000110", 53 => "111000010101010100010111100011101110111000111011111111010110010111100100011000100101000110", 54 => "111010001000101101001100011100100011001111000011100101111011001111101010010100001001011110", 55 => "111010001000101101001100011100100011001111000011100101111011001111101010010100001001011110", 
    56 => "111010001000101101001100011100100011001111000011100101111011001111101010010100001001011110", 57 => "111011111111011100000110100111010001000001111101100100000001111100010000100001011001100011", 58 => "111011111111011100000110100111010001000001111101100100000001111100010000100001011001100011", 59 => "111011111111011100000110100111010001000001111101100100000001111100010000100001011001100011", 
    60 => "111011111111011100000110100111010001000001111101100100000001111100010000100001011001100011", 61 => "111101111001101101111000001110010111101100100010001000110011110010010000101010110100110010", 62 => "111101111001101101111000001110010111101100100010001000110011110010010000101010110100110010", 63 => "111101111001101101111000001110010111101100100010001000110011110010010000101010110100110010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

