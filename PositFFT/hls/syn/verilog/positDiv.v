// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="positDiv_positDiv,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3teg-sfvc784-1Q-q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.129500,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=374,HLS_SYN_LUT=672,HLS_VERSION=2024_2}" *)

module positDiv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        y,
        ap_return
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] x;
input  [63:0] y;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] sign_fu_215_p2;
reg   [0:0] sign_reg_645;
wire   [0:0] isZero_fu_221_p2;
reg   [0:0] isZero_reg_650;
wire   [6:0] sf_r_fu_271_p2;
reg   [6:0] sf_r_reg_658;
wire   [6:0] sf_r_3_fu_332_p3;
wire    ap_CS_fsm_state29;
wire   [12:0] mantissa_fu_351_p3;
reg   [6:0] sf_r_1_reg_132;
wire   [0:0] icmp_ln697_fu_285_p2;
reg   [4:0] regime_1_reg_141;
reg   [12:0] mantissa_1_reg_152;
wire   [12:0] y_mantissa_fu_203_p3;
wire   [0:0] x_sign_fu_163_p1;
wire   [0:0] y_sign_fu_183_p1;
wire   [0:0] x_isZero_fu_167_p3;
wire   [0:0] y_isZero_fu_187_p3;
wire   [4:0] tmp_s_fu_227_p4;
wire   [0:0] x_exponent_fu_175_p3;
wire   [5:0] sf_x_fu_237_p3;
wire   [4:0] tmp_1_fu_249_p4;
wire   [0:0] y_exponent_fu_195_p3;
wire   [5:0] sf_y_fu_259_p3;
wire  signed [6:0] sext_ln693_fu_245_p1;
wire  signed [6:0] sext_ln694_fu_267_p1;
wire   [1:0] tmp_fu_277_p3;
wire   [12:0] tmp_3_fu_291_p4;
wire   [24:0] grp_fu_309_p0;
wire   [12:0] grp_fu_309_p1;
wire   [24:0] grp_fu_309_p2;
wire   [0:0] tmp_6_fu_315_p3;
wire   [6:0] sf_r_2_fu_327_p2;
wire   [11:0] trunc_ln709_fu_339_p1;
wire   [12:0] trunc_ln710_fu_323_p1;
wire   [12:0] shl_ln1_fu_343_p3;
wire    ap_CS_fsm_state30;
wire   [1:0] tmp_2_fu_369_p3;
wire   [0:0] icmp_ln729_fu_377_p2;
wire   [4:0] regime_2_fu_383_p3;
wire   [0:0] tmp_7_fu_403_p3;
wire   [4:0] sub_ln736_fu_417_p2;
wire   [4:0] add_ln736_fu_411_p2;
wire   [4:0] SREG_fu_423_p3;
wire  signed [4:0] REM_fu_431_p2;
wire   [3:0] tmp_8_fu_443_p4;
wire  signed [14:0] sext_ln744_fu_463_p1;
wire   [31:0] zext_ln744_fu_467_p1;
wire   [31:0] shl_ln744_fu_471_p2;
wire   [0:0] trunc_ln744_fu_477_p1;
wire   [0:0] exponent_fu_459_p1;
wire   [0:0] xor_ln744_fu_481_p2;
wire   [0:0] icmp_ln732_fu_391_p2;
wire   [0:0] icmp_ln733_fu_397_p2;
wire   [0:0] xor_ln732_fu_493_p2;
wire   [0:0] and_ln733_fu_499_p2;
wire   [4:0] regime_3_fu_513_p7;
wire   [1:0] regime_3_fu_513_p8;
wire   [0:0] icmp_ln738_fu_437_p2;
wire   [0:0] or_ln738_fu_533_p2;
wire   [0:0] or_ln738_1_fu_539_p2;
wire   [0:0] icmp_ln739_fu_453_p2;
wire   [0:0] xor_ln738_fu_545_p2;
wire   [0:0] and_ln739_fu_551_p2;
wire   [0:0] exponent_2_fu_565_p6;
wire   [0:0] exponent_2_fu_565_p7;
wire   [1:0] exponent_2_fu_565_p8;
wire   [0:0] exponent_2_fu_565_p9;
wire   [0:0] xor_ln749_fu_585_p2;
wire   [4:0] regime_3_fu_513_p9;
wire   [12:0] mantissa_2_fu_596_p3;
wire   [0:0] exponent_3_fu_590_p2;
wire   [4:0] select_ln749_fu_608_p3;
wire   [0:0] sign_1_fu_603_p2;
wire   [60:0] or_ln758_1_fu_615_p10;
reg    grp_fu_309_ap_start;
wire    grp_fu_309_ap_done;
reg   [29:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire   [24:0] grp_fu_309_p10;
wire  signed [1:0] regime_3_fu_513_p1;
wire   [1:0] regime_3_fu_513_p3;
wire   [1:0] regime_3_fu_513_p5;
wire  signed [1:0] exponent_2_fu_565_p1;
wire   [1:0] exponent_2_fu_565_p3;
wire   [1:0] exponent_2_fu_565_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
end

positDiv_udiv_25ns_13ns_25_29_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 25 ))
udiv_25ns_13ns_25_29_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_309_ap_start),
    .done(grp_fu_309_ap_done),
    .din0(grp_fu_309_p0),
    .din1(grp_fu_309_p1),
    .ce(1'b1),
    .dout(grp_fu_309_p2)
);

(* dissolve_hierarchy = "yes" *) positDiv_sparsemux_7_2_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 5 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 5 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 5 ),
    .def_WIDTH( 5 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 5 ))
sparsemux_7_2_5_1_1_U2(
    .din0(5'd14),
    .din1(5'd18),
    .din2(regime_2_fu_383_p3),
    .def(regime_3_fu_513_p7),
    .sel(regime_3_fu_513_p8),
    .dout(regime_3_fu_513_p9)
);

(* dissolve_hierarchy = "yes" *) positDiv_sparsemux_7_2_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 1 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 1 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 1 ),
    .def_WIDTH( 1 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
sparsemux_7_2_1_1_1_U3(
    .din0(1'd0),
    .din1(exponent_fu_459_p1),
    .din2(exponent_2_fu_565_p6),
    .def(exponent_2_fu_565_p7),
    .sel(exponent_2_fu_565_p8),
    .dout(exponent_2_fu_565_p9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln697_fu_285_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mantissa_1_reg_152 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        mantissa_1_reg_152 <= mantissa_fu_351_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln697_fu_285_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        regime_1_reg_141 <= 5'd18;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        regime_1_reg_141 <= {{sf_r_3_fu_332_p3[5:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln697_fu_285_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_r_1_reg_132 <= sf_r_fu_271_p2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        sf_r_1_reg_132 <= sf_r_3_fu_332_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        isZero_reg_650 <= isZero_fu_221_p2;
        sf_r_reg_658 <= sf_r_fu_271_p2;
        sign_reg_645 <= sign_fu_215_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln697_fu_285_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_309_ap_start = 1'b1;
    end else begin
        grp_fu_309_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln697_fu_285_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else if (((icmp_ln697_fu_285_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign REM_fu_431_p2 = ($signed(5'd16) - $signed(SREG_fu_423_p3));

assign SREG_fu_423_p3 = ((tmp_7_fu_403_p3[0:0] == 1'b1) ? sub_ln736_fu_417_p2 : add_ln736_fu_411_p2);

assign add_ln736_fu_411_p2 = (regime_2_fu_383_p3 + 5'd3);

assign and_ln733_fu_499_p2 = (xor_ln732_fu_493_p2 & icmp_ln733_fu_397_p2);

assign and_ln739_fu_551_p2 = (xor_ln738_fu_545_p2 & icmp_ln739_fu_453_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_return = or_ln758_1_fu_615_p10;

assign exponent_2_fu_565_p6 = (xor_ln744_fu_481_p2 & exponent_fu_459_p1);

assign exponent_2_fu_565_p7 = 'bx;

assign exponent_2_fu_565_p8 = {{or_ln738_1_fu_539_p2}, {and_ln739_fu_551_p2}};

assign exponent_3_fu_590_p2 = (xor_ln749_fu_585_p2 & exponent_2_fu_565_p9);

assign exponent_fu_459_p1 = sf_r_1_reg_132[0:0];

assign grp_fu_309_p0 = {{tmp_3_fu_291_p4}, {12'd0}};

assign grp_fu_309_p1 = grp_fu_309_p10;

assign grp_fu_309_p10 = y_mantissa_fu_203_p3;

assign icmp_ln697_fu_285_p2 = ((tmp_fu_277_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln729_fu_377_p2 = ((tmp_2_fu_369_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln732_fu_391_p2 = (($signed(regime_2_fu_383_p3) > $signed(5'd13)) ? 1'b1 : 1'b0);

assign icmp_ln733_fu_397_p2 = (($signed(regime_2_fu_383_p3) < $signed(5'd18)) ? 1'b1 : 1'b0);

assign icmp_ln738_fu_437_p2 = ((SREG_fu_423_p3 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln739_fu_453_p2 = ((tmp_8_fu_443_p4 != 4'd0) ? 1'b1 : 1'b0);

assign isZero_fu_221_p2 = (y_isZero_fu_187_p3 | x_isZero_fu_167_p3);

assign mantissa_2_fu_596_p3 = ((isZero_reg_650[0:0] == 1'b1) ? 13'd0 : mantissa_1_reg_152);

assign mantissa_fu_351_p3 = ((tmp_6_fu_315_p3[0:0] == 1'b1) ? trunc_ln710_fu_323_p1 : shl_ln1_fu_343_p3);

assign or_ln738_1_fu_539_p2 = (or_ln738_fu_533_p2 | icmp_ln732_fu_391_p2);

assign or_ln738_fu_533_p2 = (icmp_ln738_fu_437_p2 | icmp_ln733_fu_397_p2);

assign or_ln758_1_fu_615_p10 = {{{{{{{{{mantissa_2_fu_596_p3}, {15'd0}}, {exponent_3_fu_590_p2}}, {3'd0}}, {select_ln749_fu_608_p3}}, {15'd0}}, {isZero_reg_650}}, {7'd0}}, {sign_1_fu_603_p2}};

assign regime_2_fu_383_p3 = ((icmp_ln729_fu_377_p2[0:0] == 1'b1) ? 5'd18 : regime_1_reg_141);

assign regime_3_fu_513_p7 = 'bx;

assign regime_3_fu_513_p8 = {{icmp_ln732_fu_391_p2}, {and_ln733_fu_499_p2}};

assign select_ln749_fu_608_p3 = ((isZero_reg_650[0:0] == 1'b1) ? 5'd0 : regime_3_fu_513_p9);

assign sext_ln693_fu_245_p1 = $signed(sf_x_fu_237_p3);

assign sext_ln694_fu_267_p1 = $signed(sf_y_fu_259_p3);

assign sext_ln744_fu_463_p1 = REM_fu_431_p2;

assign sf_r_2_fu_327_p2 = ($signed(sf_r_reg_658) + $signed(7'd127));

assign sf_r_3_fu_332_p3 = ((tmp_6_fu_315_p3[0:0] == 1'b1) ? sf_r_reg_658 : sf_r_2_fu_327_p2);

assign sf_r_fu_271_p2 = ($signed(sext_ln693_fu_245_p1) - $signed(sext_ln694_fu_267_p1));

assign sf_x_fu_237_p3 = {{tmp_s_fu_227_p4}, {x_exponent_fu_175_p3}};

assign sf_y_fu_259_p3 = {{tmp_1_fu_249_p4}, {y_exponent_fu_195_p3}};

assign shl_ln1_fu_343_p3 = {{trunc_ln709_fu_339_p1}, {1'd0}};

assign shl_ln744_fu_471_p2 = 32'd1 << zext_ln744_fu_467_p1;

assign sign_1_fu_603_p2 = (xor_ln749_fu_585_p2 & sign_reg_645);

assign sign_fu_215_p2 = (y_sign_fu_183_p1 ^ x_sign_fu_163_p1);

assign sub_ln736_fu_417_p2 = (5'd2 - regime_2_fu_383_p3);

assign tmp_1_fu_249_p4 = {{y[28:24]}};

assign tmp_2_fu_369_p3 = {{sf_r_1_reg_132[6:5]}};

assign tmp_3_fu_291_p4 = {{x[60:48]}};

assign tmp_6_fu_315_p3 = grp_fu_309_p2[32'd12];

assign tmp_7_fu_403_p3 = regime_2_fu_383_p3[32'd4];

assign tmp_8_fu_443_p4 = {{REM_fu_431_p2[4:1]}};

assign tmp_fu_277_p3 = {{sf_r_fu_271_p2[6:5]}};

assign tmp_s_fu_227_p4 = {{x[28:24]}};

assign trunc_ln709_fu_339_p1 = grp_fu_309_p2[11:0];

assign trunc_ln710_fu_323_p1 = grp_fu_309_p2[12:0];

assign trunc_ln744_fu_477_p1 = shl_ln744_fu_471_p2[0:0];

assign x_exponent_fu_175_p3 = x[64'd32];

assign x_isZero_fu_167_p3 = x[64'd8];

assign x_sign_fu_163_p1 = x[0:0];

assign xor_ln732_fu_493_p2 = (icmp_ln732_fu_391_p2 ^ 1'd1);

assign xor_ln738_fu_545_p2 = (or_ln738_1_fu_539_p2 ^ 1'd1);

assign xor_ln744_fu_481_p2 = (trunc_ln744_fu_477_p1 ^ 1'd1);

assign xor_ln749_fu_585_p2 = (isZero_reg_650 ^ 1'd1);

assign y_exponent_fu_195_p3 = y[64'd32];

assign y_isZero_fu_187_p3 = y[64'd8];

assign y_mantissa_fu_203_p3 = {{y[60:48]}};

assign y_sign_fu_183_p1 = y[0:0];

assign zext_ln744_fu_467_p1 = $unsigned(sext_ln744_fu_463_p1);

endmodule //positDiv
