-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pFFT_pAccumulateFC is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read : IN STD_LOGIC_VECTOR (39 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (29 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of pFFT_pAccumulateFC is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_C01921FB54442D18 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010001000010110100011000";
    constant ap_const_lv64_3F90000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_430 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal deltaTheta_sign_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal deltaTheta_isZero_reg_440 : STD_LOGIC_VECTOR (0 downto 0);
    signal deltaTheta_regime_reg_445 : STD_LOGIC_VECTOR (5 downto 0);
    signal deltaTheta_mantissa_reg_450 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_fu_217_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_mantissa_6_reg_465 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_i321_i_fu_268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_i321_i_reg_470 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_double2posit_fu_120_ap_start : STD_LOGIC;
    signal grp_double2posit_fu_120_ap_done : STD_LOGIC;
    signal grp_double2posit_fu_120_ap_idle : STD_LOGIC;
    signal grp_double2posit_fu_120_ap_ready : STD_LOGIC;
    signal grp_double2posit_fu_120_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_double2posit_fu_120_ap_return_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_double2posit_fu_120_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_double2posit_fu_120_ap_return_3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_double2posit_fu_120_grp_fu_177_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_double2posit_fu_120_grp_fu_177_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_double2posit_fu_120_grp_fu_177_p_ce : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_done : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_idle : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_ready : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_mantissa_write_assign_out : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_mantissa_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_exponent_write_assign_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_exponent_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_regime_write_assign_out : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_regime_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_isZero_write_assign_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_isZero_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_sign_write_assign_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_sign_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_mantissa_write_assign_out : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_mantissa_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_exponent_write_assign_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_exponent_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_regime_write_assign_out : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_regime_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_isZero_write_assign_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_isZero_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_sign_write_assign_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_sign_write_assign_out_ap_vld : STD_LOGIC;
    signal grp_double2posit_fu_120_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_regime_fu_231_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_59_fu_256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_i337_i_fu_252_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv3_i13_i315_i_fu_264_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_177_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pFFT_double2posit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        div : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (29 downto 0);
        grp_fu_177_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_177_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_177_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_177_p_ce : OUT STD_LOGIC );
    end component;


    component pFFT_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty_5 : IN STD_LOGIC_VECTOR (0 downto 0);
        empty : IN STD_LOGIC_VECTOR (0 downto 0);
        add_i321_i : IN STD_LOGIC_VECTOR (6 downto 0);
        conv3_i_i351_i : IN STD_LOGIC_VECTOR (29 downto 0);
        deltaTheta_sign : IN STD_LOGIC_VECTOR (0 downto 0);
        deltaTheta_isZero : IN STD_LOGIC_VECTOR (0 downto 0);
        deltaTheta_regime : IN STD_LOGIC_VECTOR (5 downto 0);
        deltaTheta_mantissa : IN STD_LOGIC_VECTOR (29 downto 0);
        imagSum_mantissa_write_assign_out : OUT STD_LOGIC_VECTOR (29 downto 0);
        imagSum_mantissa_write_assign_out_ap_vld : OUT STD_LOGIC;
        imagSum_exponent_write_assign_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        imagSum_exponent_write_assign_out_ap_vld : OUT STD_LOGIC;
        imagSum_regime_write_assign_out : OUT STD_LOGIC_VECTOR (5 downto 0);
        imagSum_regime_write_assign_out_ap_vld : OUT STD_LOGIC;
        imagSum_isZero_write_assign_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        imagSum_isZero_write_assign_out_ap_vld : OUT STD_LOGIC;
        imagSum_sign_write_assign_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        imagSum_sign_write_assign_out_ap_vld : OUT STD_LOGIC;
        realSum_mantissa_write_assign_out : OUT STD_LOGIC_VECTOR (29 downto 0);
        realSum_mantissa_write_assign_out_ap_vld : OUT STD_LOGIC;
        realSum_exponent_write_assign_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        realSum_exponent_write_assign_out_ap_vld : OUT STD_LOGIC;
        realSum_regime_write_assign_out : OUT STD_LOGIC_VECTOR (5 downto 0);
        realSum_regime_write_assign_out_ap_vld : OUT STD_LOGIC;
        realSum_isZero_write_assign_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        realSum_isZero_write_assign_out_ap_vld : OUT STD_LOGIC;
        realSum_sign_write_assign_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        realSum_sign_write_assign_out_ap_vld : OUT STD_LOGIC );
    end component;


    component pFFT_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pFFT_sitodp_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_double2posit_fu_120 : component pFFT_double2posit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_double2posit_fu_120_ap_start,
        ap_done => grp_double2posit_fu_120_ap_done,
        ap_idle => grp_double2posit_fu_120_ap_idle,
        ap_ready => grp_double2posit_fu_120_ap_ready,
        div => reg_186,
        ap_return_0 => grp_double2posit_fu_120_ap_return_0,
        ap_return_1 => grp_double2posit_fu_120_ap_return_1,
        ap_return_2 => grp_double2posit_fu_120_ap_return_2,
        ap_return_3 => grp_double2posit_fu_120_ap_return_3,
        grp_fu_177_p_din0 => grp_double2posit_fu_120_grp_fu_177_p_din0,
        grp_fu_177_p_din1 => grp_double2posit_fu_120_grp_fu_177_p_din1,
        grp_fu_177_p_dout0 => grp_fu_177_p2,
        grp_fu_177_p_ce => grp_double2posit_fu_120_grp_fu_177_p_ce);

    grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155 : component pFFT_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start,
        ap_done => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_done,
        ap_idle => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_idle,
        ap_ready => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_ready,
        empty_5 => empty_reg_455,
        empty => tmp_reg_460,
        add_i321_i => add_i321_i_reg_470,
        conv3_i_i351_i => x_mantissa_6_reg_465,
        deltaTheta_sign => deltaTheta_sign_reg_435,
        deltaTheta_isZero => deltaTheta_isZero_reg_440,
        deltaTheta_regime => deltaTheta_regime_reg_445,
        deltaTheta_mantissa => deltaTheta_mantissa_reg_450,
        imagSum_mantissa_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_mantissa_write_assign_out,
        imagSum_mantissa_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_mantissa_write_assign_out_ap_vld,
        imagSum_exponent_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_exponent_write_assign_out,
        imagSum_exponent_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_exponent_write_assign_out_ap_vld,
        imagSum_regime_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_regime_write_assign_out,
        imagSum_regime_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_regime_write_assign_out_ap_vld,
        imagSum_isZero_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_isZero_write_assign_out,
        imagSum_isZero_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_isZero_write_assign_out_ap_vld,
        imagSum_sign_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_sign_write_assign_out,
        imagSum_sign_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_sign_write_assign_out_ap_vld,
        realSum_mantissa_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_mantissa_write_assign_out,
        realSum_mantissa_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_mantissa_write_assign_out_ap_vld,
        realSum_exponent_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_exponent_write_assign_out,
        realSum_exponent_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_exponent_write_assign_out_ap_vld,
        realSum_regime_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_regime_write_assign_out,
        realSum_regime_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_regime_write_assign_out_ap_vld,
        realSum_isZero_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_isZero_write_assign_out,
        realSum_isZero_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_isZero_write_assign_out_ap_vld,
        realSum_sign_write_assign_out => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_sign_write_assign_out,
        realSum_sign_write_assign_out_ap_vld => grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_sign_write_assign_out_ap_vld);

    dmul_64ns_64ns_64_6_max_dsp_1_U135 : component pFFT_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        ce => grp_fu_177_ce,
        dout => grp_fu_177_p2);

    sitodp_32ns_64_4_no_dsp_1_U136 : component pFFT_sitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_183_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_double2posit_fu_120_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_double2posit_fu_120_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_double2posit_fu_120_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_double2posit_fu_120_ap_ready = ap_const_logic_1)) then 
                    grp_double2posit_fu_120_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_double2posit_fu_120_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_ready = ap_const_logic_1)) then 
                    grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_i321_i_reg_470 <= add_i321_i_fu_268_p2;
                deltaTheta_isZero_reg_440 <= grp_double2posit_fu_120_ap_return_1;
                deltaTheta_mantissa_reg_450 <= grp_double2posit_fu_120_ap_return_3;
                deltaTheta_regime_reg_445 <= grp_double2posit_fu_120_ap_return_2;
                deltaTheta_sign_reg_435 <= grp_double2posit_fu_120_ap_return_0;
                empty_reg_455 <= empty_fu_217_p1;
                tmp_reg_460 <= p_read(1 downto 1);
                x_mantissa_6_reg_465 <= p_read(39 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                conv_reg_430 <= grp_fu_183_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_186 <= grp_fu_177_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state18, grp_double2posit_fu_120_ap_done, grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_done, ap_CS_fsm_state19)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_double2posit_fu_120_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_i321_i_fu_268_p2 <= std_logic_vector(signed(conv_i337_i_fu_252_p1) + signed(conv3_i13_i315_i_fu_264_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(grp_double2posit_fu_120_ap_done)
    begin
        if ((grp_double2posit_fu_120_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_done)
    begin
        if ((grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_sign_write_assign_out;
    ap_return_1 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_isZero_write_assign_out;
    ap_return_2 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_regime_write_assign_out;
    ap_return_3 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_exponent_write_assign_out;
    ap_return_4 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_realSum_mantissa_write_assign_out;
    ap_return_5 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_sign_write_assign_out;
    ap_return_6 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_isZero_write_assign_out;
    ap_return_7 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_regime_write_assign_out;
    ap_return_8 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_exponent_write_assign_out;
    ap_return_9 <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_imagSum_mantissa_write_assign_out;
    conv3_i13_i315_i_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_256_p3),7));
        conv_i337_i_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_regime_fu_231_p4),7));

    empty_fu_217_p1 <= p_read(1 - 1 downto 0);
    grp_double2posit_fu_120_ap_start <= grp_double2posit_fu_120_ap_start_reg;

    grp_fu_177_ce_assign_proc : process(ap_CS_fsm_state18, grp_double2posit_fu_120_grp_fu_177_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_177_ce <= grp_double2posit_fu_120_grp_fu_177_p_ce;
        else 
            grp_fu_177_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_177_p0_assign_proc : process(reg_186, conv_reg_430, ap_CS_fsm_state18, grp_double2posit_fu_120_grp_fu_177_p_din0, ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_177_p0 <= grp_double2posit_fu_120_grp_fu_177_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_177_p0 <= reg_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_177_p0 <= conv_reg_430;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p1_assign_proc : process(ap_CS_fsm_state18, grp_double2posit_fu_120_grp_fu_177_p_din1, ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_177_p1 <= grp_double2posit_fu_120_grp_fu_177_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_177_p1 <= ap_const_lv64_3F90000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_177_p1 <= ap_const_lv64_C01921FB54442D18;
        else 
            grp_fu_177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_183_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k),32));
    grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start <= grp_pAccumulateFC_Pipeline_VITIS_LOOP_1345_1_fu_155_ap_start_reg;
    tmp_59_fu_256_p3 <= p_read(9 downto 9);
    x_regime_fu_231_p4 <= p_read(8 downto 3);
end behav;
