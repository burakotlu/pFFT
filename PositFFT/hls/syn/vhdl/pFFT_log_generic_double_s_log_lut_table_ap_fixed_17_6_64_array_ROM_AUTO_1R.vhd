-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pFFT_log_generic_double_s_log_lut_table_ap_fixed_17_6_64_array_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 73; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pFFT_log_generic_double_s_log_lut_table_ap_fixed_17_6_64_array_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000000000000000000000000000000000000000000000000000000000000000", 1 => "0000010000000000000000000000001111111111000000000000010101010011010101011", 2 => "0000100000000000000000000000111111111110000000000010101010100010101010111", 3 => "0000110000000000000000000010001111111101000000001000111111101110000000110", 
    4 => "0001000000000000000000000011111111111100000000010101010100110101010111100", 5 => "0001010000000000000000000110001111111011000000101001101001111000101111110", 6 => "0001100000000000000000001000111111111010000001000111111110111000001010011", 7 => "0001110000000000000000001100001111111001000001110010010011110011101000100", 
    8 => "0010000000000000000000001111111111111000000010101010101000101011001011001", 9 => "0010010000000000000000010100001111110111000011110010111101011110110011110", 10 => "0010100000000000000000011000111111110110000101001101010010001110100100000", 11 => "0010110000000000000000011110001111110101000110111011100110111010011101101", 
    12 => "0011000000000000000000100011111111110100001000111111111011100010100010101", 13 => "0011010000000000000000101010001111110011001011011100010000000110110101001", 14 => "0011100000000000000000110000111111110010001110010010100100100111010111101", 15 => "0011110000000000000000111000001111110001010001100100111001000100001100011", 
    16 => "0100000000000000000000111111111111110000010101010101001101011101010110010", 17 => "0100010000000000000001001000001111101111011001100101100001110010111000001", 18 => "0100100000000000000001010000111111101110011110010111110110000100110101001", 19 => "0100110000000000000001011010001111101101100011101110001010010011010000100", 
    20 => "0101000000000000000001100011111111101100101001101010011110011110001101110", 21 => "0101010000000000000001101110001111101011110000001110110010100101110000100", 22 => "0101100000000000000001111000111111101010110111011101000110101001111100101", 23 => "0101110000000000000010000100001111101001111111010111011010101010110110001", 
    24 => "0110000000000000000010001111111111101001000111111111101110101000100001010", 25 => "0110010000000000000010011100001111101000010001011000000010100011000010011", 26 => "0110100000000000000010101000111111100111011011100010010110011010011110001", 27 => "0110110000000000000010110110001111100110100110100000101010001110111001010", 
    28 => "0111000000000000000011000011111111100101110010010100111110000000011000110", 29 => "0111010000000000000011010010001111100100111111000001010001101111000001110", 30 => "0111100000000000000011100000111111100100001100100111100101011010111001100", 31 => "0111110000000000000011110000001111100011011011001001111001000100000101110", 
    32 => "1000000000000000000011111111111111100010101010101010001100101010101100001", 33 => "1000010000000000000100010000001111100001111011001010100000001110110010100", 34 => "1000100000000000000100100000111111100001001100101100110011110000011111000", 35 => "1000110000000000000100110010001111100000011111010011000111001111110111110", 
    36 => "1001000000000000000101000011111111011111110010111111011010101101000011100", 37 => "1001010000000000000101010110001111011111000111110011101110001000001000110", 38 => "1001100000000000000101101000111111011110011101110010000001100001001110011", 39 => "1001110000000000000101111100001111011101110100111100010100111000011011010", 
    40 => "1010000000000000000110001111111111011101001101010100101000001101110110111", 41 => "1010010000000000000110100100001111011100100110111100111011100001101000100", 42 => "1010100000000000000110111000111111011100000001110111001110110011110111101", 43 => "1010110000000000000111001110001111011011011110000101100010000100101100010", 
    44 => "1011000000000000000111100011111111011010111011101001110101010100001110001", 45 => "1011010000000000000111111010001111011010011010100110001000100010100101101", 46 => "1011100000000000001000010000111111011001111010111100011011101111111011000", 47 => "1011110000000000001000101000001111011001011100101110101110111100010110101", 
    48 => "1100000000000000001000111111111111011000111111111111000010001000000001100", 49 => "1100010000000000001001011000001111011000100100101111010101010011000100010", 50 => "1100100000000000001001110000111111011000001011000001101000011101101000001", 51 => "1100110000000000001010001010001111010111110010110111111011100111110110100", 
    52 => "1101000000000000001010100011111111010111011100010100001110110001111000101", 53 => "1101010000000000001010111110001111010111000111011000100001111011111000011", 54 => "1101100000000000001011011000111111010110110100000110110101000101111111011", 55 => "1101110000000000001011110100001111010110100010100001001000010000010111110", 
    56 => "1110000000000000001100001111111111010110010010101001011011011011001011111", 57 => "1110010000000000001100101100001111010110000100100001101110100110100101111", 58 => "1110100000000000001101001000111111010101111000001100000001110010110000100", 59 => "1110110000000000001101100110001111010101101101101010010100111111110110101", 
    60 => "1111000000000000001110000011111111010101100100111110101000001110000011000", 61 => "1111010000000000001110100010001111010101011110001010111011011101100000111", 62 => "1111100000000000001111000000111111010101011001010001001110101110011011101", 63 => "1111110000000000001111100000001111010101010110010011100010000000111110110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

