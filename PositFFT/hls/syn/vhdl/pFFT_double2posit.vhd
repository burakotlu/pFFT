-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pFFT_double2posit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    div : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (29 downto 0);
    grp_fu_177_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_177_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_177_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_177_p_ce : OUT STD_LOGIC );
end;


architecture behav of pFFT_double2posit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (61 downto 0) := "00000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (61 downto 0) := "00000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (61 downto 0) := "00000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (61 downto 0) := "00000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (61 downto 0) := "00000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (61 downto 0) := "00000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (61 downto 0) := "00001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (61 downto 0) := "00010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (61 downto 0) := "00100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (61 downto 0) := "01000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (61 downto 0) := "10000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv64_3FF71547652B82FE : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110111000101010100011101100101001010111000001011111110";
    constant ap_const_lv64_41C0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000111000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3E112E0BE826D695 : STD_LOGIC_VECTOR (63 downto 0) := "0011111000010001001011100000101111101000001001101101011010010101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv37_0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal mask_table_50_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_50_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal reg_336 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_341 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal bitcast_ln356_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln356_reg_1249 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln356_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln356_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln356_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln356_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_sign_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_sign_reg_1264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln361_fu_420_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln361_reg_1270 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_log_generic_double_s_fu_282_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1276 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal data_3_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_3_reg_1281 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal xs_exp_1_reg_1288 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sign_reg_1297 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln179_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_1306 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln497_1_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln497_1_reg_1321 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln170_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_reg_1326 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_0_i_fu_552_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal retval_0_i_reg_1332 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln497_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln339_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_reg_1343 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_1_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_1_reg_1348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal retval_0_i7_fu_778_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal result_fu_929_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_reg_1366 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_171_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_regime_fu_945_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_regime_reg_1378 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln414_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_1384 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_assign_reg_1393 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_pow_generic_double_s_fu_305_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal exact_reg_1398 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal mant_part_fu_1201_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal mant_part_reg_1403 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_log_generic_double_s_fu_282_base_r : STD_LOGIC_VECTOR (63 downto 0);
    signal fl_reg_217 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln339_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_this_regime_write_assign_phi_fu_230_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal this_regime_write_assign_reg_226 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_phi_mux_this_sign_write_assign_phi_fu_243_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_sign_write_assign_reg_239 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6 : STD_LOGIC_VECTOR (29 downto 0);
    signal this_mantissa_write_assign_reg_252 : STD_LOGIC_VECTOR (29 downto 0);
    signal mantissa_32_fu_1208_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_mux_result_isZero_phi_fu_271_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_isZero_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal mask_table_ce0_local : STD_LOGIC;
    signal one_half_table_ce0_local : STD_LOGIC;
    signal mask_table_50_ce0_local : STD_LOGIC;
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_326_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_349_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln356_fu_359_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln356_1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_sel_fu_392_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln363_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln363_fu_405_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln_fu_408_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln363_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_fu_448_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_7_fu_469_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_2_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln467_fu_494_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln184_fu_498_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_19_i_fu_510_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_fu_504_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal t_8_fu_520_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln167_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln167_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_0_i_fu_552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal retval_0_i_fu_552_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal retval_0_i_fu_552_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal retval_0_i_fu_552_p8 : STD_LOGIC_VECTOR (1 downto 0);
    signal data_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_9_fu_576_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln479_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_589_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln339_fu_599_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln339_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln479_fu_637_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln28_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_640_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_4_fu_648_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_sign_1_fu_654_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_2_fu_662_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_2_fu_670_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_1_fu_625_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_3_fu_685_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln39_fu_692_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_2_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_4_fu_679_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_4_fu_698_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal t_10_fu_704_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln18_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_1_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_0_i7_fu_778_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal retval_0_i7_fu_778_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal retval_0_i7_fu_778_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_5_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln505_fu_821_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_825_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_fu_813_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_fu_839_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_843_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_fu_857_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_166_fu_849_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_fu_863_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_fu_867_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln18_1_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_835_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln18_fu_879_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal lshr_ln18_fu_883_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal shl_ln18_fu_889_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_s_fu_895_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_905_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal val_fu_915_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xs_sign_3_fu_805_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_1_fu_923_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln401_fu_957_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln401_fu_961_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_173_fu_967_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln401_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal SREG_fu_983_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_172_fu_949_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal SREG_2_fu_997_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal SREG_1_fu_989_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal SREG_3_fu_1003_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_6_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln505_1_fu_1041_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_30_fu_1045_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_3_fu_1033_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_1_fu_1059_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_1_fu_1063_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_1_fu_1077_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_168_fu_1069_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_2_fu_1083_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_2_fu_1087_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln18_3_fu_1095_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_1055_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln18_1_fu_1099_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal lshr_ln18_1_fu_1103_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal shl_ln18_1_fu_1109_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_169_fu_1115_p4 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_170_fu_1125_p4 : STD_LOGIC_VECTOR (36 downto 0);
    signal val_1_fu_1135_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal xs_sign_4_fu_1025_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_4_fu_1143_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln381_1_fu_1160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mant_with_sf_fu_1149_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln381_fu_1163_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln381_fu_1157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln381_fu_1173_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln381_2_fu_1179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln381_1_fu_1183_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal shl_ln381_fu_1187_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal lshr_ln381_fu_1167_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln381_fu_1193_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln381_1_fu_1197_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_326_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal retval_0_i_fu_552_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal retval_0_i_fu_552_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal retval_0_i_fu_552_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal retval_0_i7_fu_778_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal retval_0_i7_fu_778_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal retval_0_i7_fu_778_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal retval_0_i7_fu_778_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component pFFT_log_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pFFT_pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        exp : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pFFT_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pFFT_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pFFT_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pFFT_sitodp_32s_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pFFT_sparsemux_7_2_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pFFT_sparsemux_9_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pFFT_double2posit_mask_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component pFFT_double2posit_one_half_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;



begin
    mask_table_U : component pFFT_double2posit_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0_local,
        q0 => mask_table_q0);

    one_half_table_U : component pFFT_double2posit_one_half_table_ROM_AUTO_1R
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table_address0,
        ce0 => one_half_table_ce0_local,
        q0 => one_half_table_q0);

    mask_table_50_U : component pFFT_double2posit_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_50_address0,
        ce0 => mask_table_50_ce0_local,
        q0 => mask_table_50_q0);

    grp_log_generic_double_s_fu_282 : component pFFT_log_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        base_r => grp_log_generic_double_s_fu_282_base_r,
        ap_return => grp_log_generic_double_s_fu_282_ap_return);

    grp_pow_generic_double_s_fu_305 : component pFFT_pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        exp => y_assign_reg_1393,
        ap_return => grp_pow_generic_double_s_fu_305_ap_return);

    dsub_64ns_64ns_64_5_full_dsp_1_U53 : component pFFT_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_316_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U55 : component pFFT_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_326_p0,
        din1 => grp_fu_326_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_326_opcode,
        dout => grp_fu_326_p2);

    sitodp_32s_64_4_no_dsp_1_U56 : component pFFT_sitodp_32s_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p1);

    sparsemux_7_2_64_1_1_U57 : component pFFT_sparsemux_7_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "10",
        din0_WIDTH => 64,
        CASE1 => "01",
        din1_WIDTH => 64,
        CASE2 => "00",
        din2_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => retval_0_i_fu_552_p2,
        din1 => reg_336,
        din2 => retval_0_i_fu_552_p6,
        def => retval_0_i_fu_552_p7,
        sel => retval_0_i_fu_552_p8,
        dout => retval_0_i_fu_552_p9);

    sparsemux_9_3_64_1_1_U58 : component pFFT_sparsemux_9_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100",
        din0_WIDTH => 64,
        CASE1 => "010",
        din1_WIDTH => 64,
        CASE2 => "001",
        din2_WIDTH => 64,
        CASE3 => "000",
        din3_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => reg_336,
        din1 => retval_0_i7_fu_778_p4,
        din2 => ap_const_lv64_BFF0000000000000,
        din3 => bitcast_ln497_1_reg_1321,
        def => retval_0_i7_fu_778_p9,
        sel => retval_0_i7_fu_778_p10,
        dout => retval_0_i7_fu_778_p11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                    ap_return_0_preg <= ap_phi_mux_this_sign_write_assign_phi_fu_243_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                    ap_return_1_preg <= ap_phi_mux_result_isZero_phi_fu_271_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv6_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                    ap_return_2_preg <= ap_phi_mux_this_regime_write_assign_phi_fu_230_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv30_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                    ap_return_3_preg <= ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6;
                end if; 
            end if;
        end if;
    end process;


    fl_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln339_fu_619_p2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                fl_reg_217 <= retval_0_i_reg_1332;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                fl_reg_217 <= retval_0_i7_fu_778_p11;
            end if; 
        end if;
    end process;

    result_isZero_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln414_reg_1384 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_lv1_0 = and_ln356_reg_1260) and (icmp_ln414_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
                result_isZero_reg_266 <= ap_const_lv1_0;
            elsif (((ap_const_lv1_1 = and_ln356_fu_381_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                result_isZero_reg_266 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    this_mantissa_write_assign_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln356_reg_1260) and (icmp_ln414_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                this_mantissa_write_assign_reg_252 <= mantissa_32_fu_1208_p4;
            elsif ((((icmp_ln414_reg_1384 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_lv1_1 = and_ln356_fu_381_p2) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                this_mantissa_write_assign_reg_252 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    this_regime_write_assign_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln414_reg_1384 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_lv1_0 = and_ln356_reg_1260) and (icmp_ln414_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
                this_regime_write_assign_reg_226 <= result_regime_reg_1378;
            elsif (((ap_const_lv1_1 = and_ln356_fu_381_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                this_regime_write_assign_reg_226 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    this_sign_write_assign_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln414_reg_1384 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_lv1_0 = and_ln356_reg_1260) and (icmp_ln414_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
                this_sign_write_assign_reg_239 <= result_sign_reg_1264;
            elsif (((ap_const_lv1_1 = and_ln356_fu_381_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                this_sign_write_assign_reg_239 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln356_reg_1260 <= and_ln356_fu_381_p2;
                bitcast_ln356_reg_1249 <= bitcast_ln356_fu_346_p1;
                or_ln356_reg_1255 <= or_ln356_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                    bitcast_ln497_1_reg_1321(63) <= bitcast_ln497_1_fu_476_p1(63);
                icmp_ln170_reg_1326 <= icmp_ln170_fu_480_p2;
                retval_0_i_reg_1332 <= retval_0_i_fu_552_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                data_3_reg_1281 <= data_3_fu_428_p1;
                xs_exp_1_reg_1288 <= data_3_fu_428_p1(62 downto 52);
                xs_sign_reg_1297 <= data_3_fu_428_p1(63 downto 63);
                    zext_ln179_reg_1306(5 downto 0) <= zext_ln179_fu_458_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                exact_reg_1398 <= grp_pow_generic_double_s_fu_305_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                icmp_ln339_1_reg_1348 <= icmp_ln339_1_fu_609_p2;
                icmp_ln339_reg_1343 <= icmp_ln339_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                icmp_ln414_reg_1384 <= icmp_ln414_fu_1011_p2;
                result_reg_1366 <= result_fu_929_p3;
                result_regime_reg_1378 <= result_regime_fu_945_p1;
                tmp_171_reg_1373 <= result_fu_929_p3(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                mant_part_reg_1403 <= mant_part_fu_1201_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_336 <= grp_fu_177_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_341 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                result_sign_reg_1264 <= result_sign_fu_387_p2;
                select_ln361_reg_1270 <= select_ln361_fu_420_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_reg_1276 <= grp_log_generic_double_s_fu_282_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                y_assign_reg_1393 <= grp_fu_333_p1;
            end if;
        end if;
    end process;
    zext_ln179_reg_1306(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    bitcast_ln497_1_reg_1321(62 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, and_ln356_fu_381_p2, ap_CS_fsm_state30, and_ln339_fu_619_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_1 = and_ln356_fu_381_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_lv1_1 = and_ln339_fu_619_p2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    SREG_1_fu_989_p3 <= 
        SREG_fu_983_p2 when (icmp_ln401_fu_977_p2(0) = '1') else 
        ap_const_lv6_20;
    SREG_2_fu_997_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) - unsigned(result_regime_fu_945_p1));
    SREG_3_fu_1003_p3 <= 
        SREG_2_fu_997_p2 when (tmp_172_fu_949_p3(0) = '1') else 
        SREG_1_fu_989_p3;
    SREG_fu_983_p2 <= std_logic_vector(unsigned(result_regime_fu_945_p1) + unsigned(ap_const_lv6_3));
    add_ln401_fu_961_p2 <= std_logic_vector(unsigned(zext_ln401_fu_957_p1) + unsigned(ap_const_lv7_3));
    add_ln486_1_fu_1063_p2 <= std_logic_vector(unsigned(zext_ln486_1_fu_1059_p1) + unsigned(ap_const_lv12_C01));
    add_ln486_fu_843_p2 <= std_logic_vector(unsigned(zext_ln486_fu_839_p1) + unsigned(ap_const_lv12_C01));
    and_ln170_fu_538_p2 <= (xor_ln167_fu_532_p2 and icmp_ln170_fu_480_p2);
    and_ln19_1_fu_762_p2 <= (icmp_ln18_fu_628_p2 and and_ln19_fu_757_p2);
    and_ln19_fu_757_p2 <= (xs_sign_reg_1297 and or_ln19_fu_751_p2);
    and_ln24_fu_724_p2 <= (xor_ln18_fu_718_p2 and icmp_ln170_reg_1326);
    and_ln339_fu_619_p2 <= (or_ln339_fu_615_p2 and grp_fu_326_p2);
    and_ln356_fu_381_p2 <= (or_ln356_fu_375_p2 and grp_fu_326_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state62)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_result_isZero_phi_fu_271_p6_assign_proc : process(and_ln356_reg_1260, icmp_ln414_reg_1384, ap_CS_fsm_state62, result_isZero_reg_266)
    begin
        if (((ap_const_lv1_0 = and_ln356_reg_1260) and (icmp_ln414_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            ap_phi_mux_result_isZero_phi_fu_271_p6 <= ap_const_lv1_0;
        else 
            ap_phi_mux_result_isZero_phi_fu_271_p6 <= result_isZero_reg_266;
        end if; 
    end process;


    ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6_assign_proc : process(and_ln356_reg_1260, icmp_ln414_reg_1384, ap_CS_fsm_state62, this_mantissa_write_assign_reg_252, mantissa_32_fu_1208_p4)
    begin
        if (((ap_const_lv1_0 = and_ln356_reg_1260) and (icmp_ln414_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6 <= mantissa_32_fu_1208_p4;
        else 
            ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6 <= this_mantissa_write_assign_reg_252;
        end if; 
    end process;


    ap_phi_mux_this_regime_write_assign_phi_fu_230_p6_assign_proc : process(and_ln356_reg_1260, result_regime_reg_1378, icmp_ln414_reg_1384, this_regime_write_assign_reg_226, ap_CS_fsm_state62)
    begin
        if (((ap_const_lv1_0 = and_ln356_reg_1260) and (icmp_ln414_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            ap_phi_mux_this_regime_write_assign_phi_fu_230_p6 <= result_regime_reg_1378;
        else 
            ap_phi_mux_this_regime_write_assign_phi_fu_230_p6 <= this_regime_write_assign_reg_226;
        end if; 
    end process;


    ap_phi_mux_this_sign_write_assign_phi_fu_243_p6_assign_proc : process(and_ln356_reg_1260, result_sign_reg_1264, icmp_ln414_reg_1384, ap_CS_fsm_state62, this_sign_write_assign_reg_239)
    begin
        if (((ap_const_lv1_0 = and_ln356_reg_1260) and (icmp_ln414_reg_1384 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            ap_phi_mux_this_sign_write_assign_phi_fu_243_p6 <= result_sign_reg_1264;
        else 
            ap_phi_mux_this_sign_write_assign_phi_fu_243_p6 <= this_sign_write_assign_reg_239;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state62, ap_phi_mux_this_sign_write_assign_phi_fu_243_p6, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_return_0 <= ap_phi_mux_this_sign_write_assign_phi_fu_243_p6;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state62, ap_phi_mux_result_isZero_phi_fu_271_p6, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_return_1 <= ap_phi_mux_result_isZero_phi_fu_271_p6;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_phi_mux_this_regime_write_assign_phi_fu_230_p6, ap_CS_fsm_state62, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_return_2 <= ap_phi_mux_this_regime_write_assign_phi_fu_230_p6;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state62, ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_return_3 <= ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    bit_sel_fu_392_p3 <= bitcast_ln356_reg_1249(63 downto 63);
    bitcast_ln356_fu_346_p1 <= div;
    bitcast_ln363_fu_416_p1 <= xor_ln_fu_408_p3;
    bitcast_ln497_1_fu_476_p1 <= t_7_fu_469_p3;
    bitcast_ln497_fu_584_p1 <= zext_ln479_fu_580_p1;
    data_2_fu_489_p2 <= std_logic_vector(unsigned(zext_ln175_fu_485_p1) + unsigned(data_3_reg_1281));
    data_3_fu_428_p1 <= reg_336;
    data_4_fu_648_p2 <= std_logic_vector(unsigned(zext_ln28_fu_633_p1) + unsigned(t_fu_640_p3));
    data_5_fu_801_p1 <= fl_reg_217;
    data_6_fu_1021_p1 <= reg_336;
    data_fu_572_p1 <= reg_341;
    grp_fu_177_p_ce <= ap_const_logic_1;
    grp_fu_177_p_din0 <= grp_fu_320_p0;
    grp_fu_177_p_din1 <= grp_fu_320_p1;

    grp_fu_316_p0_assign_proc : process(reg_336, select_ln361_reg_1270, ap_CS_fsm_state24, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_316_p0 <= select_ln361_reg_1270;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_316_p0 <= reg_336;
        else 
            grp_fu_316_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_316_p1_assign_proc : process(retval_0_i_reg_1332, exact_reg_1398, ap_CS_fsm_state24, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_316_p1 <= exact_reg_1398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_316_p1 <= retval_0_i_reg_1332;
        else 
            grp_fu_316_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_320_p0_assign_proc : process(reg_341, tmp_reg_1276, ap_CS_fsm_state16, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_320_p0 <= reg_341;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_320_p0 <= tmp_reg_1276;
        else 
            grp_fu_320_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_320_p1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_320_p1 <= ap_const_lv64_41C0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_320_p1 <= ap_const_lv64_3FF71547652B82FE;
        else 
            grp_fu_320_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_326_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, and_ln356_fu_381_p2, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_lv1_0 = and_ln356_fu_381_p2) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_326_opcode <= ap_const_lv5_4;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_326_opcode <= ap_const_lv5_1;
        else 
            grp_fu_326_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_326_p0_assign_proc : process(ap_CS_fsm_state1, div, ap_CS_fsm_state2, bitcast_ln497_fu_584_p1, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_326_p0 <= bitcast_ln497_fu_584_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_326_p0 <= div;
        else 
            grp_fu_326_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_326_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_326_p1 <= ap_const_lv64_3E112E0BE826D695;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_326_p1 <= ap_const_lv64_0;
        else 
            grp_fu_326_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_333_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_reg_1366),32));

    grp_log_generic_double_s_fu_282_base_r <= 
        bitcast_ln363_fu_416_p1 when (result_sign_fu_387_p2(0) = '1') else 
        div;
    icmp_ln167_fu_464_p2 <= "1" when (unsigned(xs_exp_1_reg_1288) < unsigned(ap_const_lv11_3FE)) else "0";
    icmp_ln170_fu_480_p2 <= "1" when (unsigned(xs_exp_1_reg_1288) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln18_fu_628_p2 <= "1" when (unsigned(xs_exp_1_reg_1288) < unsigned(ap_const_lv11_3FF)) else "0";
    icmp_ln19_1_fu_746_p2 <= "0" when (xs_exp_1_reg_1288 = ap_const_lv11_0) else "1";
    icmp_ln19_fu_740_p2 <= "0" when (xs_sig_1_fu_625_p1 = ap_const_lv52_0) else "1";
    icmp_ln339_1_fu_609_p2 <= "1" when (trunc_ln339_fu_599_p1 = ap_const_lv52_0) else "0";
    icmp_ln339_fu_603_p2 <= "0" when (tmp_6_fu_589_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln356_1_fu_369_p2 <= "1" when (trunc_ln356_fu_359_p1 = ap_const_lv52_0) else "0";
    icmp_ln356_fu_363_p2 <= "0" when (tmp_2_fu_349_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln401_fu_977_p2 <= "1" when (tmp_173_fu_967_p4 = ap_const_lv2_0) else "0";
    icmp_ln414_fu_1011_p2 <= "1" when (SREG_3_fu_1003_p3 = ap_const_lv6_20) else "0";
    index_fu_448_p4 <= data_3_fu_428_p1(57 downto 52);
    lshr_ln18_1_fu_1103_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_1055_p1),to_integer(unsigned('0' & zext_ln18_1_fu_1099_p1(31-1 downto 0)))));
    lshr_ln18_fu_883_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_835_p1),to_integer(unsigned('0' & zext_ln18_fu_879_p1(31-1 downto 0)))));
    lshr_ln381_fu_1167_p2 <= std_logic_vector(shift_right(unsigned(mant_with_sf_fu_1149_p3),to_integer(unsigned('0' & zext_ln381_fu_1163_p1(31-1 downto 0)))));
    mant_part_fu_1201_p3 <= 
        trunc_ln381_fu_1193_p1 when (tmp_171_reg_1373(0) = '1') else 
        trunc_ln381_1_fu_1197_p1;
    mant_with_sf_fu_1149_p3 <= 
        result_4_fu_1143_p2 when (xs_sign_4_fu_1025_p3(0) = '1') else 
        val_1_fu_1135_p3;
    mantissa_30_fu_1045_p4 <= ((ap_const_lv1_1 & trunc_ln505_1_fu_1041_p1) & ap_const_lv1_0);
    
    mantissa_32_fu_1208_p4_proc : process(mant_part_reg_1403)
    begin
        mantissa_32_fu_1208_p4 <= mant_part_reg_1403;
        mantissa_32_fu_1208_p4(29) <= ap_const_lv1_1(0);
    end process;

    mantissa_fu_825_p4 <= ((ap_const_lv1_1 & trunc_ln505_fu_821_p1) & ap_const_lv1_0);
    mask_table_50_address0 <= zext_ln179_reg_1306(6 - 1 downto 0);

    mask_table_50_ce0_local_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            mask_table_50_ce0_local <= ap_const_logic_1;
        else 
            mask_table_50_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    mask_table_address0 <= zext_ln179_fu_458_p1(6 - 1 downto 0);

    mask_table_ce0_local_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mask_table_ce0_local <= ap_const_logic_1;
        else 
            mask_table_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    one_half_table_address0 <= zext_ln179_fu_458_p1(6 - 1 downto 0);

    one_half_table_ce0_local_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            one_half_table_ce0_local <= ap_const_logic_1;
        else 
            one_half_table_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln19_fu_751_p2 <= (icmp_ln19_fu_740_p2 or icmp_ln19_1_fu_746_p2);
    or_ln24_fu_729_p2 <= (icmp_ln18_fu_628_p2 or icmp_ln170_reg_1326);
    or_ln339_fu_615_p2 <= (icmp_ln339_reg_1343 or icmp_ln339_1_reg_1348);
    or_ln356_fu_375_p2 <= (icmp_ln356_fu_363_p2 or icmp_ln356_1_fu_369_p2);
    result_1_fu_923_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(val_fu_915_p3));
    result_4_fu_1143_p2 <= std_logic_vector(unsigned(ap_const_lv37_0) - unsigned(val_1_fu_1135_p3));
    result_fu_929_p3 <= 
        result_1_fu_923_p2 when (xs_sign_3_fu_805_p3(0) = '1') else 
        val_fu_915_p3;
    result_regime_fu_945_p1 <= result_fu_929_p3(6 - 1 downto 0);
    result_sign_fu_387_p2 <= (or_ln356_reg_1255 and grp_fu_326_p2);
    retval_0_i7_fu_778_p10 <= ((and_ln24_fu_724_p2 & xor_ln24_fu_734_p2) & and_ln19_1_fu_762_p2);
    retval_0_i7_fu_778_p4 <= t_10_fu_704_p4;
    retval_0_i7_fu_778_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    retval_0_i_fu_552_p2 <= t_7_fu_469_p3;
    retval_0_i_fu_552_p6 <= t_8_fu_520_p3;
    retval_0_i_fu_552_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    retval_0_i_fu_552_p8 <= (icmp_ln167_fu_464_p2 & and_ln170_fu_538_p2);
    select_ln18_2_fu_1087_p3 <= 
        sext_ln18_2_fu_1083_p1 when (tmp_168_fu_1069_p3(0) = '1') else 
        add_ln486_1_fu_1063_p2;
    select_ln18_fu_867_p3 <= 
        sext_ln18_fu_863_p1 when (tmp_166_fu_849_p3(0) = '1') else 
        add_ln486_fu_843_p2;
    select_ln361_fu_420_p3 <= 
        bitcast_ln363_fu_416_p1 when (result_sign_fu_387_p2(0) = '1') else 
        div;
        sext_ln18_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_fu_867_p3),32));

        sext_ln18_2_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_1_fu_1077_p2),12));

        sext_ln18_3_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_2_fu_1087_p3),32));

        sext_ln18_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_857_p2),12));

        sext_ln381_1_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_reg_1366),32));

        sext_ln381_2_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln381_fu_1173_p2),32));

        sext_ln381_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_reg_1366),8));

    shl_ln18_1_fu_1109_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_1055_p1),to_integer(unsigned('0' & zext_ln18_1_fu_1099_p1(31-1 downto 0)))));
    shl_ln18_fu_889_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_835_p1),to_integer(unsigned('0' & zext_ln18_fu_879_p1(31-1 downto 0)))));
    shl_ln381_fu_1187_p2 <= std_logic_vector(shift_left(unsigned(mant_with_sf_fu_1149_p3),to_integer(unsigned('0' & zext_ln381_1_fu_1183_p1(31-1 downto 0)))));
    sub_ln18_1_fu_1077_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_3_fu_1033_p3));
    sub_ln18_fu_857_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_fu_813_p3));
    sub_ln381_fu_1173_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(sext_ln381_fu_1157_p1));
    t_10_fu_704_p4 <= ((xs_sign_2_fu_674_p2 & xs_exp_4_fu_679_p3) & xs_sig_4_fu_698_p2);
    t_7_fu_469_p3 <= (xs_sign_reg_1297 & ap_const_lv63_0);
    t_8_fu_520_p3 <= (tmp_19_i_fu_510_p4 & xs_sig_fu_504_p2);
    t_9_fu_576_p1 <= data_fu_572_p1(63 - 1 downto 0);
    t_fu_640_p3 <= (ap_const_lv1_1 & trunc_ln479_fu_637_p1);
    tmp_166_fu_849_p3 <= add_ln486_fu_843_p2(11 downto 11);
    tmp_168_fu_1069_p3 <= add_ln486_1_fu_1063_p2(11 downto 11);
    tmp_169_fu_1115_p4 <= lshr_ln18_1_fu_1103_p2(89 downto 53);
    tmp_170_fu_1125_p4 <= shl_ln18_1_fu_1109_p2(89 downto 53);
    tmp_172_fu_949_p3 <= result_fu_929_p3(5 downto 5);
    tmp_173_fu_967_p4 <= add_ln401_fu_961_p2(6 downto 5);
    tmp_19_i_fu_510_p4 <= data_2_fu_489_p2(63 downto 52);
    tmp_24_fu_905_p4 <= shl_ln18_fu_889_p2(59 downto 53);
    tmp_2_fu_349_p4 <= bitcast_ln356_fu_346_p1(62 downto 52);
    tmp_6_fu_589_p4 <= data_fu_572_p1(62 downto 52);
    tmp_s_fu_895_p4 <= lshr_ln18_fu_883_p2(59 downto 53);
    trunc_ln339_fu_599_p1 <= data_fu_572_p1(52 - 1 downto 0);
    trunc_ln356_fu_359_p1 <= bitcast_ln356_fu_346_p1(52 - 1 downto 0);
    trunc_ln363_fu_405_p1 <= bitcast_ln356_reg_1249(63 - 1 downto 0);
    trunc_ln381_1_fu_1197_p1 <= lshr_ln381_fu_1167_p2(30 - 1 downto 0);
    trunc_ln381_fu_1193_p1 <= shl_ln381_fu_1187_p2(30 - 1 downto 0);
    trunc_ln467_fu_494_p1 <= data_2_fu_489_p2(52 - 1 downto 0);
    trunc_ln479_fu_637_p1 <= data_3_reg_1281(63 - 1 downto 0);
    trunc_ln505_1_fu_1041_p1 <= data_6_fu_1021_p1(52 - 1 downto 0);
    trunc_ln505_fu_821_p1 <= data_5_fu_801_p1(52 - 1 downto 0);
    val_1_fu_1135_p3 <= 
        tmp_169_fu_1115_p4 when (tmp_168_fu_1069_p3(0) = '1') else 
        tmp_170_fu_1125_p4;
    val_fu_915_p3 <= 
        tmp_s_fu_895_p4 when (tmp_166_fu_849_p3(0) = '1') else 
        tmp_24_fu_905_p4;
    xor_ln167_fu_532_p2 <= (icmp_ln167_fu_464_p2 xor ap_const_lv1_1);
    xor_ln184_fu_498_p2 <= (mask_table_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln18_fu_718_p2 <= (icmp_ln18_fu_628_p2 xor ap_const_lv1_1);
    xor_ln24_fu_734_p2 <= (or_ln24_fu_729_p2 xor ap_const_lv1_1);
    xor_ln363_fu_399_p2 <= (bit_sel_fu_392_p3 xor ap_const_lv1_1);
    xor_ln39_fu_692_p2 <= (mask_table_50_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln_fu_408_p3 <= (xor_ln363_fu_399_p2 & trunc_ln363_fu_405_p1);
    xs_exp_2_fu_662_p3 <= data_4_fu_648_p2(62 downto 52);
    xs_exp_3_fu_1033_p3 <= data_6_fu_1021_p1(62 downto 52);
    xs_exp_4_fu_679_p3 <= 
        xs_exp_2_fu_662_p3 when (xs_sign_reg_1297(0) = '1') else 
        xs_exp_1_reg_1288;
    xs_exp_fu_813_p3 <= data_5_fu_801_p1(62 downto 52);
    xs_sig_1_fu_625_p1 <= data_3_reg_1281(52 - 1 downto 0);
    xs_sig_2_fu_670_p1 <= data_4_fu_648_p2(52 - 1 downto 0);
    xs_sig_3_fu_685_p3 <= 
        xs_sig_2_fu_670_p1 when (xs_sign_reg_1297(0) = '1') else 
        xs_sig_1_fu_625_p1;
    xs_sig_4_fu_698_p2 <= (xs_sig_3_fu_685_p3 and xor_ln39_fu_692_p2);
    xs_sig_fu_504_p2 <= (xor_ln184_fu_498_p2 and trunc_ln467_fu_494_p1);
    xs_sign_1_fu_654_p3 <= data_4_fu_648_p2(63 downto 63);
    xs_sign_2_fu_674_p2 <= (xs_sign_reg_1297 and xs_sign_1_fu_654_p3);
    xs_sign_3_fu_805_p3 <= data_5_fu_801_p1(63 downto 63);
    xs_sign_4_fu_1025_p3 <= data_6_fu_1021_p1(63 downto 63);
    zext_ln15_1_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_30_fu_1045_p4),169));
    zext_ln15_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_825_p4),137));
    zext_ln175_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_table_q0),64));
    zext_ln179_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_448_p4),64));
    zext_ln18_1_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_3_fu_1095_p1),169));
    zext_ln18_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_875_p1),137));
    zext_ln28_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table_50_q0),64));
    zext_ln381_1_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln381_2_fu_1179_p1),37));
    zext_ln381_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln381_1_fu_1160_p1),37));
    zext_ln401_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_regime_fu_945_p1),7));
    zext_ln479_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_9_fu_576_p1),64));
    zext_ln486_1_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_3_fu_1033_p3),12));
    zext_ln486_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_813_p3),12));
end behav;
