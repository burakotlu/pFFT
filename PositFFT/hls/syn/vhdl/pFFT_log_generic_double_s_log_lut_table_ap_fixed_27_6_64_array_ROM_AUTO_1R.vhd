-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pFFT_log_generic_double_s_log_lut_table_ap_fixed_27_6_64_array_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 63; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pFFT_log_generic_double_s_log_lut_table_ap_fixed_27_6_64_array_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000000000000000000000000000000000000000000000000000000000000000", 1 => "000001000000000000000000000000000000000011111111111111111111000", 2 => "000010000000000000000000000000000000001111111111111111111110000", 3 => "000011000000000000000000000000000000100011111111111111111101000", 
    4 => "000100000000000000000000000000000000111111111111111111111100000", 5 => "000101000000000000000000000000000001100011111111111111111011000", 6 => "000110000000000000000000000000000010001111111111111111111010000", 7 => "000111000000000000000000000000000011000011111111111111111001000", 
    8 => "001000000000000000000000000000000011111111111111111111111000000", 9 => "001001000000000000000000000000000101000011111111111111110111000", 10 => "001010000000000000000000000000000110001111111111111111110110000", 11 => "001011000000000000000000000000000111100011111111111111110101000", 
    12 => "001100000000000000000000000000001000111111111111111111110100001", 13 => "001101000000000000000000000000001010100011111111111111110011001", 14 => "001110000000000000000000000000001100001111111111111111110010001", 15 => "001111000000000000000000000000001110000011111111111111110001010", 
    16 => "010000000000000000000000000000001111111111111111111111110000010", 17 => "010001000000000000000000000000010010000011111111111111101111011", 18 => "010010000000000000000000000000010100001111111111111111101110011", 19 => "010011000000000000000000000000010110100011111111111111101101100", 
    20 => "010100000000000000000000000000011000111111111111111111101100101", 21 => "010101000000000000000000000000011011100011111111111111101011110", 22 => "010110000000000000000000000000011110001111111111111111101010110", 23 => "010111000000000000000000000000100001000011111111111111101001111", 
    24 => "011000000000000000000000000000100011111111111111111111101001000", 25 => "011001000000000000000000000000100111000011111111111111101000010", 26 => "011010000000000000000000000000101010001111111111111111100111011", 27 => "011011000000000000000000000000101101100011111111111111100110100", 
    28 => "011100000000000000000000000000110000111111111111111111100101110", 29 => "011101000000000000000000000000110100100011111111111111100100111", 30 => "011110000000000000000000000000111000001111111111111111100100001", 31 => "011111000000000000000000000000111100000011111111111111100011011", 
    32 => "100000000000000000000000000000111111111111111111111111100010101", 33 => "100001000000000000000000000001000100000011111111111111100001111", 34 => "100010000000000000000000000001001000001111111111111111100001001", 35 => "100011000000000000000000000001001100100011111111111111100000011", 
    36 => "100100000000000000000000000001010000111111111111111111011111110", 37 => "100101000000000000000000000001010101100011111111111111011111000", 38 => "100110000000000000000000000001011010001111111111111111011110011", 39 => "100111000000000000000000000001011111000011111111111111011101110", 
    40 => "101000000000000000000000000001100011111111111111111111011101001", 41 => "101001000000000000000000000001101001000011111111111111011100100", 42 => "101010000000000000000000000001101110001111111111111111011100000", 43 => "101011000000000000000000000001110011100011111111111111011011011", 
    44 => "101100000000000000000000000001111000111111111111111111011010111", 45 => "101101000000000000000000000001111110100011111111111111011010011", 46 => "101110000000000000000000000010000100001111111111111111011001111", 47 => "101111000000000000000000000010001010000011111111111111011001011", 
    48 => "110000000000000000000000000010001111111111111111111111011000111", 49 => "110001000000000000000000000010010110000011111111111111011000100", 50 => "110010000000000000000000000010011100001111111111111111011000001", 51 => "110011000000000000000000000010100010100011111111111111010111110", 
    52 => "110100000000000000000000000010101000111111111111111111010111011", 53 => "110101000000000000000000000010101111100011111111111111010111000", 54 => "110110000000000000000000000010110110001111111111111111010110110", 55 => "110111000000000000000000000010111101000011111111111111010110100", 
    56 => "111000000000000000000000000011000011111111111111111111010110010", 57 => "111001000000000000000000000011001011000011111111111111010110000", 58 => "111010000000000000000000000011010010001111111111111111010101111", 59 => "111011000000000000000000000011011001100011111111111111010101101", 
    60 => "111100000000000000000000000011100000111111111111111111010101100", 61 => "111101000000000000000000000011101000100011111111111111010101011", 62 => "111110000000000000000000000011110000001111111111111111010101011", 63 => "111111000000000000000000000011111000000011111111111111010101010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

