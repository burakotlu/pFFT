-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pFFT_log_generic_double_s_log_lut_table_ap_fixed_102_12_ap_q_mode_5_ap_o_mode_3_0_cud is 
    generic(
             DataWidth     : integer := 83; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pFFT_log_generic_double_s_log_lut_table_ap_fixed_102_12_ap_q_mode_5_ap_o_mode_3_0_cud is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000", 1 => "00000100000000000000000000000000000101010101010101010101010101100010001000100010001", 2 => "00001000000000000010000000000001001010101011010010101011000011000100100000001111000", 3 => "00001100000000000110000000000101010000000100111000000100111000101011011111001011110", 
    4 => "00010000000000001100000000001110010101101000000101101111100110101110110110000010000", 5 => "00010100000000010100000000011110011011011101111100000110111110010111101111100011001", 6 => "00011000000000011110000000110111100001110010011011111011110010001101110011111100111", 7 => "00011100000000101010000001011011101000110100100110011001110111010011001110101010111", 
    8 => "00100000000000111000000010001100110000110110011101001110000110001111110111010011011", 9 => "00100100000001001000000011001100111010001101000010101100011100101011011110011100001", 10 => "00101000000001011010000100011110000101010000011001110101111110110110111111000100001", 11 => "00101100000001101110000110000010010010011011100110011110111001100100110101010001001", 
    12 => "00110000000010000100000111111011100010001100101101010100100100010000011010111011011", 13 => "00110100000010011100001010001011110101000100110100000011100011010100101011001000011", 14 => "00111000000010110110001100110101001011101000000001011101101010110001101100111110100", 15 => "00111100000011010010001111111001100110011101011101100000000001000001100110100010011", 
    16 => "01000000000011110000010011011011000110001111010001011001000001111100011000101000011", 17 => "01000100000100010000010111011011101011101010100111101110100010001011000100001010010", 18 => "01001000000100110010011011111101010111011111101100100011110010101001111001101100011", 19 => "01001100000101010110100001000010001010100001101101011111100100011001110100000010000", 
    20 => "01010000000101111100100110101100000101100110111001110010001100100000111110011100110", 21 => "01010100000110100100101100111101001001101000100010011011101000011010100111010101010", 22 => "01011000000111001110110011110111010111100010111010010001100010010101111111111100010", 23 => "01011100000111111010111011011100110000010101010110000101010110000100101001111110110", 
    24 => "01100000001000101001000011101111010101000010001100101010010101110111110011101110010", 25 => "01100100001001011001001100110001000110101110110110111011101111101101000011011000110", 26 => "01101000001010001011010110100100000110100011110000000010110010101010010010011111001", 27 => "01101100001010111111100001001010010101101100010101011100110100101000111001111000001", 
    28 => "01110000001011110101101100100101110101010111000111000001011000010000001111001100110", 29 => "01110100001100101101111000111000100110110101100111001000010010111111010100011101100", 30 => "01111000001101101000000110000100101011011100011010101111110011100101111010011101101", 31 => "01111100001110100100010100001100000100100011001001100010101000101100110110110001111", 
    32 => "10000000001111100010100011010000110011100100011101111110000111101101101110000010010", 33 => "10000100010000100010110011010100111001111110000101011000010011111001110011001100001", 34 => "10001000010001100101000100011010011001010000110000000110000101110000011100100010110", 35 => "10001100010010101001010110100011010011000000010001100001010010100100101111001011111", 
    36 => "10010000010011101111101001110001101000110011100000001110110100010010100001101001001", 37 => "10010100010100110111111110000111011100010100010110000100110001100010110110011000110", 38 => "10011000010110000010010011100110101111001111110000010000100101111111101110111111011", 39 => "10011100010111001110101010010001100011010101101111011101001010110111011000100111011", 
    40 => "10100000011000011101000010001001111010011001010111111000111111101110110010100100010", 41 => "10100100011001101101011011010001110110010000110001011100010011100011101111101001101", 42 => "10101000011010111111110101101011011000110101000111101111001101111110010011000011001", 43 => "10101100011100010100010001011000100100000010101010001111111000110001101001011100000", 
    44 => "10110000011101101010101110011011011001111000101100011000101001101100011111000110001", 45 => "10110100011111000011001100110101111100011001100101100110001100011000110011101100110", 46 => "10111000100000011101101100101010001101101010110001011101101100101011001100100100001", 47 => "10111100100001111010001101111010001111110100101111110011000001000001100110000011000", 
    48 => "11000000100011011000110000101000000101000011000100101110110101010001100100110101010", 49 => "11000100100100111001010100110101101111100100011000110100110101100110000111110110001", 50 => "11001000100110011011111010100101010001101010011001001001111001101100111011100010101", 51 => "11001100101000000000100001111000101101101001110111011010010000010011001111001111010", 
    52 => "11010000101001100111001010110010000101111010101001111111101010110010001101010100010", 53 => "11010100101011001111110101010011011100110111101100000111101001001010110110111011110", 54 => "11011000101100111010100001011110110100111110111101111001100110010001100100000011010", 55 => "11011100101110100111001111010110010000110001100100011101000100001001001000011110001", 
    56 => "11100000110000010101111110111011110010110011101001111111111000101101011110101000010", 57 => "11100100110010000110110000010001011101101100011101111100011010101101111000111000110", 58 => "11101000110011111001100011011001010100000110010100111111101110110110111010000010110", 59 => "11101100110101101110011000010101011000101110101001001111110101001011110101110100100", 
    60 => "11110000110111100101001111000111101110010101111010010001110110101111111010000011010", 61 => "11110100111001011110000111110010010111101111101101010000010011011111000001010011001", 62 => "11111000111011011001000010010111010111110010101101000001010000010110001111101011101", 63 => "11111100111101010101111110111000110001011000101010001100100101101011111010100101101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

