-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pFFT_log_generic_double_s_log_lut_table_ap_fixed_12_6_64_array_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 78; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pFFT_log_generic_double_s_log_lut_table_ap_fixed_12_6_64_array_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000000000000000000000000000000000000000000000000000000000000000000000000000000", 1 => "000001000000000000000000011111000000000000010100010110010101100100010110110100", 2 => "000010000000000000000001111110000000000010100110101100101110100010110000101110", 3 => "000011000000000000000100011101000000001000110111000011010011110101001110001100", 
    4 => "000100000000000000000111111100000000010101000101011010010100010101110000011010", 5 => "000101000000000000001100011011000000101001010001110010000100111110011001101100", 6 => "000110000000000000010001111010000001000111011100001011000000101001001101111001", 7 => "000111000000000000011000011001000001110001100100100101101000010000010010101010", 
    8 => "001000000000000000011111111000000010101001101011000010100010101101101111111100", 9 => "001001000000000000101000010111000011110001101111100010011100111011110000010010", 10 => "001010000000000000110001110110000101001011110010000110001001110100100001010000", 11 => "001011000000000000111100010101000110111001110010101110100010010010010011101110", 
    12 => "001100000000000001000111110100001000111101110001011100100101001111011100011001", 13 => "001101000000000001010100010011001011011001101110010001010111100110010100000000", 14 => "001110000000000001100001110010001110001111101001001110000100010001010111110111", 15 => "001111000000000001110000010001010001100001100010010011111100001011001010000101", 
    16 => "010000000000000001111111110000010101010001011001100100010110001110010010000101", 17 => "010001000000000010010000001111011001100001001111000000101111010101011100110101", 18 => "010010000000000010100001101110011110010011000010101010101010011011011101010111", 19 => "010011000000000010110100001101100011101000110100100011110000011011001101000010", 
    20 => "010100000000000011000111101100101001100100100100101101110000001111101011111111", 21 => "010101000000000011011100001011110000001000010011001010011110110100000001011011", 22 => "010110000000000011110001101010110111010101111111111011110111000011011100000110", 23 => "010111000000000100001000001001111111001111101011000011111001111001010010100111", 
    24 => "011000000000000100011111101001000111110111010100100100101110010001000011110100", 25 => "011001000000000100111000001000010001001110111100100000100001000110010111001100", 26 => "011010000000000101010001100111011011011000100010111001100101010100111101001011", 27 => "011011000000000101101100000110100110010110000111110010010011111000101111101001", 
    28 => "011100000000000110000111100101110010001001101011001101001011101101110010001011", 29 => "011101000000000110100100000100111110110101001101001100110001110000010010011101", 30 => "011110000000000111000001100100001100011010101101110011110000111100101000101101", 31 => "011111000000000111100000000011011010111100001101000100111010001111010111111111", 
    32 => "100000000000000111111111100010101010011011101011000011000100100101001110101001", 33 => "100001000000001000100000000001111010111011000111110001001100111011000110100111", 34 => "100010000000001001000001100001001100011100100011010010010110001110000101110110", 35 => "100011000000001001100100000000011111000001111101101001101001011011011110101010", 
    36 => "100100000000001010000111011111110010101101010110111010010101100000110000000110", 37 => "100101000000001010101011111111000111100000101111000111101111011011100110011000", 38 => "100110000000001011010001011110011101011110000110010101010010001001111011001010", 39 => "100111000000001011110111111101110100100111011100100110011110101001110110000010", 
    40 => "101000000000001100011111011101001100111110110001111110111011111001101100110010", 41 => "101001000000001101000111111100100110100110000110100010010110111000000011111000", 42 => "101010000000001101110001011100000001011111011010010100100010100011101110101110", 43 => "101011000000001110011011111011011101101100101101011001010111111011110000001001", 
    44 => "101100000000001111000111011010111011001111111111110100110101111111011010101101", 45 => "101101000000001111110011111010011010001011010001101011000001101110010001000101", 46 => "101110000000010000100001011001111010100000100011000000000110001000000110011110", 47 => "101111000000010001001111111001011100010001110011111000010100001100111110111011", 
    48 => "110000000000010001111111011000111111100001000100011000000010111101001111110001", 49 => "110001000000010010101111111000100100010000010100100011101111011001011111111101", 50 => "110010000000010011100001011000001010100001100100011111111100100010101000011010", 51 => "110011000000010100010011110111110010010110110100010001010011011001110100011110", 
    52 => "110100000000010101000111010111011011110010000011111100100011000000100010001101", 53 => "110101000000010101111011110111000110110101010011100110100000011000100010110101", 54 => "110110000000010110110001010110110011100010100011010100000110100011111011000011", 55 => "110111000000010111100111110110100001111011110011001010010110100101000011011100", 
    56 => "111000000000011000011111010110010010000011000011001110010111011110101000110110", 57 => "111001000000011001010111110110000011111010010011100101010110010011101100110000", 58 => "111010000000011010010001010101110111100011100100010100100110000111100101101000", 59 => "111011000000011011001011110101101101000000110101100001011111111101111111010110", 
    60 => "111100000000011100000111010101100100010100000111010001100010111010111011100000", 61 => "111101000000011101000011110101011101011111011001101010010100000010110001110110", 62 => "111110000000011110000001010101011000100100101100110001011110011010010000101000", 63 => "111111000000011110111111110101010101100110000000101100110011000110011101000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

