-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pFFT_log_generic_double_s_log_lut_table_ap_fixed_22_6_64_array_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 68; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pFFT_log_generic_double_s_log_lut_table_ap_fixed_22_6_64_array_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000000", 1 => "00000100000000000000000000000000000111111111111111000000000000010101", 2 => "00001000000000000000000000000000011111111111111110000000000010101010", 3 => "00001100000000000000000000000001000111111111111101000000001000111111", 
    4 => "00010000000000000000000000000001111111111111111100000000010101010101", 5 => "00010100000000000000000000000011000111111111111011000000101001101010", 6 => "00011000000000000000000000000100011111111111111010000001000111111111", 7 => "00011100000000000000000000000110000111111111111001000001110010010101", 
    8 => "00100000000000000000000000000111111111111111111000000010101010101010", 9 => "00100100000000000000000000001010000111111111110111000011110010111111", 10 => "00101000000000000000000000001100011111111111110110000101001101010101", 11 => "00101100000000000000000000001111000111111111110101000110111011101010", 
    12 => "00110000000000000000000000010001111111111111110100001000111111111111", 13 => "00110100000000000000000000010101000111111111110011001011011100010101", 14 => "00111000000000000000000000011000011111111111110010001110010010101010", 15 => "00111100000000000000000000011100000111111111110001010001100100111111", 
    16 => "01000000000000000000000000011111111111111111110000010101010101010101", 17 => "01000100000000000000000000100100000111111111101111011001100101101010", 18 => "01001000000000000000000000101000011111111111101110011110010111111111", 19 => "01001100000000000000000000101101000111111111101101100011101110010100", 
    20 => "01010000000000000000000000110001111111111111101100101001101010101010", 21 => "01010100000000000000000000110111000111111111101011110000001110111111", 22 => "01011000000000000000000000111100011111111111101010110111011101010100", 23 => "01011100000000000000000001000010000111111111101001111111010111101010", 
    24 => "01100000000000000000000001000111111111111111101001000111111111111111", 25 => "01100100000000000000000001001110000111111111101000010001011000010100", 26 => "01101000000000000000000001010100011111111111100111011011100010101010", 27 => "01101100000000000000000001011011000111111111100110100110100000111111", 
    28 => "01110000000000000000000001100001111111111111100101110010010101010100", 29 => "01110100000000000000000001101001000111111111100100111111000001101001", 30 => "01111000000000000000000001110000011111111111100100001100100111111111", 31 => "01111100000000000000000001111000000111111111100011011011001010010100", 
    32 => "10000000000000000000000001111111111111111111100010101010101010101001", 33 => "10000100000000000000000010001000000111111111100001111011001010111111", 34 => "10001000000000000000000010010000011111111111100001001100101101010100", 35 => "10001100000000000000000010011001000111111111100000011111010011101001", 
    36 => "10010000000000000000000010100001111111111111011111110010111111111110", 37 => "10010100000000000000000010101011000111111111011111000111110100010100", 38 => "10011000000000000000000010110100011111111111011110011101110010101001", 39 => "10011100000000000000000010111110000111111111011101110100111100111110", 
    40 => "10100000000000000000000011000111111111111111011101001101010101010011", 41 => "10100100000000000000000011010010000111111111011100100110111101101001", 42 => "10101000000000000000000011011100011111111111011100000001110111111110", 43 => "10101100000000000000000011100111000111111111011011011110000110010011", 
    44 => "10110000000000000000000011110001111111111111011010111011101010101000", 45 => "10110100000000000000000011111101000111111111011010011010100110111110", 46 => "10111000000000000000000100001000011111111111011001111010111101010011", 47 => "10111100000000000000000100010100000111111111011001011100101111101000", 
    48 => "11000000000000000000000100011111111111111111011000111111111111111110", 49 => "11000100000000000000000100101100000111111111011000100100110000010011", 50 => "11001000000000000000000100111000011111111111011000001011000010101000", 51 => "11001100000000000000000101000101000111111111010111110010111000111101", 
    52 => "11010000000000000000000101010001111111111111010111011100010101010011", 53 => "11010100000000000000000101011111000111111111010111000111011001101000", 54 => "11011000000000000000000101101100011111111111010110110100000111111101", 55 => "11011100000000000000000101111010000111111111010110100010100010010010", 
    56 => "11100000000000000000000110000111111111111111010110010010101010101000", 57 => "11100100000000000000000110010110000111111111010110000100100010111101", 58 => "11101000000000000000000110100100011111111111010101111000001101010010", 59 => "11101100000000000000000110110011000111111111010101101101101011100111", 
    60 => "11110000000000000000000111000001111111111111010101100100111111111101", 61 => "11110100000000000000000111010001000111111111010101011110001100010010", 62 => "11111000000000000000000111100000011111111111010101011001010010100111", 63 => "11111100000000000000000111110000000111111111010101010110010100111101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

