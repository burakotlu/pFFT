-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity positDiv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    y : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of positDiv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "positDiv_positDiv,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu3teg-sfvc784-1Q-q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.129500,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=374,HLS_SYN_LUT=672,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sign_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal isZero_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isZero_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_r_fu_271_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sf_r_reg_658 : STD_LOGIC_VECTOR (6 downto 0);
    signal sf_r_3_fu_332_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal mantissa_fu_351_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sf_r_1_reg_132 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln697_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal regime_1_reg_141 : STD_LOGIC_VECTOR (4 downto 0);
    signal mantissa_1_reg_152 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_mantissa_fu_203_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_sign_fu_163_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_sign_fu_183_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_isZero_fu_167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_isZero_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_227_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_exponent_fu_175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_x_fu_237_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_249_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_exponent_fu_195_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_y_fu_259_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln693_fu_245_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln694_fu_267_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_277_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_291_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_6_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_r_2_fu_327_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln709_fu_339_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln710_fu_323_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1_fu_343_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_2_fu_369_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln729_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal regime_2_fu_383_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln736_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln736_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal SREG_fu_423_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal REM_fu_431_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_443_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln744_fu_463_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln744_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln744_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln744_fu_477_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal exponent_fu_459_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln744_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln732_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln733_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln732_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln733_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal regime_3_fu_513_p7 : STD_LOGIC_VECTOR (4 downto 0);
    signal regime_3_fu_513_p8 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln738_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln738_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln738_1_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln739_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln738_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln739_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exponent_2_fu_565_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal exponent_2_fu_565_p7 : STD_LOGIC_VECTOR (0 downto 0);
    signal exponent_2_fu_565_p8 : STD_LOGIC_VECTOR (1 downto 0);
    signal exponent_2_fu_565_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln749_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal regime_3_fu_513_p9 : STD_LOGIC_VECTOR (4 downto 0);
    signal mantissa_2_fu_596_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal exponent_3_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln749_fu_608_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sign_1_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln758_1_fu_615_p10 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_309_ap_start : STD_LOGIC;
    signal grp_fu_309_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal grp_fu_309_p10 : STD_LOGIC_VECTOR (24 downto 0);
    signal regime_3_fu_513_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal regime_3_fu_513_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal regime_3_fu_513_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal exponent_2_fu_565_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal exponent_2_fu_565_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal exponent_2_fu_565_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component positDiv_udiv_25ns_13ns_25_29_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component positDiv_sparsemux_7_2_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        def : IN STD_LOGIC_VECTOR (4 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component positDiv_sparsemux_7_2_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        def : IN STD_LOGIC_VECTOR (0 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    udiv_25ns_13ns_25_29_seq_1_U1 : component positDiv_udiv_25ns_13ns_25_29_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 13,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_309_ap_start,
        done => grp_fu_309_ap_done,
        din0 => grp_fu_309_p0,
        din1 => grp_fu_309_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    sparsemux_7_2_5_1_1_U2 : component positDiv_sparsemux_7_2_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "10",
        din0_WIDTH => 5,
        CASE1 => "01",
        din1_WIDTH => 5,
        CASE2 => "00",
        din2_WIDTH => 5,
        def_WIDTH => 5,
        sel_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => ap_const_lv5_E,
        din1 => ap_const_lv5_12,
        din2 => regime_2_fu_383_p3,
        def => regime_3_fu_513_p7,
        sel => regime_3_fu_513_p8,
        dout => regime_3_fu_513_p9);

    sparsemux_7_2_1_1_1_U3 : component positDiv_sparsemux_7_2_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "10",
        din0_WIDTH => 1,
        CASE1 => "01",
        din1_WIDTH => 1,
        CASE2 => "00",
        din2_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => exponent_fu_459_p1,
        din2 => exponent_2_fu_565_p6,
        def => exponent_2_fu_565_p7,
        sel => exponent_2_fu_565_p8,
        dout => exponent_2_fu_565_p9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    mantissa_1_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln697_fu_285_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mantissa_1_reg_152 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                mantissa_1_reg_152 <= mantissa_fu_351_p3;
            end if; 
        end if;
    end process;

    regime_1_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln697_fu_285_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                regime_1_reg_141 <= ap_const_lv5_12;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                regime_1_reg_141 <= sf_r_3_fu_332_p3(5 downto 1);
            end if; 
        end if;
    end process;

    sf_r_1_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln697_fu_285_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_r_1_reg_132 <= sf_r_fu_271_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                sf_r_1_reg_132 <= sf_r_3_fu_332_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                isZero_reg_650 <= isZero_fu_221_p2;
                sf_r_reg_658 <= sf_r_fu_271_p2;
                sign_reg_645 <= sign_fu_215_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln697_fu_285_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln697_fu_285_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                elsif (((icmp_ln697_fu_285_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    REM_fu_431_p2 <= std_logic_vector(signed(ap_const_lv5_10) - signed(SREG_fu_423_p3));
    SREG_fu_423_p3 <= 
        sub_ln736_fu_417_p2 when (tmp_7_fu_403_p3(0) = '1') else 
        add_ln736_fu_411_p2;
    add_ln736_fu_411_p2 <= std_logic_vector(unsigned(regime_2_fu_383_p3) + unsigned(ap_const_lv5_3));
    and_ln733_fu_499_p2 <= (xor_ln732_fu_493_p2 and icmp_ln733_fu_397_p2);
    and_ln739_fu_551_p2 <= (xor_ln738_fu_545_p2 and icmp_ln739_fu_453_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln758_1_fu_615_p10),64));
    exponent_2_fu_565_p6 <= (xor_ln744_fu_481_p2 and exponent_fu_459_p1);
    exponent_2_fu_565_p7 <= "X";
    exponent_2_fu_565_p8 <= (or_ln738_1_fu_539_p2 & and_ln739_fu_551_p2);
    exponent_3_fu_590_p2 <= (xor_ln749_fu_585_p2 and exponent_2_fu_565_p9);
    exponent_fu_459_p1 <= sf_r_1_reg_132(1 - 1 downto 0);

    grp_fu_309_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln697_fu_285_p2)
    begin
        if (((icmp_ln697_fu_285_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_309_ap_start <= ap_const_logic_1;
        else 
            grp_fu_309_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_309_p0 <= (tmp_3_fu_291_p4 & ap_const_lv12_0);
    grp_fu_309_p1 <= grp_fu_309_p10(13 - 1 downto 0);
    grp_fu_309_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_mantissa_fu_203_p3),25));
    icmp_ln697_fu_285_p2 <= "1" when (tmp_fu_277_p3 = ap_const_lv2_2) else "0";
    icmp_ln729_fu_377_p2 <= "1" when (tmp_2_fu_369_p3 = ap_const_lv2_2) else "0";
    icmp_ln732_fu_391_p2 <= "1" when (signed(regime_2_fu_383_p3) > signed(ap_const_lv5_D)) else "0";
    icmp_ln733_fu_397_p2 <= "1" when (signed(regime_2_fu_383_p3) < signed(ap_const_lv5_12)) else "0";
    icmp_ln738_fu_437_p2 <= "1" when (SREG_fu_423_p3 = ap_const_lv5_10) else "0";
    icmp_ln739_fu_453_p2 <= "0" when (tmp_8_fu_443_p4 = ap_const_lv4_0) else "1";
    isZero_fu_221_p2 <= (y_isZero_fu_187_p3 or x_isZero_fu_167_p3);
    mantissa_2_fu_596_p3 <= 
        ap_const_lv13_0 when (isZero_reg_650(0) = '1') else 
        mantissa_1_reg_152;
    mantissa_fu_351_p3 <= 
        trunc_ln710_fu_323_p1 when (tmp_6_fu_315_p3(0) = '1') else 
        shl_ln1_fu_343_p3;
    or_ln738_1_fu_539_p2 <= (or_ln738_fu_533_p2 or icmp_ln732_fu_391_p2);
    or_ln738_fu_533_p2 <= (icmp_ln738_fu_437_p2 or icmp_ln733_fu_397_p2);
    or_ln758_1_fu_615_p10 <= ((((((((mantissa_2_fu_596_p3 & ap_const_lv15_0) & exponent_3_fu_590_p2) & ap_const_lv3_0) & select_ln749_fu_608_p3) & ap_const_lv15_0) & isZero_reg_650) & ap_const_lv7_0) & sign_1_fu_603_p2);
    regime_2_fu_383_p3 <= 
        ap_const_lv5_12 when (icmp_ln729_fu_377_p2(0) = '1') else 
        regime_1_reg_141;
    regime_3_fu_513_p7 <= "XXXXX";
    regime_3_fu_513_p8 <= (icmp_ln732_fu_391_p2 & and_ln733_fu_499_p2);
    select_ln749_fu_608_p3 <= 
        ap_const_lv5_0 when (isZero_reg_650(0) = '1') else 
        regime_3_fu_513_p9;
        sext_ln693_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sf_x_fu_237_p3),7));

        sext_ln694_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sf_y_fu_259_p3),7));

        sext_ln744_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(REM_fu_431_p2),15));

    sf_r_2_fu_327_p2 <= std_logic_vector(unsigned(sf_r_reg_658) + unsigned(ap_const_lv7_7F));
    sf_r_3_fu_332_p3 <= 
        sf_r_reg_658 when (tmp_6_fu_315_p3(0) = '1') else 
        sf_r_2_fu_327_p2;
    sf_r_fu_271_p2 <= std_logic_vector(signed(sext_ln693_fu_245_p1) - signed(sext_ln694_fu_267_p1));
    sf_x_fu_237_p3 <= (tmp_s_fu_227_p4 & x_exponent_fu_175_p3);
    sf_y_fu_259_p3 <= (tmp_1_fu_249_p4 & y_exponent_fu_195_p3);
    shl_ln1_fu_343_p3 <= (trunc_ln709_fu_339_p1 & ap_const_lv1_0);
    shl_ln744_fu_471_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & zext_ln744_fu_467_p1(31-1 downto 0)))));
    sign_1_fu_603_p2 <= (xor_ln749_fu_585_p2 and sign_reg_645);
    sign_fu_215_p2 <= (y_sign_fu_183_p1 xor x_sign_fu_163_p1);
    sub_ln736_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) - unsigned(regime_2_fu_383_p3));
    tmp_1_fu_249_p4 <= y(28 downto 24);
    tmp_2_fu_369_p3 <= sf_r_1_reg_132(6 downto 5);
    tmp_3_fu_291_p4 <= x(60 downto 48);
    tmp_6_fu_315_p3 <= grp_fu_309_p2(12 downto 12);
    tmp_7_fu_403_p3 <= regime_2_fu_383_p3(4 downto 4);
    tmp_8_fu_443_p4 <= REM_fu_431_p2(4 downto 1);
    tmp_fu_277_p3 <= sf_r_fu_271_p2(6 downto 5);
    tmp_s_fu_227_p4 <= x(28 downto 24);
    trunc_ln709_fu_339_p1 <= grp_fu_309_p2(12 - 1 downto 0);
    trunc_ln710_fu_323_p1 <= grp_fu_309_p2(13 - 1 downto 0);
    trunc_ln744_fu_477_p1 <= shl_ln744_fu_471_p2(1 - 1 downto 0);
    x_exponent_fu_175_p3 <= x(32 downto 32);
    x_isZero_fu_167_p3 <= x(8 downto 8);
    x_sign_fu_163_p1 <= x(1 - 1 downto 0);
    xor_ln732_fu_493_p2 <= (icmp_ln732_fu_391_p2 xor ap_const_lv1_1);
    xor_ln738_fu_545_p2 <= (or_ln738_1_fu_539_p2 xor ap_const_lv1_1);
    xor_ln744_fu_481_p2 <= (trunc_ln744_fu_477_p1 xor ap_const_lv1_1);
    xor_ln749_fu_585_p2 <= (isZero_reg_650 xor ap_const_lv1_1);
    y_exponent_fu_195_p3 <= y(32 downto 32);
    y_isZero_fu_187_p3 <= y(8 downto 8);
    y_mantissa_fu_203_p3 <= y(60 downto 48);
    y_sign_fu_183_p1 <= y(1 - 1 downto 0);
    zext_ln744_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln744_fu_463_p1),32));
end behav;
