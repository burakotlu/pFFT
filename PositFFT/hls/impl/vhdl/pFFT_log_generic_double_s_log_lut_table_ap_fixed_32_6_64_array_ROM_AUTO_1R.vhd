-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pFFT_log_generic_double_s_log_lut_table_ap_fixed_32_6_64_array_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 58; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pFFT_log_generic_double_s_log_lut_table_ap_fixed_32_6_64_array_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000000000000000000000000000000000000000000000000", 1 => "0000010000000000000000000000000000000000000001111111111111", 2 => "0000100000000000000000000000000000000000000111111111111111", 3 => "0000110000000000000000000000000000000000010001111111111111", 
    4 => "0001000000000000000000000000000000000000011111111111111111", 5 => "0001010000000000000000000000000000000000110001111111111111", 6 => "0001100000000000000000000000000000000001000111111111111111", 7 => "0001110000000000000000000000000000000001100001111111111111", 
    8 => "0010000000000000000000000000000000000001111111111111111111", 9 => "0010010000000000000000000000000000000010100001111111111111", 10 => "0010100000000000000000000000000000000011000111111111111111", 11 => "0010110000000000000000000000000000000011110001111111111111", 
    12 => "0011000000000000000000000000000000000100011111111111111111", 13 => "0011010000000000000000000000000000000101010001111111111111", 14 => "0011100000000000000000000000000000000110000111111111111111", 15 => "0011110000000000000000000000000000000111000001111111111111", 
    16 => "0100000000000000000000000000000000000111111111111111111111", 17 => "0100010000000000000000000000000000001001000001111111111111", 18 => "0100100000000000000000000000000000001010000111111111111111", 19 => "0100110000000000000000000000000000001011010001111111111111", 
    20 => "0101000000000000000000000000000000001100011111111111111111", 21 => "0101010000000000000000000000000000001101110001111111111111", 22 => "0101100000000000000000000000000000001111000111111111111111", 23 => "0101110000000000000000000000000000010000100001111111111111", 
    24 => "0110000000000000000000000000000000010001111111111111111111", 25 => "0110010000000000000000000000000000010011100001111111111111", 26 => "0110100000000000000000000000000000010101000111111111111111", 27 => "0110110000000000000000000000000000010110110001111111111111", 
    28 => "0111000000000000000000000000000000011000011111111111111111", 29 => "0111010000000000000000000000000000011010010001111111111111", 30 => "0111100000000000000000000000000000011100000111111111111111", 31 => "0111110000000000000000000000000000011110000001111111111111", 
    32 => "1000000000000000000000000000000000011111111111111111111111", 33 => "1000010000000000000000000000000000100010000001111111111111", 34 => "1000100000000000000000000000000000100100000111111111111111", 35 => "1000110000000000000000000000000000100110010001111111111111", 
    36 => "1001000000000000000000000000000000101000011111111111111111", 37 => "1001010000000000000000000000000000101010110001111111111111", 38 => "1001100000000000000000000000000000101101000111111111111111", 39 => "1001110000000000000000000000000000101111100001111111111111", 
    40 => "1010000000000000000000000000000000110001111111111111111111", 41 => "1010010000000000000000000000000000110100100001111111111111", 42 => "1010100000000000000000000000000000110111000111111111111111", 43 => "1010110000000000000000000000000000111001110001111111111111", 
    44 => "1011000000000000000000000000000000111100011111111111111111", 45 => "1011010000000000000000000000000000111111010001111111111111", 46 => "1011100000000000000000000000000001000010000111111111111111", 47 => "1011110000000000000000000000000001000101000001111111111111", 
    48 => "1100000000000000000000000000000001000111111111111111111111", 49 => "1100010000000000000000000000000001001011000001111111111111", 50 => "1100100000000000000000000000000001001110000111111111111111", 51 => "1100110000000000000000000000000001010001010001111111111111", 
    52 => "1101000000000000000000000000000001010100011111111111111111", 53 => "1101010000000000000000000000000001010111110001111111111111", 54 => "1101100000000000000000000000000001011011000111111111111111", 55 => "1101110000000000000000000000000001011110100001111111111111", 
    56 => "1110000000000000000000000000000001100001111111111111111111", 57 => "1110010000000000000000000000000001100101100001111111111111", 58 => "1110100000000000000000000000000001101001000111111111111111", 59 => "1110110000000000000000000000000001101100110001111111111111", 
    60 => "1111000000000000000000000000000001110000011111111111111111", 61 => "1111010000000000000000000000000001110100010001111111111111", 62 => "1111100000000000000000000000000001111000000111111111111111", 63 => "1111110000000000000000000000000001111100000001111111111111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

