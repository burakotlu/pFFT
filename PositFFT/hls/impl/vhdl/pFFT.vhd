-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pFFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    signal_r : IN STD_LOGIC_VECTOR (39 downto 0);
    result_real_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_real_ce0 : OUT STD_LOGIC;
    result_real_we0 : OUT STD_LOGIC;
    result_real_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    result_imag_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    result_imag_ce0 : OUT STD_LOGIC;
    result_imag_we0 : OUT STD_LOGIC;
    result_imag_d0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of pFFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pFFT_pFFT,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu7ev-fbvb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.722579,HLS_SYN_LAT=40449,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=34330,HLS_SYN_LUT=45243,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal signal_r_read_reg_267 : STD_LOGIC_VECTOR (39 downto 0);
    signal k_1_reg_272 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln1373_fu_177_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1373_reg_281 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_pAccumulateFC_fu_116_ap_start : STD_LOGIC;
    signal grp_pAccumulateFC_fu_116_ap_done : STD_LOGIC;
    signal grp_pAccumulateFC_fu_116_ap_idle : STD_LOGIC;
    signal grp_pAccumulateFC_fu_116_ap_ready : STD_LOGIC;
    signal grp_pAccumulateFC_fu_116_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_7 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_8 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_return_9 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_pAccumulateFC_fu_116_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln1366_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_80 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln1366_fu_166_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1366_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_real_we0_local : STD_LOGIC;
    signal or_ln1375_4_fu_226_p7 : STD_LOGIC_VECTOR (39 downto 0);
    signal result_real_ce0_local : STD_LOGIC;
    signal result_imag_we0_local : STD_LOGIC;
    signal or_ln1376_4_fu_243_p7 : STD_LOGIC_VECTOR (39 downto 0);
    signal result_imag_ce0_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pFFT_pAccumulateFC IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read : IN STD_LOGIC_VECTOR (39 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (29 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    grp_pAccumulateFC_fu_116 : component pFFT_pAccumulateFC
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pAccumulateFC_fu_116_ap_start,
        ap_done => grp_pAccumulateFC_fu_116_ap_done,
        ap_idle => grp_pAccumulateFC_fu_116_ap_idle,
        ap_ready => grp_pAccumulateFC_fu_116_ap_ready,
        k => trunc_ln1373_reg_281,
        p_read => signal_r_read_reg_267,
        ap_return_0 => grp_pAccumulateFC_fu_116_ap_return_0,
        ap_return_1 => grp_pAccumulateFC_fu_116_ap_return_1,
        ap_return_2 => grp_pAccumulateFC_fu_116_ap_return_2,
        ap_return_3 => grp_pAccumulateFC_fu_116_ap_return_3,
        ap_return_4 => grp_pAccumulateFC_fu_116_ap_return_4,
        ap_return_5 => grp_pAccumulateFC_fu_116_ap_return_5,
        ap_return_6 => grp_pAccumulateFC_fu_116_ap_return_6,
        ap_return_7 => grp_pAccumulateFC_fu_116_ap_return_7,
        ap_return_8 => grp_pAccumulateFC_fu_116_ap_return_8,
        ap_return_9 => grp_pAccumulateFC_fu_116_ap_return_9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pAccumulateFC_fu_116_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pAccumulateFC_fu_116_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_pAccumulateFC_fu_116_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pAccumulateFC_fu_116_ap_ready = ap_const_logic_1)) then 
                    grp_pAccumulateFC_fu_116_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_fu_80 <= ap_const_lv7_0;
            elsif (((icmp_ln1366_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_fu_80 <= add_ln1366_fu_166_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_1_reg_272 <= k_fu_80;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                signal_r_read_reg_267 <= signal_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln1373_reg_281 <= trunc_ln1373_fu_177_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_pAccumulateFC_fu_116_ap_done, ap_CS_fsm_state4, icmp_ln1366_fu_160_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1366_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pAccumulateFC_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1366_fu_166_p2 <= std_logic_vector(unsigned(k_fu_80) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_pAccumulateFC_fu_116_ap_done)
    begin
        if ((grp_pAccumulateFC_fu_116_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln1366_fu_160_p2)
    begin
        if (((icmp_ln1366_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln1366_fu_160_p2)
    begin
        if (((icmp_ln1366_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_pAccumulateFC_fu_116_ap_start <= grp_pAccumulateFC_fu_116_ap_start_reg;
    icmp_ln1366_fu_160_p2 <= "1" when (k_fu_80 = ap_const_lv7_40) else "0";
    or_ln1375_4_fu_226_p7 <= (((((grp_pAccumulateFC_fu_116_ap_return_4 & grp_pAccumulateFC_fu_116_ap_return_3) & grp_pAccumulateFC_fu_116_ap_return_2) & ap_const_lv1_0) & grp_pAccumulateFC_fu_116_ap_return_1) & grp_pAccumulateFC_fu_116_ap_return_0);
    or_ln1376_4_fu_243_p7 <= (((((grp_pAccumulateFC_fu_116_ap_return_9 & grp_pAccumulateFC_fu_116_ap_return_8) & grp_pAccumulateFC_fu_116_ap_return_7) & ap_const_lv1_0) & grp_pAccumulateFC_fu_116_ap_return_6) & grp_pAccumulateFC_fu_116_ap_return_5);
    result_imag_address0 <= zext_ln1366_fu_181_p1(6 - 1 downto 0);
    result_imag_ce0 <= result_imag_ce0_local;

    result_imag_ce0_local_assign_proc : process(grp_pAccumulateFC_fu_116_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_pAccumulateFC_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            result_imag_ce0_local <= ap_const_logic_1;
        else 
            result_imag_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    result_imag_d0 <= or_ln1376_4_fu_243_p7;
    result_imag_we0 <= result_imag_we0_local;

    result_imag_we0_local_assign_proc : process(grp_pAccumulateFC_fu_116_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_pAccumulateFC_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            result_imag_we0_local <= ap_const_logic_1;
        else 
            result_imag_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    result_real_address0 <= zext_ln1366_fu_181_p1(6 - 1 downto 0);
    result_real_ce0 <= result_real_ce0_local;

    result_real_ce0_local_assign_proc : process(grp_pAccumulateFC_fu_116_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_pAccumulateFC_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            result_real_ce0_local <= ap_const_logic_1;
        else 
            result_real_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    result_real_d0 <= or_ln1375_4_fu_226_p7;
    result_real_we0 <= result_real_we0_local;

    result_real_we0_local_assign_proc : process(grp_pAccumulateFC_fu_116_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_pAccumulateFC_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            result_real_we0_local <= ap_const_logic_1;
        else 
            result_real_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1373_fu_177_p1 <= k_1_reg_272(6 - 1 downto 0);
    zext_ln1366_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_272),64));
end behav;
