-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pFFT_log_generic_double_s_log_lut_table_ap_fixed_102_12_ap_q_mode_5_ap_o_mode_3_0_bkb is 
    generic(
             DataWidth     : integer := 86; 
             AddressWidth     : integer := 4; 
             AddressRange    : integer := 16
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of pFFT_log_generic_double_s_log_lut_table_ap_fixed_102_12_ap_q_mode_5_ap_o_mode_3_0_bkb is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 1 => "00010000000000000000000101010101010101011000100010001000100100011010110100011100100110", 2 => "00100000000100000001001010111110110000110010111110001101101011000011010001000000100111", 3 => "00110000001100000101010010011101001110110010101000011000101110111000000100100011111011", 
    4 => "01000000011000001110011110110011111110011000001001000110010111100101101011101000000000", 5 => "01010000101000011110110100101010000100110111110011011000101101110110110000110000001100", 6 => "01100000111100111000011010001100000011101111001110010001100001010011110010010110011010", 7 => "01110001010101011101010111001101100000011101010100110110000110010011000001111011100000", 
    8 => "01111001100011010100110001011010101111010110111111111111110100000010011011011001001110", 9 => "10001010000010001110110011111001101001001110011001011101000111101110001111000111010011", 10 => "10011010100101011001101000100110110100111000011000101110011101010010101011110001010101", 11 => "10101011001100110111011101001011110110011110001110000110000000100111101111110011101110", 
    12 => "10111011111000101010100001000001000100001001111011111011101001100101000110110000010000", 13 => "11001100101000110101000101001111011010000101111001010011010001101110100001111011000001", 14 => "11011101011101011001011100110010010000110100110000011010011011111101001111000001010000", 15 => "11101110010110011001111100011001010110000101101010010101110101010000101010000011000000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

