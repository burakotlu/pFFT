// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dFFT_dFFT,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu7ev-fbvb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.568400,HLS_SYN_LAT=3073089,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3370,HLS_SYN_LUT=4479,HLS_VERSION=2024_2}" *)

module dFFT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        signal_r,
        result_real_address0,
        result_real_ce0,
        result_real_we0,
        result_real_d0,
        result_imag_address0,
        result_imag_ce0,
        result_imag_we0,
        result_imag_d0
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_state2 = 65'd2;
parameter    ap_ST_fsm_state3 = 65'd4;
parameter    ap_ST_fsm_state4 = 65'd8;
parameter    ap_ST_fsm_state5 = 65'd16;
parameter    ap_ST_fsm_state6 = 65'd32;
parameter    ap_ST_fsm_state7 = 65'd64;
parameter    ap_ST_fsm_state8 = 65'd128;
parameter    ap_ST_fsm_state9 = 65'd256;
parameter    ap_ST_fsm_state10 = 65'd512;
parameter    ap_ST_fsm_state11 = 65'd1024;
parameter    ap_ST_fsm_state12 = 65'd2048;
parameter    ap_ST_fsm_state13 = 65'd4096;
parameter    ap_ST_fsm_state14 = 65'd8192;
parameter    ap_ST_fsm_state15 = 65'd16384;
parameter    ap_ST_fsm_state16 = 65'd32768;
parameter    ap_ST_fsm_state17 = 65'd65536;
parameter    ap_ST_fsm_state18 = 65'd131072;
parameter    ap_ST_fsm_state19 = 65'd262144;
parameter    ap_ST_fsm_state20 = 65'd524288;
parameter    ap_ST_fsm_state21 = 65'd1048576;
parameter    ap_ST_fsm_state22 = 65'd2097152;
parameter    ap_ST_fsm_state23 = 65'd4194304;
parameter    ap_ST_fsm_state24 = 65'd8388608;
parameter    ap_ST_fsm_state25 = 65'd16777216;
parameter    ap_ST_fsm_state26 = 65'd33554432;
parameter    ap_ST_fsm_state27 = 65'd67108864;
parameter    ap_ST_fsm_state28 = 65'd134217728;
parameter    ap_ST_fsm_state29 = 65'd268435456;
parameter    ap_ST_fsm_state30 = 65'd536870912;
parameter    ap_ST_fsm_state31 = 65'd1073741824;
parameter    ap_ST_fsm_state32 = 65'd2147483648;
parameter    ap_ST_fsm_state33 = 65'd4294967296;
parameter    ap_ST_fsm_state34 = 65'd8589934592;
parameter    ap_ST_fsm_state35 = 65'd17179869184;
parameter    ap_ST_fsm_state36 = 65'd34359738368;
parameter    ap_ST_fsm_state37 = 65'd68719476736;
parameter    ap_ST_fsm_state38 = 65'd137438953472;
parameter    ap_ST_fsm_state39 = 65'd274877906944;
parameter    ap_ST_fsm_state40 = 65'd549755813888;
parameter    ap_ST_fsm_state41 = 65'd1099511627776;
parameter    ap_ST_fsm_state42 = 65'd2199023255552;
parameter    ap_ST_fsm_state43 = 65'd4398046511104;
parameter    ap_ST_fsm_state44 = 65'd8796093022208;
parameter    ap_ST_fsm_state45 = 65'd17592186044416;
parameter    ap_ST_fsm_state46 = 65'd35184372088832;
parameter    ap_ST_fsm_state47 = 65'd70368744177664;
parameter    ap_ST_fsm_state48 = 65'd140737488355328;
parameter    ap_ST_fsm_state49 = 65'd281474976710656;
parameter    ap_ST_fsm_state50 = 65'd562949953421312;
parameter    ap_ST_fsm_state51 = 65'd1125899906842624;
parameter    ap_ST_fsm_state52 = 65'd2251799813685248;
parameter    ap_ST_fsm_state53 = 65'd4503599627370496;
parameter    ap_ST_fsm_state54 = 65'd9007199254740992;
parameter    ap_ST_fsm_state55 = 65'd18014398509481984;
parameter    ap_ST_fsm_state56 = 65'd36028797018963968;
parameter    ap_ST_fsm_state57 = 65'd72057594037927936;
parameter    ap_ST_fsm_state58 = 65'd144115188075855872;
parameter    ap_ST_fsm_state59 = 65'd288230376151711744;
parameter    ap_ST_fsm_state60 = 65'd576460752303423488;
parameter    ap_ST_fsm_state61 = 65'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 65'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 65'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 65'd18446744073709551616;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] signal_r;
output  [5:0] result_real_address0;
output   result_real_ce0;
output   result_real_we0;
output  [63:0] result_real_d0;
output  [5:0] result_imag_address0;
output   result_imag_ce0;
output   result_imag_we0;
output  [63:0] result_imag_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_196_p2;
reg   [63:0] reg_228;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire   [63:0] grp_fu_179_p2;
reg   [63:0] reg_234;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state54;
wire   [63:0] grp_fu_185_p2;
reg   [63:0] reg_240;
reg   [0:0] and_ln816_reg_587;
reg   [0:0] and_ln819_reg_593;
reg   [63:0] reg_244;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state60;
wire   [63:0] grp_fu_202_p2;
reg   [63:0] reg_250;
wire   [63:0] grp_fu_206_p2;
reg   [63:0] reg_256;
wire   [63:0] empty_fu_262_p1;
reg   [63:0] empty_reg_510;
wire   [6:0] add_ln1295_fu_280_p2;
reg   [6:0] add_ln1295_reg_521;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_225_p1;
reg   [63:0] conv_i_reg_531;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln1295_fu_295_p1;
reg   [63:0] zext_ln1295_reg_536;
wire   [6:0] add_ln1214_fu_304_p2;
reg   [6:0] add_ln1214_reg_545;
wire    ap_CS_fsm_state18;
wire   [63:0] grp_generic_fmod_double_s_fu_173_ap_return;
reg   [63:0] angle_assign_reg_550;
wire    ap_CS_fsm_state19;
reg   [63:0] angle_reg_560;
wire    ap_CS_fsm_state22;
wire   [0:0] grp_fu_213_p2;
reg   [0:0] tmp_1_reg_565;
wire   [0:0] grp_fu_218_p2;
reg   [0:0] tmp_3_reg_570;
wire   [63:0] angle_assign_9_fu_376_p3;
reg   [63:0] angle_assign_9_reg_575;
wire    ap_CS_fsm_state25;
wire   [0:0] and_ln816_fu_421_p2;
wire    ap_CS_fsm_state26;
wire   [0:0] and_ln819_fu_427_p2;
wire   [63:0] empty_15_fu_433_p3;
reg   [63:0] empty_15_reg_599;
wire   [63:0] term1_fu_447_p3;
reg   [63:0] term1_reg_604;
wire    ap_CS_fsm_state32;
wire   [63:0] realPart_fu_494_p3;
reg   [63:0] realSum_reg_616;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state65;
wire    grp_generic_fmod_double_s_fu_173_ap_start;
wire    grp_generic_fmod_double_s_fu_173_ap_done;
wire    grp_generic_fmod_double_s_fu_173_ap_idle;
wire    grp_generic_fmod_double_s_fu_173_ap_ready;
reg   [6:0] n_reg_126;
reg   [63:0] empty_13_reg_137;
reg   [63:0] empty_14_reg_149;
reg   [63:0] angle_1_reg_161;
reg    grp_generic_fmod_double_s_fu_173_ap_start_reg;
wire   [0:0] icmp_ln1214_fu_298_p2;
reg   [6:0] k_fu_90;
reg    result_real_we0_local;
wire   [63:0] bitcast_ln1304_fu_310_p1;
reg    result_real_ce0_local;
reg    result_imag_we0_local;
wire   [63:0] bitcast_ln1305_fu_315_p1;
reg    result_imag_ce0_local;
reg   [63:0] grp_fu_179_p0;
reg   [63:0] grp_fu_179_p1;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state61;
reg   [63:0] grp_fu_185_p0;
reg   [63:0] grp_fu_185_p1;
reg   [63:0] grp_fu_196_p0;
reg   [63:0] grp_fu_196_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state38;
reg   [63:0] grp_fu_202_p0;
reg   [63:0] grp_fu_202_p1;
reg   [63:0] grp_fu_206_p0;
reg   [63:0] grp_fu_206_p1;
reg   [63:0] grp_fu_213_p0;
reg   [63:0] grp_fu_213_p1;
wire    ap_CS_fsm_state23;
reg   [63:0] grp_fu_218_p0;
reg   [63:0] grp_fu_218_p1;
wire   [31:0] grp_fu_225_p0;
wire   [5:0] trunc_ln1302_fu_286_p1;
wire   [63:0] bitcast_ln809_fu_324_p1;
wire   [10:0] tmp_fu_327_p4;
wire   [51:0] trunc_ln809_fu_337_p1;
wire   [0:0] icmp_ln809_1_fu_347_p2;
wire   [0:0] icmp_ln809_fu_341_p2;
wire   [0:0] or_ln809_fu_353_p2;
wire   [0:0] and_ln811_fu_364_p2;
wire   [0:0] and_ln809_fu_359_p2;
wire   [63:0] select_ln811_fu_369_p3;
wire   [63:0] bitcast_ln816_fu_386_p1;
wire   [10:0] tmp_4_fu_389_p4;
wire   [51:0] trunc_ln816_fu_399_p1;
wire   [0:0] icmp_ln816_1_fu_409_p2;
wire   [0:0] icmp_ln816_fu_403_p2;
wire   [0:0] or_ln816_fu_415_p2;
wire   [63:0] select_ln1025_fu_441_p3;
wire   [63:0] bitcast_ln856_fu_456_p1;
wire   [0:0] bit_sel_fu_460_p3;
wire   [0:0] xor_ln856_fu_468_p2;
wire   [62:0] trunc_ln856_fu_474_p1;
wire   [63:0] xor_ln_fu_478_p3;
wire   [0:0] or_ln819_fu_490_p2;
wire   [63:0] bitcast_ln856_1_fu_486_p1;
reg   [1:0] grp_fu_179_opcode;
reg    grp_fu_179_ce;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
reg   [1:0] grp_fu_185_opcode;
wire   [0:0] icmp_ln1295_fu_274_p2;
reg   [64:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'd1;
#0 grp_generic_fmod_double_s_fu_173_ap_start_reg = 1'b0;
#0 k_fu_90 = 7'd0;
end

dFFT_generic_fmod_double_s grp_generic_fmod_double_s_fu_173(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_generic_fmod_double_s_fu_173_ap_start),
    .ap_done(grp_generic_fmod_double_s_fu_173_ap_done),
    .ap_idle(grp_generic_fmod_double_s_fu_173_ap_idle),
    .ap_ready(grp_generic_fmod_double_s_fu_173_ap_ready),
    .x(angle_1_reg_161),
    .ap_return(grp_generic_fmod_double_s_fu_173_ap_return)
);

dFFT_dadddsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_5_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_179_p0),
    .din1(grp_fu_179_p1),
    .opcode(grp_fu_179_opcode),
    .ce(grp_fu_179_ce),
    .dout(grp_fu_179_p2)
);

dFFT_dadddsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_5_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_185_p0),
    .din1(grp_fu_185_p1),
    .opcode(grp_fu_185_opcode),
    .ce(1'b1),
    .dout(grp_fu_185_p2)
);

dFFT_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_196_p0),
    .din1(grp_fu_196_p1),
    .ce(1'b1),
    .dout(grp_fu_196_p2)
);

dFFT_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_202_p0),
    .din1(grp_fu_202_p1),
    .ce(1'b1),
    .dout(grp_fu_202_p2)
);

dFFT_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

dFFT_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_213_p0),
    .din1(grp_fu_213_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_213_p2)
);

dFFT_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_218_p0),
    .din1(grp_fu_218_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_218_p2)
);

dFFT_sitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_4_no_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_225_p0),
    .ce(1'b1),
    .dout(grp_fu_225_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_generic_fmod_double_s_fu_173_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln1214_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
            grp_generic_fmod_double_s_fu_173_ap_start_reg <= 1'b1;
        end else if ((grp_generic_fmod_double_s_fu_173_ap_ready == 1'b1)) begin
            grp_generic_fmod_double_s_fu_173_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        angle_1_reg_161 <= angle_reg_560;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        angle_1_reg_161 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        empty_13_reg_137 <= grp_fu_179_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        empty_13_reg_137 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        empty_14_reg_149 <= realSum_reg_616;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        empty_14_reg_149 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_fu_90 <= 7'd0;
    end else if (((icmp_ln1214_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        k_fu_90 <= add_ln1295_reg_521;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        n_reg_126 <= add_ln1214_reg_545;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        n_reg_126 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln1214_reg_545 <= add_ln1214_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln1295_reg_521 <= add_ln1295_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        and_ln816_reg_587 <= and_ln816_fu_421_p2;
        and_ln819_reg_593 <= and_ln819_fu_427_p2;
        empty_15_reg_599[63] <= empty_15_fu_433_p3[63];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        angle_assign_9_reg_575 <= angle_assign_9_fu_376_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        angle_assign_reg_550 <= grp_generic_fmod_double_s_fu_173_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        angle_reg_560 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_i_reg_531 <= grp_fu_225_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_510 <= empty_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        realSum_reg_616 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_228 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_234 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_state31) & (1'd0 == and_ln816_reg_587) & (1'd1 == and_ln819_reg_593)) | ((1'b1 == ap_CS_fsm_state31) & (1'd1 == and_ln816_reg_587)))) begin
        reg_240 <= grp_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state54))) begin
        reg_244 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state37))) begin
        reg_250 <= grp_fu_202_p2;
        reg_256 <= grp_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        term1_reg_604 <= term1_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_1_reg_565 <= grp_fu_213_p2;
        tmp_3_reg_570 <= grp_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        zext_ln1295_reg_536[6 : 0] <= zext_ln1295_fu_295_p1[6 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((grp_generic_fmod_double_s_fu_173_ap_done == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln1295_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1295_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state24) | ((grp_generic_fmod_double_s_fu_173_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        grp_fu_179_ce = 1'b1;
    end else begin
        grp_fu_179_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_fu_179_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state20) | ((icmp_ln1214_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_fu_179_opcode = 2'd0;
    end else begin
        grp_fu_179_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_179_p0 = empty_13_reg_137;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_179_p0 = empty_14_reg_149;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_179_p0 = term1_reg_604;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_179_p0 = 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_179_p0 = empty_15_reg_599;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_179_p0 = angle_assign_reg_550;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_179_p0 = angle_1_reg_161;
    end else begin
        grp_fu_179_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state44))) begin
        grp_fu_179_p1 = reg_244;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_179_p1 = angle_assign_9_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_179_p1 = 64'd13842128706697135391;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_179_p1 = reg_228;
    end else begin
        grp_fu_179_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((1'b1 == ap_CS_fsm_state27) & (1'd0 == and_ln816_reg_587) & (1'd1 == and_ln819_reg_593)) | ((1'b1 == ap_CS_fsm_state27) & (1'd1 == and_ln816_reg_587)))) begin
        grp_fu_185_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_185_opcode = 2'd0;
    end else begin
        grp_fu_185_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_185_p0 = 64'd4607182418800017408;
    end else if (((1'b1 == ap_CS_fsm_state27) & (1'd0 == and_ln816_reg_587) & (1'd1 == and_ln819_reg_593))) begin
        grp_fu_185_p0 = 64'd13837625107069764895;
    end else if (((1'b1 == ap_CS_fsm_state27) & (1'd1 == and_ln816_reg_587))) begin
        grp_fu_185_p0 = 64'd4614253070214989087;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_185_p0 = angle_assign_reg_550;
    end else begin
        grp_fu_185_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_185_p1 = reg_250;
    end else if ((((1'b1 == ap_CS_fsm_state27) & (1'd0 == and_ln816_reg_587) & (1'd1 == and_ln819_reg_593)) | ((1'b1 == ap_CS_fsm_state27) & (1'd1 == and_ln816_reg_587)))) begin
        grp_fu_185_p1 = angle_assign_9_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_185_p1 = 64'd4618756669842359583;
    end else begin
        grp_fu_185_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state49))) begin
        grp_fu_196_p0 = empty_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_196_p0 = reg_256;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_196_p0 = reg_244;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_196_p0 = reg_234;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_196_p0 = reg_228;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_196_p0 = conv_i_reg_531;
    end else begin
        grp_fu_196_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_196_p1 = realPart_fu_494_p3;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_196_p1 = 64'd4593671619917905920;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_196_p1 = 64'd4602678819172646912;
    end else if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_196_p1 = reg_234;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_196_p1 = 64'd4580160821035794432;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_196_p1 = 64'd13842132293034192152;
    end else begin
        grp_fu_196_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_202_p0 = reg_250;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_202_p0 = angle_assign_9_reg_575;
    end else begin
        grp_fu_202_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_202_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_202_p1 = angle_assign_9_reg_575;
    end else begin
        grp_fu_202_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_206_p0 = reg_256;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_206_p0 = term1_fu_447_p3;
    end else begin
        grp_fu_206_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_206_p1 = term1_reg_604;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_206_p1 = term1_fu_447_p3;
    end else begin
        grp_fu_206_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_213_p0 = angle_assign_9_fu_376_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_213_p0 = angle_assign_reg_550;
    end else begin
        grp_fu_213_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_213_p1 = 64'd4609749470587618591;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_213_p1 = 64'd4614253070214989087;
    end else begin
        grp_fu_213_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_218_p0 = angle_assign_9_fu_376_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_218_p0 = angle_assign_reg_550;
    end else begin
        grp_fu_218_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_218_p1 = 64'd13833121507442394399;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_218_p1 = 64'd13837625107069764895;
    end else begin
        grp_fu_218_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        result_imag_ce0_local = 1'b1;
    end else begin
        result_imag_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1214_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        result_imag_we0_local = 1'b1;
    end else begin
        result_imag_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        result_real_ce0_local = 1'b1;
    end else begin
        result_real_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1214_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        result_real_we0_local = 1'b1;
    end else begin
        result_real_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1295_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln1214_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((grp_generic_fmod_double_s_fu_173_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1214_fu_304_p2 = (n_reg_126 + 7'd1);

assign add_ln1295_fu_280_p2 = (k_fu_90 + 7'd1);

assign and_ln809_fu_359_p2 = (tmp_1_reg_565 & or_ln809_fu_353_p2);

assign and_ln811_fu_364_p2 = (tmp_3_reg_570 & or_ln809_fu_353_p2);

assign and_ln816_fu_421_p2 = (or_ln816_fu_415_p2 & grp_fu_213_p2);

assign and_ln819_fu_427_p2 = (or_ln816_fu_415_p2 & grp_fu_218_p2);

assign angle_assign_9_fu_376_p3 = ((and_ln809_fu_359_p2[0:0] == 1'b1) ? reg_234 : select_ln811_fu_369_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign bit_sel_fu_460_p3 = bitcast_ln856_fu_456_p1[64'd63];

assign bitcast_ln1304_fu_310_p1 = empty_14_reg_149;

assign bitcast_ln1305_fu_315_p1 = empty_13_reg_137;

assign bitcast_ln809_fu_324_p1 = angle_assign_reg_550;

assign bitcast_ln816_fu_386_p1 = angle_assign_9_reg_575;

assign bitcast_ln856_1_fu_486_p1 = xor_ln_fu_478_p3;

assign bitcast_ln856_fu_456_p1 = reg_234;

assign empty_15_fu_433_p3 = ((and_ln816_fu_421_p2[0:0] == 1'b1) ? 64'd4614253070214989087 : 64'd13837625107069764895);

assign empty_fu_262_p1 = signal_r;

assign grp_fu_225_p0 = trunc_ln1302_fu_286_p1;

assign grp_generic_fmod_double_s_fu_173_ap_start = grp_generic_fmod_double_s_fu_173_ap_start_reg;

assign icmp_ln1214_fu_298_p2 = ((n_reg_126 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln1295_fu_274_p2 = ((k_fu_90 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln809_1_fu_347_p2 = ((trunc_ln809_fu_337_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln809_fu_341_p2 = ((tmp_fu_327_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln816_1_fu_409_p2 = ((trunc_ln816_fu_399_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln816_fu_403_p2 = ((tmp_4_fu_389_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln809_fu_353_p2 = (icmp_ln809_fu_341_p2 | icmp_ln809_1_fu_347_p2);

assign or_ln816_fu_415_p2 = (icmp_ln816_fu_403_p2 | icmp_ln816_1_fu_409_p2);

assign or_ln819_fu_490_p2 = (and_ln819_reg_593 | and_ln816_reg_587);

assign realPart_fu_494_p3 = ((or_ln819_fu_490_p2[0:0] == 1'b1) ? bitcast_ln856_1_fu_486_p1 : reg_240);

assign result_imag_address0 = zext_ln1295_reg_536;

assign result_imag_ce0 = result_imag_ce0_local;

assign result_imag_d0 = bitcast_ln1305_fu_315_p1;

assign result_imag_we0 = result_imag_we0_local;

assign result_real_address0 = zext_ln1295_reg_536;

assign result_real_ce0 = result_real_ce0_local;

assign result_real_d0 = bitcast_ln1304_fu_310_p1;

assign result_real_we0 = result_real_we0_local;

assign select_ln1025_fu_441_p3 = ((and_ln819_reg_593[0:0] == 1'b1) ? reg_240 : angle_assign_9_reg_575);

assign select_ln811_fu_369_p3 = ((and_ln811_fu_364_p2[0:0] == 1'b1) ? reg_240 : angle_assign_reg_550);

assign term1_fu_447_p3 = ((and_ln816_reg_587[0:0] == 1'b1) ? reg_240 : select_ln1025_fu_441_p3);

assign tmp_4_fu_389_p4 = {{bitcast_ln816_fu_386_p1[62:52]}};

assign tmp_fu_327_p4 = {{bitcast_ln809_fu_324_p1[62:52]}};

assign trunc_ln1302_fu_286_p1 = k_fu_90[5:0];

assign trunc_ln809_fu_337_p1 = bitcast_ln809_fu_324_p1[51:0];

assign trunc_ln816_fu_399_p1 = bitcast_ln816_fu_386_p1[51:0];

assign trunc_ln856_fu_474_p1 = bitcast_ln856_fu_456_p1[62:0];

assign xor_ln856_fu_468_p2 = (bit_sel_fu_460_p3 ^ 1'd1);

assign xor_ln_fu_478_p3 = {{xor_ln856_fu_468_p2}, {trunc_ln856_fu_474_p1}};

assign zext_ln1295_fu_295_p1 = k_fu_90;

always @ (posedge ap_clk) begin
    zext_ln1295_reg_536[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    empty_15_reg_599[62:0] <= 63'b100000000001001000111101011100001010001111010111000010100011111;
end

endmodule //dFFT
