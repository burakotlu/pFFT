// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module pFFT_positMul (
        ap_ready,
        x_sign,
        x_isZero,
        x_regime1,
        x_exponent2,
        x_mantissa,
        y_sign,
        y_isZero,
        y_regime1,
        y_exponent2,
        y_mantissa3,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_rst
);


output   ap_ready;
input  [0:0] x_sign;
input  [0:0] x_isZero;
input  [5:0] x_regime1;
input  [0:0] x_exponent2;
input  [29:0] x_mantissa;
input  [0:0] y_sign;
input  [0:0] y_isZero;
input  [5:0] y_regime1;
input  [0:0] y_exponent2;
input  [29:0] y_mantissa3;
output  [0:0] ap_return_0;
output  [0:0] ap_return_1;
output  [5:0] ap_return_2;
output  [29:0] ap_return_3;
input   ap_rst;

wire   [29:0] mant_fu_120_p0;
wire   [29:0] mant_fu_120_p1;
wire  signed [6:0] sext_ln755_fu_146_p1;
wire  signed [6:0] sext_ln756_fu_154_p1;
wire   [1:0] zext_ln756_fu_150_p1;
wire   [1:0] zext_ln757_fu_158_p1;
wire   [1:0] add_ln757_1_fu_168_p2;
wire   [6:0] zext_ln757_1_fu_174_p1;
wire   [6:0] add_ln757_fu_162_p2;
wire   [6:0] sf_r_fu_178_p2;
wire   [1:0] tmp_fu_188_p3;
wire   [59:0] mant_fu_120_p2;
wire   [5:0] trunc_ln734_fu_184_p1;
wire   [0:0] ovf_fu_202_p3;
wire   [5:0] sf_r_1_fu_210_p2;
wire   [29:0] mantissa_fu_216_p3;
wire   [29:0] mantissa_1_fu_224_p3;
wire   [0:0] icmp_ln771_fu_196_p2;
wire   [5:0] sf_r_3_fu_232_p3;
wire   [5:0] regime_1_fu_248_p3;
wire   [0:0] icmp_ln804_fu_262_p2;
wire   [0:0] isZero_fu_140_p2;
wire   [0:0] icmp_ln803_fu_256_p2;
wire   [0:0] or_ln820_fu_284_p2;
wire   [5:0] select_ln820_fu_276_p3;
wire   [5:0] select_ln804_fu_268_p3;
wire   [0:0] or_ln820_1_fu_306_p2;
wire   [29:0] select_ln820_2_fu_298_p3;
wire   [29:0] mantissa_2_fu_240_p3;
wire   [0:0] sign_fu_134_p2;
wire   [0:0] xor_ln820_fu_320_p2;
wire   [0:0] sign_2_fu_326_p2;
wire   [5:0] regime_fu_290_p3;
wire   [29:0] mantissa_4_fu_312_p3;
wire   [59:0] mant_fu_120_p00;
wire   [59:0] mant_fu_120_p10;
wire    ap_ce_reg;

pFFT_mul_30ns_30ns_60_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 60 ))
mul_30ns_30ns_60_1_1_U105(
    .din0(mant_fu_120_p0),
    .din1(mant_fu_120_p1),
    .dout(mant_fu_120_p2)
);

assign add_ln757_1_fu_168_p2 = (zext_ln756_fu_150_p1 + zext_ln757_fu_158_p1);

assign add_ln757_fu_162_p2 = ($signed(sext_ln755_fu_146_p1) + $signed(sext_ln756_fu_154_p1));

assign ap_ready = 1'b1;

assign icmp_ln804_fu_262_p2 = (($signed(regime_1_fu_248_p3) > $signed(6'd34)) ? 1'b1 : 1'b0);

assign isZero_fu_140_p2 = (y_isZero | x_isZero);

assign mant_fu_120_p00 = y_mantissa3;

assign mant_fu_120_p10 = x_mantissa;

assign mantissa_1_fu_224_p3 = {{mant_fu_120_p2[58:29]}};

assign mantissa_2_fu_240_p3 = ((ovf_fu_202_p3[0:0] == 1'b1) ? mantissa_fu_216_p3 : mantissa_1_fu_224_p3);

assign mantissa_4_fu_312_p3 = ((or_ln820_1_fu_306_p2[0:0] == 1'b1) ? select_ln820_2_fu_298_p3 : mantissa_2_fu_240_p3);

assign mantissa_fu_216_p3 = {{mant_fu_120_p2[59:30]}};

assign or_ln820_1_fu_306_p2 = (isZero_fu_140_p2 | icmp_ln771_fu_196_p2);

assign or_ln820_fu_284_p2 = (isZero_fu_140_p2 | icmp_ln803_fu_256_p2);

assign ovf_fu_202_p3 = mant_fu_120_p2[32'd59];

assign regime_1_fu_248_p3 = ((icmp_ln771_fu_196_p2[0:0] == 1'b1) ? 6'd34 : sf_r_3_fu_232_p3);

assign regime_fu_290_p3 = ((or_ln820_fu_284_p2[0:0] == 1'b1) ? select_ln820_fu_276_p3 : select_ln804_fu_268_p3);

assign select_ln804_fu_268_p3 = ((icmp_ln804_fu_262_p2[0:0] == 1'b1) ? regime_1_fu_248_p3 : 6'd34);

assign select_ln820_2_fu_298_p3 = ((isZero_fu_140_p2[0:0] == 1'b1) ? 30'd0 : 30'd536870912);

assign select_ln820_fu_276_p3 = ((isZero_fu_140_p2[0:0] == 1'b1) ? 6'd0 : 6'd30);

assign sext_ln755_fu_146_p1 = $signed(x_regime1);

assign sext_ln756_fu_154_p1 = $signed(y_regime1);

assign sf_r_1_fu_210_p2 = (trunc_ln734_fu_184_p1 + 6'd1);

assign sf_r_3_fu_232_p3 = ((ovf_fu_202_p3[0:0] == 1'b1) ? sf_r_1_fu_210_p2 : trunc_ln734_fu_184_p1);

assign sf_r_fu_178_p2 = (zext_ln757_1_fu_174_p1 + add_ln757_fu_162_p2);

assign sign_2_fu_326_p2 = (xor_ln820_fu_320_p2 & sign_fu_134_p2);

assign sign_fu_134_p2 = (y_sign ^ x_sign);

assign tmp_fu_188_p3 = {{sf_r_fu_178_p2[6:5]}};

assign trunc_ln734_fu_184_p1 = sf_r_fu_178_p2[5:0];

assign xor_ln820_fu_320_p2 = (isZero_fu_140_p2 ^ 1'd1);

assign zext_ln756_fu_150_p1 = x_exponent2;

assign zext_ln757_1_fu_174_p1 = add_ln757_1_fu_168_p2;

assign zext_ln757_fu_158_p1 = y_exponent2;

assign ap_return_0 = sign_2_fu_326_p2;

assign ap_return_1 = isZero_fu_140_p2;

assign ap_return_2 = regime_fu_290_p3;

assign ap_return_3 = mantissa_4_fu_312_p3;

assign icmp_ln771_fu_196_p2 = ((tmp_fu_188_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln803_fu_256_p2 = (($signed(regime_1_fu_248_p3) > $signed(6'd29)) ? 1'b1 : 1'b0);

assign mant_fu_120_p0 = mant_fu_120_p00;

assign mant_fu_120_p1 = mant_fu_120_p10;

endmodule //pFFT_positMul
