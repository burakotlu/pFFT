// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module pFFT_double2posit (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        div,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        grp_fu_177_p_din0,
        grp_fu_177_p_din1,
        grp_fu_177_p_dout0,
        grp_fu_177_p_ce
);

parameter    ap_ST_fsm_state1 = 62'd1;
parameter    ap_ST_fsm_state2 = 62'd2;
parameter    ap_ST_fsm_state3 = 62'd4;
parameter    ap_ST_fsm_state4 = 62'd8;
parameter    ap_ST_fsm_state5 = 62'd16;
parameter    ap_ST_fsm_state6 = 62'd32;
parameter    ap_ST_fsm_state7 = 62'd64;
parameter    ap_ST_fsm_state8 = 62'd128;
parameter    ap_ST_fsm_state9 = 62'd256;
parameter    ap_ST_fsm_state10 = 62'd512;
parameter    ap_ST_fsm_state11 = 62'd1024;
parameter    ap_ST_fsm_state12 = 62'd2048;
parameter    ap_ST_fsm_state13 = 62'd4096;
parameter    ap_ST_fsm_state14 = 62'd8192;
parameter    ap_ST_fsm_state15 = 62'd16384;
parameter    ap_ST_fsm_state16 = 62'd32768;
parameter    ap_ST_fsm_state17 = 62'd65536;
parameter    ap_ST_fsm_state18 = 62'd131072;
parameter    ap_ST_fsm_state19 = 62'd262144;
parameter    ap_ST_fsm_state20 = 62'd524288;
parameter    ap_ST_fsm_state21 = 62'd1048576;
parameter    ap_ST_fsm_state22 = 62'd2097152;
parameter    ap_ST_fsm_state23 = 62'd4194304;
parameter    ap_ST_fsm_state24 = 62'd8388608;
parameter    ap_ST_fsm_state25 = 62'd16777216;
parameter    ap_ST_fsm_state26 = 62'd33554432;
parameter    ap_ST_fsm_state27 = 62'd67108864;
parameter    ap_ST_fsm_state28 = 62'd134217728;
parameter    ap_ST_fsm_state29 = 62'd268435456;
parameter    ap_ST_fsm_state30 = 62'd536870912;
parameter    ap_ST_fsm_state31 = 62'd1073741824;
parameter    ap_ST_fsm_state32 = 62'd2147483648;
parameter    ap_ST_fsm_state33 = 62'd4294967296;
parameter    ap_ST_fsm_state34 = 62'd8589934592;
parameter    ap_ST_fsm_state35 = 62'd17179869184;
parameter    ap_ST_fsm_state36 = 62'd34359738368;
parameter    ap_ST_fsm_state37 = 62'd68719476736;
parameter    ap_ST_fsm_state38 = 62'd137438953472;
parameter    ap_ST_fsm_state39 = 62'd274877906944;
parameter    ap_ST_fsm_state40 = 62'd549755813888;
parameter    ap_ST_fsm_state41 = 62'd1099511627776;
parameter    ap_ST_fsm_state42 = 62'd2199023255552;
parameter    ap_ST_fsm_state43 = 62'd4398046511104;
parameter    ap_ST_fsm_state44 = 62'd8796093022208;
parameter    ap_ST_fsm_state45 = 62'd17592186044416;
parameter    ap_ST_fsm_state46 = 62'd35184372088832;
parameter    ap_ST_fsm_state47 = 62'd70368744177664;
parameter    ap_ST_fsm_state48 = 62'd140737488355328;
parameter    ap_ST_fsm_state49 = 62'd281474976710656;
parameter    ap_ST_fsm_state50 = 62'd562949953421312;
parameter    ap_ST_fsm_state51 = 62'd1125899906842624;
parameter    ap_ST_fsm_state52 = 62'd2251799813685248;
parameter    ap_ST_fsm_state53 = 62'd4503599627370496;
parameter    ap_ST_fsm_state54 = 62'd9007199254740992;
parameter    ap_ST_fsm_state55 = 62'd18014398509481984;
parameter    ap_ST_fsm_state56 = 62'd36028797018963968;
parameter    ap_ST_fsm_state57 = 62'd72057594037927936;
parameter    ap_ST_fsm_state58 = 62'd144115188075855872;
parameter    ap_ST_fsm_state59 = 62'd288230376151711744;
parameter    ap_ST_fsm_state60 = 62'd576460752303423488;
parameter    ap_ST_fsm_state61 = 62'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 62'd2305843009213693952;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] div;
output  [0:0] ap_return_0;
output  [0:0] ap_return_1;
output  [5:0] ap_return_2;
output  [29:0] ap_return_3;
output  [63:0] grp_fu_177_p_din0;
output  [63:0] grp_fu_177_p_din1;
input  [63:0] grp_fu_177_p_dout0;
output   grp_fu_177_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] ap_return_0;
reg[0:0] ap_return_1;
reg[5:0] ap_return_2;
reg[29:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [61:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] mask_table_address0;
wire   [51:0] mask_table_q0;
wire   [5:0] one_half_table_address0;
wire   [52:0] one_half_table_q0;
wire   [5:0] mask_table_50_address0;
wire   [51:0] mask_table_50_q0;
reg   [63:0] reg_336;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state60;
wire   [63:0] grp_fu_316_p2;
reg   [63:0] reg_341;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state54;
wire   [63:0] bitcast_ln356_fu_346_p1;
reg   [63:0] bitcast_ln356_reg_1249;
wire    ap_CS_fsm_state2;
wire   [0:0] or_ln356_fu_375_p2;
reg   [0:0] or_ln356_reg_1255;
wire   [0:0] and_ln356_fu_381_p2;
reg   [0:0] and_ln356_reg_1260;
wire   [0:0] result_sign_fu_387_p2;
reg   [0:0] result_sign_reg_1264;
wire    ap_CS_fsm_state3;
wire   [63:0] select_ln361_fu_420_p3;
reg   [63:0] select_ln361_reg_1270;
wire   [63:0] grp_log_generic_double_s_fu_282_ap_return;
reg   [63:0] tmp_reg_1276;
wire    ap_CS_fsm_state15;
wire   [63:0] data_3_fu_428_p1;
reg   [63:0] data_3_reg_1281;
wire    ap_CS_fsm_state22;
reg   [10:0] xs_exp_1_reg_1288;
reg   [0:0] xs_sign_reg_1297;
wire   [63:0] zext_ln179_fu_458_p1;
reg   [63:0] zext_ln179_reg_1306;
wire   [63:0] bitcast_ln497_1_fu_476_p1;
reg   [63:0] bitcast_ln497_1_reg_1321;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln170_fu_480_p2;
reg   [0:0] icmp_ln170_reg_1326;
wire   [63:0] retval_0_i_fu_552_p9;
reg   [63:0] retval_0_i_reg_1332;
wire   [63:0] bitcast_ln497_fu_584_p1;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln339_fu_603_p2;
reg   [0:0] icmp_ln339_reg_1343;
wire   [0:0] icmp_ln339_1_fu_609_p2;
reg   [0:0] icmp_ln339_1_reg_1348;
wire    ap_CS_fsm_state30;
wire   [63:0] retval_0_i7_fu_778_p11;
wire    ap_CS_fsm_state31;
wire  signed [6:0] result_fu_929_p3;
reg  signed [6:0] result_reg_1366;
wire    ap_CS_fsm_state32;
reg   [0:0] tmp_171_reg_1373;
wire   [5:0] result_regime_fu_945_p1;
reg   [5:0] result_regime_reg_1378;
wire   [0:0] icmp_ln414_fu_1011_p2;
reg   [0:0] icmp_ln414_reg_1384;
wire    ap_CS_fsm_state33;
wire   [63:0] grp_fu_333_p1;
reg   [63:0] y_assign_reg_1393;
wire    ap_CS_fsm_state36;
wire   [63:0] grp_pow_generic_double_s_fu_305_ap_return;
reg   [63:0] exact_reg_1398;
wire    ap_CS_fsm_state49;
wire   [29:0] mant_part_fu_1201_p3;
reg   [29:0] mant_part_reg_1403;
wire    ap_CS_fsm_state61;
wire   [63:0] grp_log_generic_double_s_fu_282_base_r;
reg   [63:0] fl_reg_217;
wire   [0:0] and_ln339_fu_619_p2;
reg   [5:0] ap_phi_mux_this_regime_write_assign_phi_fu_230_p6;
reg   [5:0] this_regime_write_assign_reg_226;
wire    ap_CS_fsm_state62;
reg   [0:0] ap_phi_mux_this_sign_write_assign_phi_fu_243_p6;
reg   [0:0] this_sign_write_assign_reg_239;
reg   [29:0] ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6;
reg   [29:0] this_mantissa_write_assign_reg_252;
wire   [29:0] mantissa_32_fu_1208_p4;
reg   [0:0] ap_phi_mux_result_isZero_phi_fu_271_p6;
reg   [0:0] result_isZero_reg_266;
wire    ap_CS_fsm_state37;
reg    mask_table_ce0_local;
reg    one_half_table_ce0_local;
reg    mask_table_50_ce0_local;
reg   [63:0] grp_fu_316_p0;
reg   [63:0] grp_fu_316_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state50;
reg   [63:0] grp_fu_320_p0;
reg   [63:0] grp_fu_320_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state55;
reg   [63:0] grp_fu_326_p0;
reg   [63:0] grp_fu_326_p1;
wire  signed [31:0] grp_fu_333_p0;
wire   [10:0] tmp_2_fu_349_p4;
wire   [51:0] trunc_ln356_fu_359_p1;
wire   [0:0] icmp_ln356_1_fu_369_p2;
wire   [0:0] icmp_ln356_fu_363_p2;
wire   [0:0] grp_fu_326_p2;
wire   [0:0] bit_sel_fu_392_p3;
wire   [0:0] xor_ln363_fu_399_p2;
wire   [62:0] trunc_ln363_fu_405_p1;
wire   [63:0] xor_ln_fu_408_p3;
wire   [63:0] bitcast_ln363_fu_416_p1;
wire   [5:0] index_fu_448_p4;
wire   [63:0] t_7_fu_469_p3;
wire   [63:0] zext_ln175_fu_485_p1;
wire   [63:0] data_2_fu_489_p2;
wire   [51:0] trunc_ln467_fu_494_p1;
wire   [51:0] xor_ln184_fu_498_p2;
wire   [11:0] tmp_19_i_fu_510_p4;
wire   [51:0] xs_sig_fu_504_p2;
wire   [63:0] t_8_fu_520_p3;
wire   [0:0] icmp_ln167_fu_464_p2;
wire   [0:0] xor_ln167_fu_532_p2;
wire   [0:0] and_ln170_fu_538_p2;
wire   [63:0] retval_0_i_fu_552_p2;
wire   [63:0] retval_0_i_fu_552_p6;
wire   [63:0] retval_0_i_fu_552_p7;
wire   [1:0] retval_0_i_fu_552_p8;
wire   [63:0] data_fu_572_p1;
wire   [62:0] t_9_fu_576_p1;
wire   [63:0] zext_ln479_fu_580_p1;
wire   [10:0] tmp_6_fu_589_p4;
wire   [51:0] trunc_ln339_fu_599_p1;
wire   [0:0] or_ln339_fu_615_p2;
wire   [62:0] trunc_ln479_fu_637_p1;
wire   [63:0] zext_ln28_fu_633_p1;
wire   [63:0] t_fu_640_p3;
wire   [63:0] data_4_fu_648_p2;
wire   [0:0] xs_sign_1_fu_654_p3;
wire   [10:0] xs_exp_2_fu_662_p3;
wire   [51:0] xs_sig_2_fu_670_p1;
wire   [51:0] xs_sig_1_fu_625_p1;
wire   [51:0] xs_sig_3_fu_685_p3;
wire   [51:0] xor_ln39_fu_692_p2;
wire   [0:0] xs_sign_2_fu_674_p2;
wire   [10:0] xs_exp_4_fu_679_p3;
wire   [51:0] xs_sig_4_fu_698_p2;
wire   [63:0] t_10_fu_704_p4;
wire   [0:0] icmp_ln18_fu_628_p2;
wire   [0:0] xor_ln18_fu_718_p2;
wire   [0:0] or_ln24_fu_729_p2;
wire   [0:0] icmp_ln19_1_fu_746_p2;
wire   [0:0] icmp_ln19_fu_740_p2;
wire   [0:0] or_ln19_fu_751_p2;
wire   [0:0] and_ln19_fu_757_p2;
wire   [0:0] and_ln24_fu_724_p2;
wire   [0:0] xor_ln24_fu_734_p2;
wire   [0:0] and_ln19_1_fu_762_p2;
wire   [63:0] retval_0_i7_fu_778_p4;
wire   [63:0] retval_0_i7_fu_778_p9;
wire   [2:0] retval_0_i7_fu_778_p10;
wire   [63:0] data_5_fu_801_p1;
wire   [51:0] trunc_ln505_fu_821_p1;
wire   [53:0] mantissa_fu_825_p4;
wire   [10:0] xs_exp_fu_813_p3;
wire   [11:0] zext_ln486_fu_839_p1;
wire   [11:0] add_ln486_fu_843_p2;
wire   [10:0] sub_ln18_fu_857_p2;
wire   [0:0] tmp_166_fu_849_p3;
wire  signed [11:0] sext_ln18_fu_863_p1;
wire   [11:0] select_ln18_fu_867_p3;
wire  signed [31:0] sext_ln18_1_fu_875_p1;
wire   [136:0] zext_ln15_fu_835_p1;
wire   [136:0] zext_ln18_fu_879_p1;
wire   [136:0] lshr_ln18_fu_883_p2;
wire   [136:0] shl_ln18_fu_889_p2;
wire   [6:0] tmp_s_fu_895_p4;
wire   [6:0] tmp_24_fu_905_p4;
wire   [6:0] val_fu_915_p3;
wire   [0:0] xs_sign_3_fu_805_p3;
wire   [6:0] result_1_fu_923_p2;
wire   [6:0] zext_ln401_fu_957_p1;
wire   [6:0] add_ln401_fu_961_p2;
wire   [1:0] tmp_173_fu_967_p4;
wire   [0:0] icmp_ln401_fu_977_p2;
wire   [5:0] SREG_fu_983_p2;
wire   [0:0] tmp_172_fu_949_p3;
wire   [5:0] SREG_2_fu_997_p2;
wire   [5:0] SREG_1_fu_989_p3;
wire   [5:0] SREG_3_fu_1003_p3;
wire   [63:0] data_6_fu_1021_p1;
wire   [51:0] trunc_ln505_1_fu_1041_p1;
wire   [53:0] mantissa_30_fu_1045_p4;
wire   [10:0] xs_exp_3_fu_1033_p3;
wire   [11:0] zext_ln486_1_fu_1059_p1;
wire   [11:0] add_ln486_1_fu_1063_p2;
wire   [10:0] sub_ln18_1_fu_1077_p2;
wire   [0:0] tmp_168_fu_1069_p3;
wire  signed [11:0] sext_ln18_2_fu_1083_p1;
wire   [11:0] select_ln18_2_fu_1087_p3;
wire  signed [31:0] sext_ln18_3_fu_1095_p1;
wire   [168:0] zext_ln15_1_fu_1055_p1;
wire   [168:0] zext_ln18_1_fu_1099_p1;
wire   [168:0] lshr_ln18_1_fu_1103_p2;
wire   [168:0] shl_ln18_1_fu_1109_p2;
wire   [36:0] tmp_169_fu_1115_p4;
wire   [36:0] tmp_170_fu_1125_p4;
wire   [36:0] val_1_fu_1135_p3;
wire   [0:0] xs_sign_4_fu_1025_p3;
wire   [36:0] result_4_fu_1143_p2;
wire  signed [31:0] sext_ln381_1_fu_1160_p1;
wire   [36:0] mant_with_sf_fu_1149_p3;
wire   [36:0] zext_ln381_fu_1163_p1;
wire  signed [7:0] sext_ln381_fu_1157_p1;
wire   [7:0] sub_ln381_fu_1173_p2;
wire  signed [31:0] sext_ln381_2_fu_1179_p1;
wire   [36:0] zext_ln381_1_fu_1183_p1;
wire   [36:0] shl_ln381_fu_1187_p2;
wire   [36:0] lshr_ln381_fu_1167_p2;
wire   [29:0] trunc_ln381_fu_1193_p1;
wire   [29:0] trunc_ln381_1_fu_1197_p1;
reg   [4:0] grp_fu_326_opcode;
reg   [0:0] ap_return_0_preg;
reg   [0:0] ap_return_1_preg;
reg   [5:0] ap_return_2_preg;
reg   [29:0] ap_return_3_preg;
reg   [61:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire  signed [1:0] retval_0_i_fu_552_p1;
wire   [1:0] retval_0_i_fu_552_p3;
wire   [1:0] retval_0_i_fu_552_p5;
wire  signed [2:0] retval_0_i7_fu_778_p1;
wire   [2:0] retval_0_i7_fu_778_p3;
wire   [2:0] retval_0_i7_fu_778_p5;
wire   [2:0] retval_0_i7_fu_778_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 62'd1;
#0 ap_return_0_preg = 1'd0;
#0 ap_return_1_preg = 1'd0;
#0 ap_return_2_preg = 6'd0;
#0 ap_return_3_preg = 30'd0;
end

pFFT_double2posit_mask_table_ROM_AUTO_1R #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0_local),
    .q0(mask_table_q0)
);

pFFT_double2posit_one_half_table_ROM_AUTO_1R #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table_address0),
    .ce0(one_half_table_ce0_local),
    .q0(one_half_table_q0)
);

pFFT_double2posit_mask_table_ROM_AUTO_1R #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table_50_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_50_address0),
    .ce0(mask_table_50_ce0_local),
    .q0(mask_table_50_q0)
);

pFFT_log_generic_double_s grp_log_generic_double_s_fu_282(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .base_r(grp_log_generic_double_s_fu_282_base_r),
    .ap_return(grp_log_generic_double_s_fu_282_ap_return)
);

pFFT_pow_generic_double_s grp_pow_generic_double_s_fu_305(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .exp(y_assign_reg_1393),
    .ap_return(grp_pow_generic_double_s_fu_305_ap_return)
);

pFFT_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_316_p0),
    .din1(grp_fu_316_p1),
    .ce(1'b1),
    .dout(grp_fu_316_p2)
);

pFFT_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_326_p0),
    .din1(grp_fu_326_p1),
    .ce(1'b1),
    .opcode(grp_fu_326_opcode),
    .dout(grp_fu_326_p2)
);

pFFT_sitodp_32s_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_4_no_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .ce(1'b1),
    .dout(grp_fu_333_p1)
);

(* dissolve_hierarchy = "yes" *) pFFT_sparsemux_7_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_7_2_64_1_1_U57(
    .din0(retval_0_i_fu_552_p2),
    .din1(reg_336),
    .din2(retval_0_i_fu_552_p6),
    .def(retval_0_i_fu_552_p7),
    .sel(retval_0_i_fu_552_p8),
    .dout(retval_0_i_fu_552_p9)
);

(* dissolve_hierarchy = "yes" *) pFFT_sparsemux_9_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_9_3_64_1_1_U58(
    .din0(reg_336),
    .din1(retval_0_i7_fu_778_p4),
    .din2(64'd13830554455654793216),
    .din3(bitcast_ln497_1_reg_1321),
    .def(retval_0_i7_fu_778_p9),
    .sel(retval_0_i7_fu_778_p10),
    .dout(retval_0_i7_fu_778_p11)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state62)) begin
            ap_return_0_preg <= ap_phi_mux_this_sign_write_assign_phi_fu_243_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state62)) begin
            ap_return_1_preg <= ap_phi_mux_result_isZero_phi_fu_271_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 6'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state62)) begin
            ap_return_2_preg <= ap_phi_mux_this_regime_write_assign_phi_fu_230_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 30'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state62)) begin
            ap_return_3_preg <= ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln339_fu_619_p2) & (1'b1 == ap_CS_fsm_state30))) begin
        fl_reg_217 <= retval_0_i_reg_1332;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        fl_reg_217 <= retval_0_i7_fu_778_p11;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln414_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((1'd0 == and_ln356_reg_1260) & (icmp_ln414_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state62)))) begin
        result_isZero_reg_266 <= 1'd0;
    end else if (((1'd1 == and_ln356_fu_381_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        result_isZero_reg_266 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln356_reg_1260) & (icmp_ln414_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        this_mantissa_write_assign_reg_252 <= mantissa_32_fu_1208_p4;
    end else if ((((icmp_ln414_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((1'd1 == and_ln356_fu_381_p2) & (1'b1 == ap_CS_fsm_state2)))) begin
        this_mantissa_write_assign_reg_252 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln414_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((1'd0 == and_ln356_reg_1260) & (icmp_ln414_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state62)))) begin
        this_regime_write_assign_reg_226 <= result_regime_reg_1378;
    end else if (((1'd1 == and_ln356_fu_381_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        this_regime_write_assign_reg_226 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln414_reg_1384 == 1'd1) & (1'b1 == ap_CS_fsm_state61)) | ((1'd0 == and_ln356_reg_1260) & (icmp_ln414_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state62)))) begin
        this_sign_write_assign_reg_239 <= result_sign_reg_1264;
    end else if (((1'd1 == and_ln356_fu_381_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        this_sign_write_assign_reg_239 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln356_reg_1260 <= and_ln356_fu_381_p2;
        bitcast_ln356_reg_1249 <= bitcast_ln356_fu_346_p1;
        or_ln356_reg_1255 <= or_ln356_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        bitcast_ln497_1_reg_1321[63] <= bitcast_ln497_1_fu_476_p1[63];
        icmp_ln170_reg_1326 <= icmp_ln170_fu_480_p2;
        retval_0_i_reg_1332 <= retval_0_i_fu_552_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        data_3_reg_1281 <= data_3_fu_428_p1;
        xs_exp_1_reg_1288 <= {{data_3_fu_428_p1[62:52]}};
        xs_sign_reg_1297 <= data_3_fu_428_p1[32'd63];
        zext_ln179_reg_1306[5 : 0] <= zext_ln179_fu_458_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        exact_reg_1398 <= grp_pow_generic_double_s_fu_305_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        icmp_ln339_1_reg_1348 <= icmp_ln339_1_fu_609_p2;
        icmp_ln339_reg_1343 <= icmp_ln339_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        icmp_ln414_reg_1384 <= icmp_ln414_fu_1011_p2;
        result_reg_1366 <= result_fu_929_p3;
        result_regime_reg_1378 <= result_regime_fu_945_p1;
        tmp_171_reg_1373 <= result_fu_929_p3[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        mant_part_reg_1403 <= mant_part_fu_1201_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_336 <= grp_fu_177_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_341 <= grp_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_sign_reg_1264 <= result_sign_fu_387_p2;
        select_ln361_reg_1270 <= select_ln361_fu_420_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_reg_1276 <= grp_log_generic_double_s_fu_282_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        y_assign_reg_1393 <= grp_fu_333_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln356_reg_1260) & (icmp_ln414_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        ap_phi_mux_result_isZero_phi_fu_271_p6 = 1'd0;
    end else begin
        ap_phi_mux_result_isZero_phi_fu_271_p6 = result_isZero_reg_266;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln356_reg_1260) & (icmp_ln414_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6 = mantissa_32_fu_1208_p4;
    end else begin
        ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6 = this_mantissa_write_assign_reg_252;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln356_reg_1260) & (icmp_ln414_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        ap_phi_mux_this_regime_write_assign_phi_fu_230_p6 = result_regime_reg_1378;
    end else begin
        ap_phi_mux_this_regime_write_assign_phi_fu_230_p6 = this_regime_write_assign_reg_226;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln356_reg_1260) & (icmp_ln414_reg_1384 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        ap_phi_mux_this_sign_write_assign_phi_fu_243_p6 = result_sign_reg_1264;
    end else begin
        ap_phi_mux_this_sign_write_assign_phi_fu_243_p6 = this_sign_write_assign_reg_239;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        ap_return_0 = ap_phi_mux_this_sign_write_assign_phi_fu_243_p6;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        ap_return_1 = ap_phi_mux_result_isZero_phi_fu_271_p6;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        ap_return_2 = ap_phi_mux_this_regime_write_assign_phi_fu_230_p6;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        ap_return_3 = ap_phi_mux_this_mantissa_write_assign_phi_fu_256_p6;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_316_p0 = select_ln361_reg_1270;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_316_p0 = reg_336;
    end else begin
        grp_fu_316_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_316_p1 = exact_reg_1398;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_316_p1 = retval_0_i_reg_1332;
    end else begin
        grp_fu_316_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_320_p0 = reg_341;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_320_p0 = tmp_reg_1276;
    end else begin
        grp_fu_320_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_320_p1 = 64'd4737786807993761792;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_320_p1 = 64'd4609176140021203710;
    end else begin
        grp_fu_320_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'd0 == and_ln356_fu_381_p2) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_326_opcode = 5'd4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_326_opcode = 5'd1;
    end else begin
        grp_fu_326_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_326_p0 = bitcast_ln497_fu_584_p1;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_326_p0 = div;
    end else begin
        grp_fu_326_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_326_p1 = 64'd4472406533629990549;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_326_p1 = 64'd0;
    end else begin
        grp_fu_326_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        mask_table_50_ce0_local = 1'b1;
    end else begin
        mask_table_50_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        mask_table_ce0_local = 1'b1;
    end else begin
        mask_table_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        one_half_table_ce0_local = 1'b1;
    end else begin
        one_half_table_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'd1 == and_ln356_fu_381_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'd1 == and_ln339_fu_619_p2) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SREG_1_fu_989_p3 = ((icmp_ln401_fu_977_p2[0:0] == 1'b1) ? SREG_fu_983_p2 : 6'd32);

assign SREG_2_fu_997_p2 = (6'd2 - result_regime_fu_945_p1);

assign SREG_3_fu_1003_p3 = ((tmp_172_fu_949_p3[0:0] == 1'b1) ? SREG_2_fu_997_p2 : SREG_1_fu_989_p3);

assign SREG_fu_983_p2 = (result_regime_fu_945_p1 + 6'd3);

assign add_ln401_fu_961_p2 = (zext_ln401_fu_957_p1 + 7'd3);

assign add_ln486_1_fu_1063_p2 = ($signed(zext_ln486_1_fu_1059_p1) + $signed(12'd3073));

assign add_ln486_fu_843_p2 = ($signed(zext_ln486_fu_839_p1) + $signed(12'd3073));

assign and_ln170_fu_538_p2 = (xor_ln167_fu_532_p2 & icmp_ln170_fu_480_p2);

assign and_ln19_1_fu_762_p2 = (icmp_ln18_fu_628_p2 & and_ln19_fu_757_p2);

assign and_ln19_fu_757_p2 = (xs_sign_reg_1297 & or_ln19_fu_751_p2);

assign and_ln24_fu_724_p2 = (xor_ln18_fu_718_p2 & icmp_ln170_reg_1326);

assign and_ln339_fu_619_p2 = (or_ln339_fu_615_p2 & grp_fu_326_p2);

assign and_ln356_fu_381_p2 = (or_ln356_fu_375_p2 & grp_fu_326_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign bit_sel_fu_392_p3 = bitcast_ln356_reg_1249[64'd63];

assign bitcast_ln356_fu_346_p1 = div;

assign bitcast_ln363_fu_416_p1 = xor_ln_fu_408_p3;

assign bitcast_ln497_1_fu_476_p1 = t_7_fu_469_p3;

assign bitcast_ln497_fu_584_p1 = zext_ln479_fu_580_p1;

assign data_2_fu_489_p2 = (zext_ln175_fu_485_p1 + data_3_reg_1281);

assign data_3_fu_428_p1 = reg_336;

assign data_4_fu_648_p2 = (zext_ln28_fu_633_p1 + t_fu_640_p3);

assign data_5_fu_801_p1 = fl_reg_217;

assign data_6_fu_1021_p1 = reg_336;

assign data_fu_572_p1 = reg_341;

assign grp_fu_177_p_ce = 1'b1;

assign grp_fu_177_p_din0 = grp_fu_320_p0;

assign grp_fu_177_p_din1 = grp_fu_320_p1;

assign grp_fu_333_p0 = result_reg_1366;

assign grp_log_generic_double_s_fu_282_base_r = ((result_sign_fu_387_p2[0:0] == 1'b1) ? bitcast_ln363_fu_416_p1 : div);

assign icmp_ln167_fu_464_p2 = ((xs_exp_1_reg_1288 < 11'd1022) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_480_p2 = ((xs_exp_1_reg_1288 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_628_p2 = ((xs_exp_1_reg_1288 < 11'd1023) ? 1'b1 : 1'b0);

assign icmp_ln19_1_fu_746_p2 = ((xs_exp_1_reg_1288 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_740_p2 = ((xs_sig_1_fu_625_p1 != 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln339_1_fu_609_p2 = ((trunc_ln339_fu_599_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln339_fu_603_p2 = ((tmp_6_fu_589_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln356_1_fu_369_p2 = ((trunc_ln356_fu_359_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln356_fu_363_p2 = ((tmp_2_fu_349_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln401_fu_977_p2 = ((tmp_173_fu_967_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_1011_p2 = ((SREG_3_fu_1003_p3 == 6'd32) ? 1'b1 : 1'b0);

assign index_fu_448_p4 = {{data_3_fu_428_p1[57:52]}};

assign lshr_ln18_1_fu_1103_p2 = zext_ln15_1_fu_1055_p1 >> zext_ln18_1_fu_1099_p1;

assign lshr_ln18_fu_883_p2 = zext_ln15_fu_835_p1 >> zext_ln18_fu_879_p1;

assign lshr_ln381_fu_1167_p2 = mant_with_sf_fu_1149_p3 >> zext_ln381_fu_1163_p1;

assign mant_part_fu_1201_p3 = ((tmp_171_reg_1373[0:0] == 1'b1) ? trunc_ln381_fu_1193_p1 : trunc_ln381_1_fu_1197_p1);

assign mant_with_sf_fu_1149_p3 = ((xs_sign_4_fu_1025_p3[0:0] == 1'b1) ? result_4_fu_1143_p2 : val_1_fu_1135_p3);

assign mantissa_30_fu_1045_p4 = {{{{1'd1}, {trunc_ln505_1_fu_1041_p1}}}, {1'd0}};

assign mantissa_32_fu_1208_p4 = {|(1'd1), mant_part_reg_1403[29 - 1:0]};

assign mantissa_fu_825_p4 = {{{{1'd1}, {trunc_ln505_fu_821_p1}}}, {1'd0}};

assign mask_table_50_address0 = zext_ln179_reg_1306;

assign mask_table_address0 = zext_ln179_fu_458_p1;

assign one_half_table_address0 = zext_ln179_fu_458_p1;

assign or_ln19_fu_751_p2 = (icmp_ln19_fu_740_p2 | icmp_ln19_1_fu_746_p2);

assign or_ln24_fu_729_p2 = (icmp_ln18_fu_628_p2 | icmp_ln170_reg_1326);

assign or_ln339_fu_615_p2 = (icmp_ln339_reg_1343 | icmp_ln339_1_reg_1348);

assign or_ln356_fu_375_p2 = (icmp_ln356_fu_363_p2 | icmp_ln356_1_fu_369_p2);

assign result_1_fu_923_p2 = (7'd0 - val_fu_915_p3);

assign result_4_fu_1143_p2 = (37'd0 - val_1_fu_1135_p3);

assign result_fu_929_p3 = ((xs_sign_3_fu_805_p3[0:0] == 1'b1) ? result_1_fu_923_p2 : val_fu_915_p3);

assign result_regime_fu_945_p1 = result_fu_929_p3[5:0];

assign result_sign_fu_387_p2 = (or_ln356_reg_1255 & grp_fu_326_p2);

assign retval_0_i7_fu_778_p10 = {{{and_ln24_fu_724_p2}, {xor_ln24_fu_734_p2}}, {and_ln19_1_fu_762_p2}};

assign retval_0_i7_fu_778_p4 = t_10_fu_704_p4;

assign retval_0_i7_fu_778_p9 = 'bx;

assign retval_0_i_fu_552_p2 = t_7_fu_469_p3;

assign retval_0_i_fu_552_p6 = t_8_fu_520_p3;

assign retval_0_i_fu_552_p7 = 'bx;

assign retval_0_i_fu_552_p8 = {{icmp_ln167_fu_464_p2}, {and_ln170_fu_538_p2}};

assign select_ln18_2_fu_1087_p3 = ((tmp_168_fu_1069_p3[0:0] == 1'b1) ? sext_ln18_2_fu_1083_p1 : add_ln486_1_fu_1063_p2);

assign select_ln18_fu_867_p3 = ((tmp_166_fu_849_p3[0:0] == 1'b1) ? sext_ln18_fu_863_p1 : add_ln486_fu_843_p2);

assign select_ln361_fu_420_p3 = ((result_sign_fu_387_p2[0:0] == 1'b1) ? bitcast_ln363_fu_416_p1 : div);

assign sext_ln18_1_fu_875_p1 = $signed(select_ln18_fu_867_p3);

assign sext_ln18_2_fu_1083_p1 = $signed(sub_ln18_1_fu_1077_p2);

assign sext_ln18_3_fu_1095_p1 = $signed(select_ln18_2_fu_1087_p3);

assign sext_ln18_fu_863_p1 = $signed(sub_ln18_fu_857_p2);

assign sext_ln381_1_fu_1160_p1 = result_reg_1366;

assign sext_ln381_2_fu_1179_p1 = $signed(sub_ln381_fu_1173_p2);

assign sext_ln381_fu_1157_p1 = result_reg_1366;

assign shl_ln18_1_fu_1109_p2 = zext_ln15_1_fu_1055_p1 << zext_ln18_1_fu_1099_p1;

assign shl_ln18_fu_889_p2 = zext_ln15_fu_835_p1 << zext_ln18_fu_879_p1;

assign shl_ln381_fu_1187_p2 = mant_with_sf_fu_1149_p3 << zext_ln381_1_fu_1183_p1;

assign sub_ln18_1_fu_1077_p2 = (11'd1023 - xs_exp_3_fu_1033_p3);

assign sub_ln18_fu_857_p2 = (11'd1023 - xs_exp_fu_813_p3);

assign sub_ln381_fu_1173_p2 = ($signed(8'd0) - $signed(sext_ln381_fu_1157_p1));

assign t_10_fu_704_p4 = {{{xs_sign_2_fu_674_p2}, {xs_exp_4_fu_679_p3}}, {xs_sig_4_fu_698_p2}};

assign t_7_fu_469_p3 = {{xs_sign_reg_1297}, {63'd0}};

assign t_8_fu_520_p3 = {{tmp_19_i_fu_510_p4}, {xs_sig_fu_504_p2}};

assign t_9_fu_576_p1 = data_fu_572_p1[62:0];

assign t_fu_640_p3 = {{1'd1}, {trunc_ln479_fu_637_p1}};

assign tmp_166_fu_849_p3 = add_ln486_fu_843_p2[32'd11];

assign tmp_168_fu_1069_p3 = add_ln486_1_fu_1063_p2[32'd11];

assign tmp_169_fu_1115_p4 = {{lshr_ln18_1_fu_1103_p2[89:53]}};

assign tmp_170_fu_1125_p4 = {{shl_ln18_1_fu_1109_p2[89:53]}};

assign tmp_172_fu_949_p3 = result_fu_929_p3[32'd5];

assign tmp_173_fu_967_p4 = {{add_ln401_fu_961_p2[6:5]}};

assign tmp_19_i_fu_510_p4 = {{data_2_fu_489_p2[63:52]}};

assign tmp_24_fu_905_p4 = {{shl_ln18_fu_889_p2[59:53]}};

assign tmp_2_fu_349_p4 = {{bitcast_ln356_fu_346_p1[62:52]}};

assign tmp_6_fu_589_p4 = {{data_fu_572_p1[62:52]}};

assign tmp_s_fu_895_p4 = {{lshr_ln18_fu_883_p2[59:53]}};

assign trunc_ln339_fu_599_p1 = data_fu_572_p1[51:0];

assign trunc_ln356_fu_359_p1 = bitcast_ln356_fu_346_p1[51:0];

assign trunc_ln363_fu_405_p1 = bitcast_ln356_reg_1249[62:0];

assign trunc_ln381_1_fu_1197_p1 = lshr_ln381_fu_1167_p2[29:0];

assign trunc_ln381_fu_1193_p1 = shl_ln381_fu_1187_p2[29:0];

assign trunc_ln467_fu_494_p1 = data_2_fu_489_p2[51:0];

assign trunc_ln479_fu_637_p1 = data_3_reg_1281[62:0];

assign trunc_ln505_1_fu_1041_p1 = data_6_fu_1021_p1[51:0];

assign trunc_ln505_fu_821_p1 = data_5_fu_801_p1[51:0];

assign val_1_fu_1135_p3 = ((tmp_168_fu_1069_p3[0:0] == 1'b1) ? tmp_169_fu_1115_p4 : tmp_170_fu_1125_p4);

assign val_fu_915_p3 = ((tmp_166_fu_849_p3[0:0] == 1'b1) ? tmp_s_fu_895_p4 : tmp_24_fu_905_p4);

assign xor_ln167_fu_532_p2 = (icmp_ln167_fu_464_p2 ^ 1'd1);

assign xor_ln184_fu_498_p2 = (mask_table_q0 ^ 52'd4503599627370495);

assign xor_ln18_fu_718_p2 = (icmp_ln18_fu_628_p2 ^ 1'd1);

assign xor_ln24_fu_734_p2 = (or_ln24_fu_729_p2 ^ 1'd1);

assign xor_ln363_fu_399_p2 = (bit_sel_fu_392_p3 ^ 1'd1);

assign xor_ln39_fu_692_p2 = (mask_table_50_q0 ^ 52'd4503599627370495);

assign xor_ln_fu_408_p3 = {{xor_ln363_fu_399_p2}, {trunc_ln363_fu_405_p1}};

assign xs_exp_2_fu_662_p3 = {{data_4_fu_648_p2[62:52]}};

assign xs_exp_3_fu_1033_p3 = {{data_6_fu_1021_p1[62:52]}};

assign xs_exp_4_fu_679_p3 = ((xs_sign_reg_1297[0:0] == 1'b1) ? xs_exp_2_fu_662_p3 : xs_exp_1_reg_1288);

assign xs_exp_fu_813_p3 = {{data_5_fu_801_p1[62:52]}};

assign xs_sig_1_fu_625_p1 = data_3_reg_1281[51:0];

assign xs_sig_2_fu_670_p1 = data_4_fu_648_p2[51:0];

assign xs_sig_3_fu_685_p3 = ((xs_sign_reg_1297[0:0] == 1'b1) ? xs_sig_2_fu_670_p1 : xs_sig_1_fu_625_p1);

assign xs_sig_4_fu_698_p2 = (xs_sig_3_fu_685_p3 & xor_ln39_fu_692_p2);

assign xs_sig_fu_504_p2 = (xor_ln184_fu_498_p2 & trunc_ln467_fu_494_p1);

assign xs_sign_1_fu_654_p3 = data_4_fu_648_p2[32'd63];

assign xs_sign_2_fu_674_p2 = (xs_sign_reg_1297 & xs_sign_1_fu_654_p3);

assign xs_sign_3_fu_805_p3 = data_5_fu_801_p1[32'd63];

assign xs_sign_4_fu_1025_p3 = data_6_fu_1021_p1[32'd63];

assign zext_ln15_1_fu_1055_p1 = mantissa_30_fu_1045_p4;

assign zext_ln15_fu_835_p1 = mantissa_fu_825_p4;

assign zext_ln175_fu_485_p1 = one_half_table_q0;

assign zext_ln179_fu_458_p1 = index_fu_448_p4;

assign zext_ln18_1_fu_1099_p1 = $unsigned(sext_ln18_3_fu_1095_p1);

assign zext_ln18_fu_879_p1 = $unsigned(sext_ln18_1_fu_875_p1);

assign zext_ln28_fu_633_p1 = mask_table_50_q0;

assign zext_ln381_1_fu_1183_p1 = $unsigned(sext_ln381_2_fu_1179_p1);

assign zext_ln381_fu_1163_p1 = $unsigned(sext_ln381_1_fu_1160_p1);

assign zext_ln401_fu_957_p1 = result_regime_fu_945_p1;

assign zext_ln479_fu_580_p1 = t_9_fu_576_p1;

assign zext_ln486_1_fu_1059_p1 = xs_exp_3_fu_1033_p3;

assign zext_ln486_fu_839_p1 = xs_exp_fu_813_p3;

always @ (posedge ap_clk) begin
    zext_ln179_reg_1306[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    bitcast_ln497_1_reg_1321[62:0] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //pFFT_double2posit
