// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pFFT_pFFT,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xazu7ev-fbvb900-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.722579,HLS_SYN_LAT=40449,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=34330,HLS_SYN_LUT=45243,HLS_VERSION=2024_2}" *)

module pFFT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        signal_r,
        result_real_address0,
        result_real_ce0,
        result_real_we0,
        result_real_d0,
        result_imag_address0,
        result_imag_ce0,
        result_imag_we0,
        result_imag_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [39:0] signal_r;
output  [5:0] result_real_address0;
output   result_real_ce0;
output   result_real_we0;
output  [39:0] result_real_d0;
output  [5:0] result_imag_address0;
output   result_imag_ce0;
output   result_imag_we0;
output  [39:0] result_imag_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [39:0] signal_r_read_reg_267;
reg   [6:0] k_1_reg_272;
wire    ap_CS_fsm_state2;
wire   [5:0] trunc_ln1373_fu_177_p1;
reg   [5:0] trunc_ln1373_reg_281;
wire    ap_CS_fsm_state3;
wire    grp_pAccumulateFC_fu_116_ap_start;
wire    grp_pAccumulateFC_fu_116_ap_done;
wire    grp_pAccumulateFC_fu_116_ap_idle;
wire    grp_pAccumulateFC_fu_116_ap_ready;
wire   [0:0] grp_pAccumulateFC_fu_116_ap_return_0;
wire   [0:0] grp_pAccumulateFC_fu_116_ap_return_1;
wire   [5:0] grp_pAccumulateFC_fu_116_ap_return_2;
wire   [0:0] grp_pAccumulateFC_fu_116_ap_return_3;
wire   [29:0] grp_pAccumulateFC_fu_116_ap_return_4;
wire   [0:0] grp_pAccumulateFC_fu_116_ap_return_5;
wire   [0:0] grp_pAccumulateFC_fu_116_ap_return_6;
wire   [5:0] grp_pAccumulateFC_fu_116_ap_return_7;
wire   [0:0] grp_pAccumulateFC_fu_116_ap_return_8;
wire   [29:0] grp_pAccumulateFC_fu_116_ap_return_9;
reg    grp_pAccumulateFC_fu_116_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln1366_fu_181_p1;
reg   [6:0] k_fu_80;
wire   [6:0] add_ln1366_fu_166_p2;
wire   [0:0] icmp_ln1366_fu_160_p2;
reg    result_real_we0_local;
wire   [39:0] or_ln1375_4_fu_226_p7;
reg    result_real_ce0_local;
reg    result_imag_we0_local;
wire   [39:0] or_ln1376_4_fu_243_p7;
reg    result_imag_ce0_local;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_pAccumulateFC_fu_116_ap_start_reg = 1'b0;
#0 k_fu_80 = 7'd0;
end

pFFT_pAccumulateFC grp_pAccumulateFC_fu_116(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pAccumulateFC_fu_116_ap_start),
    .ap_done(grp_pAccumulateFC_fu_116_ap_done),
    .ap_idle(grp_pAccumulateFC_fu_116_ap_idle),
    .ap_ready(grp_pAccumulateFC_fu_116_ap_ready),
    .k(trunc_ln1373_reg_281),
    .p_read(signal_r_read_reg_267),
    .ap_return_0(grp_pAccumulateFC_fu_116_ap_return_0),
    .ap_return_1(grp_pAccumulateFC_fu_116_ap_return_1),
    .ap_return_2(grp_pAccumulateFC_fu_116_ap_return_2),
    .ap_return_3(grp_pAccumulateFC_fu_116_ap_return_3),
    .ap_return_4(grp_pAccumulateFC_fu_116_ap_return_4),
    .ap_return_5(grp_pAccumulateFC_fu_116_ap_return_5),
    .ap_return_6(grp_pAccumulateFC_fu_116_ap_return_6),
    .ap_return_7(grp_pAccumulateFC_fu_116_ap_return_7),
    .ap_return_8(grp_pAccumulateFC_fu_116_ap_return_8),
    .ap_return_9(grp_pAccumulateFC_fu_116_ap_return_9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pAccumulateFC_fu_116_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_pAccumulateFC_fu_116_ap_start_reg <= 1'b1;
        end else if ((grp_pAccumulateFC_fu_116_ap_ready == 1'b1)) begin
            grp_pAccumulateFC_fu_116_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_fu_80 <= 7'd0;
    end else if (((icmp_ln1366_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_fu_80 <= add_ln1366_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_1_reg_272 <= k_fu_80;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        signal_r_read_reg_267 <= signal_r;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln1373_reg_281 <= trunc_ln1373_fu_177_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_pAccumulateFC_fu_116_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1366_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1366_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pAccumulateFC_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        result_imag_ce0_local = 1'b1;
    end else begin
        result_imag_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pAccumulateFC_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        result_imag_we0_local = 1'b1;
    end else begin
        result_imag_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pAccumulateFC_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        result_real_ce0_local = 1'b1;
    end else begin
        result_real_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pAccumulateFC_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        result_real_we0_local = 1'b1;
    end else begin
        result_real_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1366_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_pAccumulateFC_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1366_fu_166_p2 = (k_fu_80 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_pAccumulateFC_fu_116_ap_start = grp_pAccumulateFC_fu_116_ap_start_reg;

assign icmp_ln1366_fu_160_p2 = ((k_fu_80 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln1375_4_fu_226_p7 = {{{{{{grp_pAccumulateFC_fu_116_ap_return_4}, {grp_pAccumulateFC_fu_116_ap_return_3}}, {grp_pAccumulateFC_fu_116_ap_return_2}}, {1'd0}}, {grp_pAccumulateFC_fu_116_ap_return_1}}, {grp_pAccumulateFC_fu_116_ap_return_0}};

assign or_ln1376_4_fu_243_p7 = {{{{{{grp_pAccumulateFC_fu_116_ap_return_9}, {grp_pAccumulateFC_fu_116_ap_return_8}}, {grp_pAccumulateFC_fu_116_ap_return_7}}, {1'd0}}, {grp_pAccumulateFC_fu_116_ap_return_6}}, {grp_pAccumulateFC_fu_116_ap_return_5}};

assign result_imag_address0 = zext_ln1366_fu_181_p1;

assign result_imag_ce0 = result_imag_ce0_local;

assign result_imag_d0 = or_ln1376_4_fu_243_p7;

assign result_imag_we0 = result_imag_we0_local;

assign result_real_address0 = zext_ln1366_fu_181_p1;

assign result_real_ce0 = result_real_ce0_local;

assign result_real_d0 = or_ln1375_4_fu_226_p7;

assign result_real_we0 = result_real_we0_local;

assign trunc_ln1373_fu_177_p1 = k_1_reg_272[5:0];

assign zext_ln1366_fu_181_p1 = k_1_reg_272;

endmodule //pFFT
